OpenBrace  '(' [0;1] 
WhiteSpace   [1;2] 
Function  'function' [2;10] 
OpenBrace  '(' [10;11] 
WhiteSpace   [11;12] 
Identifier  'global' [12;18] 
Comma  ',' [18;19] 
WhiteSpace   [19;20] 
Identifier  'factory' [20;27] 
WhiteSpace   [27;28] 
CloseBrace  ')' [28;29] 
WhiteSpace   [29;30] 
OpeningCurlyBrace  '{' [30;31] 
String  '"use strict"' [31;43] 
Semicolon  ';' [43;44] 
If  'if' [44;46] 
WhiteSpace   [46;47] 
OpenBrace  '(' [47;48] 
WhiteSpace   [48;49] 
Identifier  'typeof' [49;55] 
WhiteSpace   [55;56] 
Identifier  'module' [56;62] 
WhiteSpace   [62;63] 
EqualEqual  '==' [63;65] 
Equal  '=' [65;66] 
WhiteSpace   [66;67] 
String  '"object"' [67;75] 
WhiteSpace   [75;76] 
And  '&&' [76;78] 
WhiteSpace   [78;79] 
Identifier  'typeof' [79;85] 
WhiteSpace   [85;86] 
Identifier  'module' [86;92] 
Point  '.' [92;93] 
Identifier  'exports' [93;100] 
WhiteSpace   [100;101] 
EqualEqual  '==' [101;103] 
Equal  '=' [103;104] 
WhiteSpace   [104;105] 
String  '"object"' [105;113] 
WhiteSpace   [113;114] 
CloseBrace  ')' [114;115] 
WhiteSpace   [115;116] 
OpeningCurlyBrace  '{' [116;117] 
Identifier  'module' [117;123] 
Point  '.' [123;124] 
Identifier  'exports' [124;131] 
WhiteSpace   [131;132] 
Equal  '=' [132;133] 
WhiteSpace   [133;134] 
Identifier  'global' [134;140] 
Point  '.' [140;141] 
Identifier  'document' [141;149] 
WhiteSpace   [149;150] 
IfTernary  '?' [150;151] 
Identifier  'factory' [151;158] 
OpenBrace  '(' [158;159] 
WhiteSpace   [159;160] 
Identifier  'global' [160;166] 
Comma  ',' [166;167] 
WhiteSpace   [167;168] 
True  'true' [168;172] 
WhiteSpace   [172;173] 
CloseBrace  ')' [173;174] 
WhiteSpace   [174;175] 
ElseTernary  ':' [175;176] 
Function  'function' [176;184] 
OpenBrace  '(' [184;185] 
WhiteSpace   [185;186] 
Identifier  'w' [186;187] 
WhiteSpace   [187;188] 
CloseBrace  ')' [188;189] 
WhiteSpace   [189;190] 
OpeningCurlyBrace  '{' [190;191] 
If  'if' [191;193] 
WhiteSpace   [193;194] 
OpenBrace  '(' [194;195] 
WhiteSpace   [195;196] 
FalseAbrev  '!' [196;197] 
Identifier  'w' [197;198] 
Point  '.' [198;199] 
Identifier  'document' [199;207] 
WhiteSpace   [207;208] 
CloseBrace  ')' [208;209] 
WhiteSpace   [209;210] 
OpeningCurlyBrace  '{' [210;211] 
Identifier  'throw' [211;216] 
WhiteSpace   [216;217] 
New  'new' [217;220] 
WhiteSpace   [220;221] 
Identifier  'Error' [221;226] 
OpenBrace  '(' [226;227] 
WhiteSpace   [227;228] 
String  '"jQuery requires a window with a document"' [228;270] 
WhiteSpace   [270;271] 
CloseBrace  ')' [271;272] 
Semicolon  ';' [272;273] 
ClosingCurlyBrace  '}' [273;274] 
Return  'return' [274;280] 
WhiteSpace   [280;281] 
Identifier  'factory' [281;288] 
OpenBrace  '(' [288;289] 
WhiteSpace   [289;290] 
Identifier  'w' [290;291] 
WhiteSpace   [291;292] 
CloseBrace  ')' [292;293] 
Semicolon  ';' [293;294] 
ClosingCurlyBrace  '}' [294;295] 
Semicolon  ';' [295;296] 
ClosingCurlyBrace  '}' [296;297] 
WhiteSpace   [297;298] 
Else  'else' [298;302] 
WhiteSpace   [302;303] 
OpeningCurlyBrace  '{' [303;304] 
Identifier  'factory' [304;311] 
OpenBrace  '(' [311;312] 
WhiteSpace   [312;313] 
Identifier  'global' [313;319] 
WhiteSpace   [319;320] 
CloseBrace  ')' [320;321] 
Semicolon  ';' [321;322] 
ClosingCurlyBrace  '}' [322;323] 
ClosingCurlyBrace  '}' [323;324] 
WhiteSpace   [324;325] 
CloseBrace  ')' [325;326] 
OpenBrace  '(' [326;327] 
WhiteSpace   [327;328] 
Identifier  'typeof' [328;334] 
WhiteSpace   [334;335] 
Identifier  'window' [335;341] 
WhiteSpace   [341;342] 
ExclameEqual  '!=' [342;344] 
Equal  '=' [344;345] 
WhiteSpace   [345;346] 
String  '"undefined"' [346;357] 
WhiteSpace   [357;358] 
IfTernary  '?' [358;359] 
WhiteSpace   [359;360] 
Identifier  'window' [360;366] 
WhiteSpace   [366;367] 
ElseTernary  ':' [367;368] 
WhiteSpace   [368;369] 
Identifier  'this' [369;373] 
Comma  ',' [373;374] 
WhiteSpace   [374;375] 
Function  'function' [375;383] 
OpenBrace  '(' [383;384] 
WhiteSpace   [384;385] 
Identifier  'window' [385;391] 
Comma  ',' [391;392] 
WhiteSpace   [392;393] 
Identifier  'noGlobal' [393;401] 
WhiteSpace   [401;402] 
CloseBrace  ')' [402;403] 
WhiteSpace   [403;404] 
OpeningCurlyBrace  '{' [404;405] 
String  '"use strict"' [405;417] 
Semicolon  ';' [417;418] 
Var  'var' [418;421] 
WhiteSpace   [421;422] 
Identifier  'arr' [422;425] 
WhiteSpace   [425;426] 
Equal  '=' [426;427] 
WhiteSpace   [427;428] 
InitArray  '[' [428;429] 
FinalArray  ']' [429;430] 
Semicolon  ';' [430;431] 
Var  'var' [431;434] 
WhiteSpace   [434;435] 
Identifier  'getProto' [435;443] 
WhiteSpace   [443;444] 
Equal  '=' [444;445] 
WhiteSpace   [445;446] 
Identifier  'Object' [446;452] 
Point  '.' [452;453] 
Identifier  'getPrototypeOf' [453;467] 
Semicolon  ';' [467;468] 
Var  'var' [468;471] 
WhiteSpace   [471;472] 
Identifier  'slice' [472;477] 
WhiteSpace   [477;478] 
Equal  '=' [478;479] 
WhiteSpace   [479;480] 
Identifier  'arr' [480;483] 
Point  '.' [483;484] 
Identifier  'slice' [484;489] 
Semicolon  ';' [489;490] 
Var  'var' [490;493] 
WhiteSpace   [493;494] 
Identifier  'flat' [494;498] 
WhiteSpace   [498;499] 
Equal  '=' [499;500] 
WhiteSpace   [500;501] 
Identifier  'arr' [501;504] 
Point  '.' [504;505] 
Identifier  'flat' [505;509] 
WhiteSpace   [509;510] 
IfTernary  '?' [510;511] 
WhiteSpace   [511;512] 
Function  'function' [512;520] 
OpenBrace  '(' [520;521] 
WhiteSpace   [521;522] 
Identifier  'array' [522;527] 
WhiteSpace   [527;528] 
CloseBrace  ')' [528;529] 
WhiteSpace   [529;530] 
OpeningCurlyBrace  '{' [530;531] 
Return  'return' [531;537] 
WhiteSpace   [537;538] 
Identifier  'arr' [538;541] 
Point  '.' [541;542] 
Identifier  'flat' [542;546] 
Point  '.' [546;547] 
Identifier  'call' [547;551] 
OpenBrace  '(' [551;552] 
WhiteSpace   [552;553] 
Identifier  'array' [553;558] 
WhiteSpace   [558;559] 
CloseBrace  ')' [559;560] 
Semicolon  ';' [560;561] 
ClosingCurlyBrace  '}' [561;562] 
WhiteSpace   [562;563] 
ElseTernary  ':' [563;564] 
WhiteSpace   [564;565] 
Function  'function' [565;573] 
OpenBrace  '(' [573;574] 
WhiteSpace   [574;575] 
Identifier  'array' [575;580] 
WhiteSpace   [580;581] 
CloseBrace  ')' [581;582] 
WhiteSpace   [582;583] 
OpeningCurlyBrace  '{' [583;584] 
Return  'return' [584;590] 
WhiteSpace   [590;591] 
Identifier  'arr' [591;594] 
Point  '.' [594;595] 
Identifier  'concat' [595;601] 
Point  '.' [601;602] 
Identifier  'apply' [602;607] 
OpenBrace  '(' [607;608] 
WhiteSpace   [608;609] 
InitArray  '[' [609;610] 
FinalArray  ']' [610;611] 
Comma  ',' [611;612] 
WhiteSpace   [612;613] 
Identifier  'array' [613;618] 
WhiteSpace   [618;619] 
CloseBrace  ')' [619;620] 
Semicolon  ';' [620;621] 
ClosingCurlyBrace  '}' [621;622] 
Semicolon  ';' [622;623] 
Var  'var' [623;626] 
WhiteSpace   [626;627] 
Identifier  'push' [627;631] 
WhiteSpace   [631;632] 
Equal  '=' [632;633] 
WhiteSpace   [633;634] 
Identifier  'arr' [634;637] 
Point  '.' [637;638] 
Identifier  'push' [638;642] 
Semicolon  ';' [642;643] 
Var  'var' [643;646] 
WhiteSpace   [646;647] 
Identifier  'indexOf' [647;654] 
WhiteSpace   [654;655] 
Equal  '=' [655;656] 
WhiteSpace   [656;657] 
Identifier  'arr' [657;660] 
Point  '.' [660;661] 
Identifier  'indexOf' [661;668] 
Semicolon  ';' [668;669] 
Var  'var' [669;672] 
WhiteSpace   [672;673] 
Identifier  'class2type' [673;683] 
WhiteSpace   [683;684] 
Equal  '=' [684;685] 
WhiteSpace   [685;686] 
OpeningCurlyBrace  '{' [686;687] 
ClosingCurlyBrace  '}' [687;688] 
Semicolon  ';' [688;689] 
Var  'var' [689;692] 
WhiteSpace   [692;693] 
Identifier  'toString' [693;701] 
WhiteSpace   [701;702] 
Equal  '=' [702;703] 
WhiteSpace   [703;704] 
Identifier  'class2type' [704;714] 
Point  '.' [714;715] 
Identifier  'toString' [715;723] 
Semicolon  ';' [723;724] 
Var  'var' [724;727] 
WhiteSpace   [727;728] 
Identifier  'hasOwn' [728;734] 
WhiteSpace   [734;735] 
Equal  '=' [735;736] 
WhiteSpace   [736;737] 
Identifier  'class2type' [737;747] 
Point  '.' [747;748] 
Identifier  'hasOwnProperty' [748;762] 
Semicolon  ';' [762;763] 
Var  'var' [763;766] 
WhiteSpace   [766;767] 
Identifier  'fnToString' [767;777] 
WhiteSpace   [777;778] 
Equal  '=' [778;779] 
WhiteSpace   [779;780] 
Identifier  'hasOwn' [780;786] 
Point  '.' [786;787] 
Identifier  'toString' [787;795] 
Semicolon  ';' [795;796] 
Var  'var' [796;799] 
WhiteSpace   [799;800] 
Identifier  'ObjectFunctionString' [800;820] 
WhiteSpace   [820;821] 
Equal  '=' [821;822] 
WhiteSpace   [822;823] 
Identifier  'fnToString' [823;833] 
Point  '.' [833;834] 
Identifier  'call' [834;838] 
OpenBrace  '(' [838;839] 
WhiteSpace   [839;840] 
Identifier  'Object' [840;846] 
WhiteSpace   [846;847] 
CloseBrace  ')' [847;848] 
Semicolon  ';' [848;849] 
Var  'var' [849;852] 
WhiteSpace   [852;853] 
Identifier  'support' [853;860] 
WhiteSpace   [860;861] 
Equal  '=' [861;862] 
WhiteSpace   [862;863] 
OpeningCurlyBrace  '{' [863;864] 
ClosingCurlyBrace  '}' [864;865] 
Semicolon  ';' [865;866] 
Var  'var' [866;869] 
WhiteSpace   [869;870] 
Identifier  'isFunction' [870;880] 
WhiteSpace   [880;881] 
Equal  '=' [881;882] 
WhiteSpace   [882;883] 
Function  'function' [883;891] 
WhiteSpace   [891;892] 
Identifier  'isFunction' [892;902] 
OpenBrace  '(' [902;903] 
WhiteSpace   [903;904] 
Identifier  'obj' [904;907] 
WhiteSpace   [907;908] 
CloseBrace  ')' [908;909] 
WhiteSpace   [909;910] 
OpeningCurlyBrace  '{' [910;911] 
Return  'return' [911;917] 
WhiteSpace   [917;918] 
Identifier  'typeof' [918;924] 
WhiteSpace   [924;925] 
Identifier  'obj' [925;928] 
WhiteSpace   [928;929] 
EqualEqual  '==' [929;931] 
Equal  '=' [931;932] 
WhiteSpace   [932;933] 
String  '"function"' [933;943] 
WhiteSpace   [943;944] 
And  '&&' [944;946] 
WhiteSpace   [946;947] 
Identifier  'typeof' [947;953] 
WhiteSpace   [953;954] 
Identifier  'obj' [954;957] 
Point  '.' [957;958] 
Identifier  'nodeType' [958;966] 
WhiteSpace   [966;967] 
ExclameEqual  '!=' [967;969] 
Equal  '=' [969;970] 
WhiteSpace   [970;971] 
String  '"number"' [971;979] 
WhiteSpace   [979;980] 
And  '&&' [980;982] 
Identifier  'typeof' [982;988] 
WhiteSpace   [988;989] 
Identifier  'obj' [989;992] 
Point  '.' [992;993] 
Identifier  'item' [993;997] 
WhiteSpace   [997;998] 
ExclameEqual  '!=' [998;1000] 
Equal  '=' [1000;1001] 
WhiteSpace   [1001;1002] 
String  '"function"' [1002;1012] 
Semicolon  ';' [1012;1013] 
ClosingCurlyBrace  '}' [1013;1014] 
Semicolon  ';' [1014;1015] 
Var  'var' [1015;1018] 
WhiteSpace   [1018;1019] 
Identifier  'isWindow' [1019;1027] 
WhiteSpace   [1027;1028] 
Equal  '=' [1028;1029] 
WhiteSpace   [1029;1030] 
Function  'function' [1030;1038] 
WhiteSpace   [1038;1039] 
Identifier  'isWindow' [1039;1047] 
OpenBrace  '(' [1047;1048] 
WhiteSpace   [1048;1049] 
Identifier  'obj' [1049;1052] 
WhiteSpace   [1052;1053] 
CloseBrace  ')' [1053;1054] 
WhiteSpace   [1054;1055] 
OpeningCurlyBrace  '{' [1055;1056] 
Return  'return' [1056;1062] 
WhiteSpace   [1062;1063] 
Identifier  'obj' [1063;1066] 
WhiteSpace   [1066;1067] 
ExclameEqual  '!=' [1067;1069] 
WhiteSpace   [1069;1070] 
Null  'null' [1070;1074] 
WhiteSpace   [1074;1075] 
And  '&&' [1075;1077] 
WhiteSpace   [1077;1078] 
Identifier  'obj' [1078;1081] 
WhiteSpace   [1081;1082] 
EqualEqual  '==' [1082;1084] 
Equal  '=' [1084;1085] 
WhiteSpace   [1085;1086] 
Identifier  'obj' [1086;1089] 
Point  '.' [1089;1090] 
Identifier  'window' [1090;1096] 
Semicolon  ';' [1096;1097] 
ClosingCurlyBrace  '}' [1097;1098] 
Semicolon  ';' [1098;1099] 
Var  'var' [1099;1102] 
WhiteSpace   [1102;1103] 
Identifier  'document' [1103;1111] 
WhiteSpace   [1111;1112] 
Equal  '=' [1112;1113] 
WhiteSpace   [1113;1114] 
Identifier  'window' [1114;1120] 
Point  '.' [1120;1121] 
Identifier  'document' [1121;1129] 
Semicolon  ';' [1129;1130] 
Var  'var' [1130;1133] 
WhiteSpace   [1133;1134] 
Identifier  'preservedScriptAttributes' [1134;1159] 
WhiteSpace   [1159;1160] 
Equal  '=' [1160;1161] 
WhiteSpace   [1161;1162] 
OpeningCurlyBrace  '{' [1162;1163] 
Identifier  'type' [1163;1167] 
ElseTernary  ':' [1167;1168] 
WhiteSpace   [1168;1169] 
True  'true' [1169;1173] 
Comma  ',' [1173;1174] 
Identifier  'src' [1174;1177] 
ElseTernary  ':' [1177;1178] 
WhiteSpace   [1178;1179] 
True  'true' [1179;1183] 
Comma  ',' [1183;1184] 
Identifier  'nonce' [1184;1189] 
ElseTernary  ':' [1189;1190] 
WhiteSpace   [1190;1191] 
True  'true' [1191;1195] 
Comma  ',' [1195;1196] 
Identifier  'noModule' [1196;1204] 
ElseTernary  ':' [1204;1205] 
WhiteSpace   [1205;1206] 
True  'true' [1206;1210] 
ClosingCurlyBrace  '}' [1210;1211] 
Semicolon  ';' [1211;1212] 
Function  'function' [1212;1220] 
WhiteSpace   [1220;1221] 
Identifier  'DOMEval' [1221;1228] 
OpenBrace  '(' [1228;1229] 
WhiteSpace   [1229;1230] 
Identifier  'code' [1230;1234] 
Comma  ',' [1234;1235] 
WhiteSpace   [1235;1236] 
Identifier  'node' [1236;1240] 
Comma  ',' [1240;1241] 
WhiteSpace   [1241;1242] 
Identifier  'doc' [1242;1245] 
WhiteSpace   [1245;1246] 
CloseBrace  ')' [1246;1247] 
WhiteSpace   [1247;1248] 
OpeningCurlyBrace  '{' [1248;1249] 
Identifier  'doc' [1249;1252] 
WhiteSpace   [1252;1253] 
Equal  '=' [1253;1254] 
WhiteSpace   [1254;1255] 
Identifier  'doc' [1255;1258] 
WhiteSpace   [1258;1259] 
Or  '||' [1259;1261] 
WhiteSpace   [1261;1262] 
Identifier  'document' [1262;1270] 
Semicolon  ';' [1270;1271] 
Var  'var' [1271;1274] 
WhiteSpace   [1274;1275] 
Identifier  'i' [1275;1276] 
Comma  ',' [1276;1277] 
WhiteSpace   [1277;1278] 
Identifier  'val' [1278;1281] 
Comma  ',' [1281;1282] 
Identifier  'script' [1282;1288] 
WhiteSpace   [1288;1289] 
Equal  '=' [1289;1290] 
WhiteSpace   [1290;1291] 
Identifier  'doc' [1291;1294] 
Point  '.' [1294;1295] 
Identifier  'createElement' [1295;1308] 
OpenBrace  '(' [1308;1309] 
WhiteSpace   [1309;1310] 
String  '"script"' [1310;1318] 
WhiteSpace   [1318;1319] 
CloseBrace  ')' [1319;1320] 
Semicolon  ';' [1320;1321] 
Identifier  'script' [1321;1327] 
Point  '.' [1327;1328] 
Identifier  'text' [1328;1332] 
WhiteSpace   [1332;1333] 
Equal  '=' [1333;1334] 
WhiteSpace   [1334;1335] 
Identifier  'code' [1335;1339] 
Semicolon  ';' [1339;1340] 
If  'if' [1340;1342] 
WhiteSpace   [1342;1343] 
OpenBrace  '(' [1343;1344] 
WhiteSpace   [1344;1345] 
Identifier  'node' [1345;1349] 
WhiteSpace   [1349;1350] 
CloseBrace  ')' [1350;1351] 
WhiteSpace   [1351;1352] 
OpeningCurlyBrace  '{' [1352;1353] 
Identifier  'for' [1353;1356] 
WhiteSpace   [1356;1357] 
OpenBrace  '(' [1357;1358] 
WhiteSpace   [1358;1359] 
Identifier  'i' [1359;1360] 
WhiteSpace   [1360;1361] 
Identifier  'in' [1361;1363] 
WhiteSpace   [1363;1364] 
Identifier  'preservedScriptAttributes' [1364;1389] 
WhiteSpace   [1389;1390] 
CloseBrace  ')' [1390;1391] 
WhiteSpace   [1391;1392] 
OpeningCurlyBrace  '{' [1392;1393] 
Identifier  'val' [1393;1396] 
WhiteSpace   [1396;1397] 
Equal  '=' [1397;1398] 
WhiteSpace   [1398;1399] 
Identifier  'node' [1399;1403] 
InitArray  '[' [1403;1404] 
WhiteSpace   [1404;1405] 
Identifier  'i' [1405;1406] 
WhiteSpace   [1406;1407] 
FinalArray  ']' [1407;1408] 
WhiteSpace   [1408;1409] 
Or  '||' [1409;1411] 
WhiteSpace   [1411;1412] 
Identifier  'node' [1412;1416] 
Point  '.' [1416;1417] 
Identifier  'getAttribute' [1417;1429] 
WhiteSpace   [1429;1430] 
And  '&&' [1430;1432] 
WhiteSpace   [1432;1433] 
Identifier  'node' [1433;1437] 
Point  '.' [1437;1438] 
Identifier  'getAttribute' [1438;1450] 
OpenBrace  '(' [1450;1451] 
WhiteSpace   [1451;1452] 
Identifier  'i' [1452;1453] 
WhiteSpace   [1453;1454] 
CloseBrace  ')' [1454;1455] 
Semicolon  ';' [1455;1456] 
If  'if' [1456;1458] 
WhiteSpace   [1458;1459] 
OpenBrace  '(' [1459;1460] 
WhiteSpace   [1460;1461] 
Identifier  'val' [1461;1464] 
WhiteSpace   [1464;1465] 
CloseBrace  ')' [1465;1466] 
WhiteSpace   [1466;1467] 
OpeningCurlyBrace  '{' [1467;1468] 
Identifier  'script' [1468;1474] 
Point  '.' [1474;1475] 
Identifier  'setAttribute' [1475;1487] 
OpenBrace  '(' [1487;1488] 
WhiteSpace   [1488;1489] 
Identifier  'i' [1489;1490] 
Comma  ',' [1490;1491] 
WhiteSpace   [1491;1492] 
Identifier  'val' [1492;1495] 
WhiteSpace   [1495;1496] 
CloseBrace  ')' [1496;1497] 
Semicolon  ';' [1497;1498] 
ClosingCurlyBrace  '}' [1498;1499] 
ClosingCurlyBrace  '}' [1499;1500] 
ClosingCurlyBrace  '}' [1500;1501] 
Identifier  'doc' [1501;1504] 
Point  '.' [1504;1505] 
Identifier  'head' [1505;1509] 
Point  '.' [1509;1510] 
Identifier  'appendChild' [1510;1521] 
OpenBrace  '(' [1521;1522] 
WhiteSpace   [1522;1523] 
Identifier  'script' [1523;1529] 
WhiteSpace   [1529;1530] 
CloseBrace  ')' [1530;1531] 
Point  '.' [1531;1532] 
Identifier  'parentNode' [1532;1542] 
Point  '.' [1542;1543] 
Identifier  'removeChild' [1543;1554] 
OpenBrace  '(' [1554;1555] 
WhiteSpace   [1555;1556] 
Identifier  'script' [1556;1562] 
WhiteSpace   [1562;1563] 
CloseBrace  ')' [1563;1564] 
Semicolon  ';' [1564;1565] 
ClosingCurlyBrace  '}' [1565;1566] 
Function  'function' [1566;1574] 
WhiteSpace   [1574;1575] 
Identifier  'toType' [1575;1581] 
OpenBrace  '(' [1581;1582] 
WhiteSpace   [1582;1583] 
Identifier  'obj' [1583;1586] 
WhiteSpace   [1586;1587] 
CloseBrace  ')' [1587;1588] 
WhiteSpace   [1588;1589] 
OpeningCurlyBrace  '{' [1589;1590] 
If  'if' [1590;1592] 
WhiteSpace   [1592;1593] 
OpenBrace  '(' [1593;1594] 
WhiteSpace   [1594;1595] 
Identifier  'obj' [1595;1598] 
WhiteSpace   [1598;1599] 
EqualEqual  '==' [1599;1601] 
WhiteSpace   [1601;1602] 
Null  'null' [1602;1606] 
WhiteSpace   [1606;1607] 
CloseBrace  ')' [1607;1608] 
WhiteSpace   [1608;1609] 
OpeningCurlyBrace  '{' [1609;1610] 
Return  'return' [1610;1616] 
WhiteSpace   [1616;1617] 
Identifier  'obj' [1617;1620] 
WhiteSpace   [1620;1621] 
Plus  '+' [1621;1622] 
WhiteSpace   [1622;1623] 
String  '""' [1623;1625] 
Semicolon  ';' [1625;1626] 
ClosingCurlyBrace  '}' [1626;1627] 
Return  'return' [1627;1633] 
WhiteSpace   [1633;1634] 
Identifier  'typeof' [1634;1640] 
WhiteSpace   [1640;1641] 
Identifier  'obj' [1641;1644] 
WhiteSpace   [1644;1645] 
EqualEqual  '==' [1645;1647] 
Equal  '=' [1647;1648] 
WhiteSpace   [1648;1649] 
String  '"object"' [1649;1657] 
WhiteSpace   [1657;1658] 
Or  '||' [1658;1660] 
WhiteSpace   [1660;1661] 
Identifier  'typeof' [1661;1667] 
WhiteSpace   [1667;1668] 
Identifier  'obj' [1668;1671] 
WhiteSpace   [1671;1672] 
EqualEqual  '==' [1672;1674] 
Equal  '=' [1674;1675] 
WhiteSpace   [1675;1676] 
String  '"function"' [1676;1686] 
WhiteSpace   [1686;1687] 
IfTernary  '?' [1687;1688] 
Identifier  'class2type' [1688;1698] 
InitArray  '[' [1698;1699] 
WhiteSpace   [1699;1700] 
Identifier  'toString' [1700;1708] 
Point  '.' [1708;1709] 
Identifier  'call' [1709;1713] 
OpenBrace  '(' [1713;1714] 
WhiteSpace   [1714;1715] 
Identifier  'obj' [1715;1718] 
WhiteSpace   [1718;1719] 
CloseBrace  ')' [1719;1720] 
WhiteSpace   [1720;1721] 
FinalArray  ']' [1721;1722] 
WhiteSpace   [1722;1723] 
Or  '||' [1723;1725] 
WhiteSpace   [1725;1726] 
String  '"object"' [1726;1734] 
WhiteSpace   [1734;1735] 
ElseTernary  ':' [1735;1736] 
Identifier  'typeof' [1736;1742] 
WhiteSpace   [1742;1743] 
Identifier  'obj' [1743;1746] 
Semicolon  ';' [1746;1747] 
ClosingCurlyBrace  '}' [1747;1748] 
Identifier  'varversion' [1748;1758] 
WhiteSpace   [1758;1759] 
Equal  '=' [1759;1760] 
WhiteSpace   [1760;1761] 
String  '"3.6.0"' [1761;1768] 
Comma  ',' [1768;1769] 
Identifier  'jQuery' [1769;1775] 
WhiteSpace   [1775;1776] 
Equal  '=' [1776;1777] 
WhiteSpace   [1777;1778] 
Function  'function' [1778;1786] 
OpenBrace  '(' [1786;1787] 
WhiteSpace   [1787;1788] 
Identifier  'selector' [1788;1796] 
Comma  ',' [1796;1797] 
WhiteSpace   [1797;1798] 
Identifier  'context' [1798;1805] 
WhiteSpace   [1805;1806] 
CloseBrace  ')' [1806;1807] 
WhiteSpace   [1807;1808] 
OpeningCurlyBrace  '{' [1808;1809] 
Return  'return' [1809;1815] 
WhiteSpace   [1815;1816] 
New  'new' [1816;1819] 
WhiteSpace   [1819;1820] 
Identifier  'jQuery' [1820;1826] 
Point  '.' [1826;1827] 
Identifier  'fn' [1827;1829] 
Point  '.' [1829;1830] 
Identifier  'init' [1830;1834] 
OpenBrace  '(' [1834;1835] 
WhiteSpace   [1835;1836] 
Identifier  'selector' [1836;1844] 
Comma  ',' [1844;1845] 
WhiteSpace   [1845;1846] 
Identifier  'context' [1846;1853] 
WhiteSpace   [1853;1854] 
CloseBrace  ')' [1854;1855] 
Semicolon  ';' [1855;1856] 
ClosingCurlyBrace  '}' [1856;1857] 
Semicolon  ';' [1857;1858] 
Identifier  'jQuery' [1858;1864] 
Point  '.' [1864;1865] 
Identifier  'fn' [1865;1867] 
WhiteSpace   [1867;1868] 
Equal  '=' [1868;1869] 
WhiteSpace   [1869;1870] 
Identifier  'jQuery' [1870;1876] 
Point  '.' [1876;1877] 
Identifier  'prototype' [1877;1886] 
WhiteSpace   [1886;1887] 
Equal  '=' [1887;1888] 
WhiteSpace   [1888;1889] 
OpeningCurlyBrace  '{' [1889;1890] 
Identifier  'jquery' [1890;1896] 
ElseTernary  ':' [1896;1897] 
WhiteSpace   [1897;1898] 
Identifier  'version' [1898;1905] 
Comma  ',' [1905;1906] 
Identifier  'constructor' [1906;1917] 
ElseTernary  ':' [1917;1918] 
WhiteSpace   [1918;1919] 
Identifier  'jQuery' [1919;1925] 
Comma  ',' [1925;1926] 
Identifier  'length' [1926;1932] 
ElseTernary  ':' [1932;1933] 
WhiteSpace   [1933;1934] 
IntConstant  '0' [1934;1935] 
Comma  ',' [1935;1936] 
Identifier  'toArray' [1936;1943] 
ElseTernary  ':' [1943;1944] 
WhiteSpace   [1944;1945] 
Function  'function' [1945;1953] 
OpenBrace  '(' [1953;1954] 
CloseBrace  ')' [1954;1955] 
WhiteSpace   [1955;1956] 
OpeningCurlyBrace  '{' [1956;1957] 
Return  'return' [1957;1963] 
WhiteSpace   [1963;1964] 
Identifier  'slice' [1964;1969] 
Point  '.' [1969;1970] 
Identifier  'call' [1970;1974] 
OpenBrace  '(' [1974;1975] 
WhiteSpace   [1975;1976] 
Identifier  'this' [1976;1980] 
WhiteSpace   [1980;1981] 
CloseBrace  ')' [1981;1982] 
Semicolon  ';' [1982;1983] 
ClosingCurlyBrace  '}' [1983;1984] 
Comma  ',' [1984;1985] 
Identifier  'get' [1985;1988] 
ElseTernary  ':' [1988;1989] 
WhiteSpace   [1989;1990] 
Function  'function' [1990;1998] 
OpenBrace  '(' [1998;1999] 
WhiteSpace   [1999;2000] 
Identifier  'num' [2000;2003] 
WhiteSpace   [2003;2004] 
CloseBrace  ')' [2004;2005] 
WhiteSpace   [2005;2006] 
OpeningCurlyBrace  '{' [2006;2007] 
If  'if' [2007;2009] 
WhiteSpace   [2009;2010] 
OpenBrace  '(' [2010;2011] 
WhiteSpace   [2011;2012] 
Identifier  'num' [2012;2015] 
WhiteSpace   [2015;2016] 
EqualEqual  '==' [2016;2018] 
WhiteSpace   [2018;2019] 
Null  'null' [2019;2023] 
WhiteSpace   [2023;2024] 
CloseBrace  ')' [2024;2025] 
WhiteSpace   [2025;2026] 
OpeningCurlyBrace  '{' [2026;2027] 
Return  'return' [2027;2033] 
WhiteSpace   [2033;2034] 
Identifier  'slice' [2034;2039] 
Point  '.' [2039;2040] 
Identifier  'call' [2040;2044] 
OpenBrace  '(' [2044;2045] 
WhiteSpace   [2045;2046] 
Identifier  'this' [2046;2050] 
WhiteSpace   [2050;2051] 
CloseBrace  ')' [2051;2052] 
Semicolon  ';' [2052;2053] 
ClosingCurlyBrace  '}' [2053;2054] 
Return  'return' [2054;2060] 
WhiteSpace   [2060;2061] 
Identifier  'num' [2061;2064] 
WhiteSpace   [2064;2065] 
Less  '<' [2065;2066] 
WhiteSpace   [2066;2067] 
IntConstant  '0' [2067;2068] 
WhiteSpace   [2068;2069] 
IfTernary  '?' [2069;2070] 
WhiteSpace   [2070;2071] 
Identifier  'this' [2071;2075] 
InitArray  '[' [2075;2076] 
WhiteSpace   [2076;2077] 
Identifier  'num' [2077;2080] 
WhiteSpace   [2080;2081] 
Plus  '+' [2081;2082] 
WhiteSpace   [2082;2083] 
Identifier  'this' [2083;2087] 
Point  '.' [2087;2088] 
Identifier  'length' [2088;2094] 
WhiteSpace   [2094;2095] 
FinalArray  ']' [2095;2096] 
WhiteSpace   [2096;2097] 
ElseTernary  ':' [2097;2098] 
WhiteSpace   [2098;2099] 
Identifier  'this' [2099;2103] 
InitArray  '[' [2103;2104] 
WhiteSpace   [2104;2105] 
Identifier  'num' [2105;2108] 
WhiteSpace   [2108;2109] 
FinalArray  ']' [2109;2110] 
Semicolon  ';' [2110;2111] 
ClosingCurlyBrace  '}' [2111;2112] 
Comma  ',' [2112;2113] 
Identifier  'pushStack' [2113;2122] 
ElseTernary  ':' [2122;2123] 
WhiteSpace   [2123;2124] 
Function  'function' [2124;2132] 
OpenBrace  '(' [2132;2133] 
WhiteSpace   [2133;2134] 
Identifier  'elems' [2134;2139] 
WhiteSpace   [2139;2140] 
CloseBrace  ')' [2140;2141] 
WhiteSpace   [2141;2142] 
OpeningCurlyBrace  '{' [2142;2143] 
Var  'var' [2143;2146] 
WhiteSpace   [2146;2147] 
Identifier  'ret' [2147;2150] 
WhiteSpace   [2150;2151] 
Equal  '=' [2151;2152] 
WhiteSpace   [2152;2153] 
Identifier  'jQuery' [2153;2159] 
Point  '.' [2159;2160] 
Identifier  'merge' [2160;2165] 
OpenBrace  '(' [2165;2166] 
WhiteSpace   [2166;2167] 
Identifier  'this' [2167;2171] 
Point  '.' [2171;2172] 
Identifier  'constructor' [2172;2183] 
OpenBrace  '(' [2183;2184] 
CloseBrace  ')' [2184;2185] 
Comma  ',' [2185;2186] 
WhiteSpace   [2186;2187] 
Identifier  'elems' [2187;2192] 
WhiteSpace   [2192;2193] 
CloseBrace  ')' [2193;2194] 
Semicolon  ';' [2194;2195] 
Identifier  'ret' [2195;2198] 
Point  '.' [2198;2199] 
Identifier  'prevObject' [2199;2209] 
WhiteSpace   [2209;2210] 
Equal  '=' [2210;2211] 
WhiteSpace   [2211;2212] 
Identifier  'this' [2212;2216] 
Semicolon  ';' [2216;2217] 
Return  'return' [2217;2223] 
WhiteSpace   [2223;2224] 
Identifier  'ret' [2224;2227] 
Semicolon  ';' [2227;2228] 
ClosingCurlyBrace  '}' [2228;2229] 
Comma  ',' [2229;2230] 
Identifier  'each' [2230;2234] 
ElseTernary  ':' [2234;2235] 
WhiteSpace   [2235;2236] 
Function  'function' [2236;2244] 
OpenBrace  '(' [2244;2245] 
WhiteSpace   [2245;2246] 
Identifier  'callback' [2246;2254] 
WhiteSpace   [2254;2255] 
CloseBrace  ')' [2255;2256] 
WhiteSpace   [2256;2257] 
OpeningCurlyBrace  '{' [2257;2258] 
Return  'return' [2258;2264] 
WhiteSpace   [2264;2265] 
Identifier  'jQuery' [2265;2271] 
Point  '.' [2271;2272] 
Identifier  'each' [2272;2276] 
OpenBrace  '(' [2276;2277] 
WhiteSpace   [2277;2278] 
Identifier  'this' [2278;2282] 
Comma  ',' [2282;2283] 
WhiteSpace   [2283;2284] 
Identifier  'callback' [2284;2292] 
WhiteSpace   [2292;2293] 
CloseBrace  ')' [2293;2294] 
Semicolon  ';' [2294;2295] 
ClosingCurlyBrace  '}' [2295;2296] 
Comma  ',' [2296;2297] 
Identifier  'map' [2297;2300] 
ElseTernary  ':' [2300;2301] 
WhiteSpace   [2301;2302] 
Function  'function' [2302;2310] 
OpenBrace  '(' [2310;2311] 
WhiteSpace   [2311;2312] 
Identifier  'callback' [2312;2320] 
WhiteSpace   [2320;2321] 
CloseBrace  ')' [2321;2322] 
WhiteSpace   [2322;2323] 
OpeningCurlyBrace  '{' [2323;2324] 
Return  'return' [2324;2330] 
WhiteSpace   [2330;2331] 
Identifier  'this' [2331;2335] 
Point  '.' [2335;2336] 
Identifier  'pushStack' [2336;2345] 
OpenBrace  '(' [2345;2346] 
WhiteSpace   [2346;2347] 
Identifier  'jQuery' [2347;2353] 
Point  '.' [2353;2354] 
Identifier  'map' [2354;2357] 
OpenBrace  '(' [2357;2358] 
WhiteSpace   [2358;2359] 
Identifier  'this' [2359;2363] 
Comma  ',' [2363;2364] 
WhiteSpace   [2364;2365] 
Function  'function' [2365;2373] 
OpenBrace  '(' [2373;2374] 
WhiteSpace   [2374;2375] 
Identifier  'elem' [2375;2379] 
Comma  ',' [2379;2380] 
WhiteSpace   [2380;2381] 
Identifier  'i' [2381;2382] 
WhiteSpace   [2382;2383] 
CloseBrace  ')' [2383;2384] 
WhiteSpace   [2384;2385] 
OpeningCurlyBrace  '{' [2385;2386] 
Return  'return' [2386;2392] 
WhiteSpace   [2392;2393] 
Identifier  'callback' [2393;2401] 
Point  '.' [2401;2402] 
Identifier  'call' [2402;2406] 
OpenBrace  '(' [2406;2407] 
WhiteSpace   [2407;2408] 
Identifier  'elem' [2408;2412] 
Comma  ',' [2412;2413] 
WhiteSpace   [2413;2414] 
Identifier  'i' [2414;2415] 
Comma  ',' [2415;2416] 
WhiteSpace   [2416;2417] 
Identifier  'elem' [2417;2421] 
WhiteSpace   [2421;2422] 
CloseBrace  ')' [2422;2423] 
Semicolon  ';' [2423;2424] 
ClosingCurlyBrace  '}' [2424;2425] 
WhiteSpace   [2425;2426] 
CloseBrace  ')' [2426;2427] 
WhiteSpace   [2427;2428] 
CloseBrace  ')' [2428;2429] 
Semicolon  ';' [2429;2430] 
ClosingCurlyBrace  '}' [2430;2431] 
Comma  ',' [2431;2432] 
Identifier  'slice' [2432;2437] 
ElseTernary  ':' [2437;2438] 
WhiteSpace   [2438;2439] 
Function  'function' [2439;2447] 
OpenBrace  '(' [2447;2448] 
CloseBrace  ')' [2448;2449] 
WhiteSpace   [2449;2450] 
OpeningCurlyBrace  '{' [2450;2451] 
Return  'return' [2451;2457] 
WhiteSpace   [2457;2458] 
Identifier  'this' [2458;2462] 
Point  '.' [2462;2463] 
Identifier  'pushStack' [2463;2472] 
OpenBrace  '(' [2472;2473] 
WhiteSpace   [2473;2474] 
Identifier  'slice' [2474;2479] 
Point  '.' [2479;2480] 
Identifier  'apply' [2480;2485] 
OpenBrace  '(' [2485;2486] 
WhiteSpace   [2486;2487] 
Identifier  'this' [2487;2491] 
Comma  ',' [2491;2492] 
WhiteSpace   [2492;2493] 
Identifier  'arguments' [2493;2502] 
WhiteSpace   [2502;2503] 
CloseBrace  ')' [2503;2504] 
WhiteSpace   [2504;2505] 
CloseBrace  ')' [2505;2506] 
Semicolon  ';' [2506;2507] 
ClosingCurlyBrace  '}' [2507;2508] 
Comma  ',' [2508;2509] 
Identifier  'first' [2509;2514] 
ElseTernary  ':' [2514;2515] 
WhiteSpace   [2515;2516] 
Function  'function' [2516;2524] 
OpenBrace  '(' [2524;2525] 
CloseBrace  ')' [2525;2526] 
WhiteSpace   [2526;2527] 
OpeningCurlyBrace  '{' [2527;2528] 
Return  'return' [2528;2534] 
WhiteSpace   [2534;2535] 
Identifier  'this' [2535;2539] 
Point  '.' [2539;2540] 
Identifier  'eq' [2540;2542] 
OpenBrace  '(' [2542;2543] 
WhiteSpace   [2543;2544] 
IntConstant  '0' [2544;2545] 
WhiteSpace   [2545;2546] 
CloseBrace  ')' [2546;2547] 
Semicolon  ';' [2547;2548] 
ClosingCurlyBrace  '}' [2548;2549] 
Comma  ',' [2549;2550] 
Identifier  'last' [2550;2554] 
ElseTernary  ':' [2554;2555] 
WhiteSpace   [2555;2556] 
Function  'function' [2556;2564] 
OpenBrace  '(' [2564;2565] 
CloseBrace  ')' [2565;2566] 
WhiteSpace   [2566;2567] 
OpeningCurlyBrace  '{' [2567;2568] 
Return  'return' [2568;2574] 
WhiteSpace   [2574;2575] 
Identifier  'this' [2575;2579] 
Point  '.' [2579;2580] 
Identifier  'eq' [2580;2582] 
OpenBrace  '(' [2582;2583] 
WhiteSpace   [2583;2584] 
Minus  '-' [2584;2585] 
IntConstant  '1' [2585;2586] 
WhiteSpace   [2586;2587] 
CloseBrace  ')' [2587;2588] 
Semicolon  ';' [2588;2589] 
ClosingCurlyBrace  '}' [2589;2590] 
Comma  ',' [2590;2591] 
Identifier  'even' [2591;2595] 
ElseTernary  ':' [2595;2596] 
WhiteSpace   [2596;2597] 
Function  'function' [2597;2605] 
OpenBrace  '(' [2605;2606] 
CloseBrace  ')' [2606;2607] 
WhiteSpace   [2607;2608] 
OpeningCurlyBrace  '{' [2608;2609] 
Return  'return' [2609;2615] 
WhiteSpace   [2615;2616] 
Identifier  'this' [2616;2620] 
Point  '.' [2620;2621] 
Identifier  'pushStack' [2621;2630] 
OpenBrace  '(' [2630;2631] 
WhiteSpace   [2631;2632] 
Identifier  'jQuery' [2632;2638] 
Point  '.' [2638;2639] 
Identifier  'grep' [2639;2643] 
OpenBrace  '(' [2643;2644] 
WhiteSpace   [2644;2645] 
Identifier  'this' [2645;2649] 
Comma  ',' [2649;2650] 
WhiteSpace   [2650;2651] 
Function  'function' [2651;2659] 
OpenBrace  '(' [2659;2660] 
WhiteSpace   [2660;2661] 
Identifier  '_elem' [2661;2666] 
Comma  ',' [2666;2667] 
WhiteSpace   [2667;2668] 
Identifier  'i' [2668;2669] 
WhiteSpace   [2669;2670] 
CloseBrace  ')' [2670;2671] 
WhiteSpace   [2671;2672] 
OpeningCurlyBrace  '{' [2672;2673] 
Return  'return' [2673;2679] 
WhiteSpace   [2679;2680] 
OpenBrace  '(' [2680;2681] 
WhiteSpace   [2681;2682] 
Identifier  'i' [2682;2683] 
WhiteSpace   [2683;2684] 
Plus  '+' [2684;2685] 
WhiteSpace   [2685;2686] 
IntConstant  '1' [2686;2687] 
WhiteSpace   [2687;2688] 
CloseBrace  ')' [2688;2689] 
WhiteSpace   [2689;2690] 
Module  '%' [2690;2691] 
WhiteSpace   [2691;2692] 
IntConstant  '2' [2692;2693] 
Semicolon  ';' [2693;2694] 
ClosingCurlyBrace  '}' [2694;2695] 
WhiteSpace   [2695;2696] 
CloseBrace  ')' [2696;2697] 
WhiteSpace   [2697;2698] 
CloseBrace  ')' [2698;2699] 
Semicolon  ';' [2699;2700] 
ClosingCurlyBrace  '}' [2700;2701] 
Comma  ',' [2701;2702] 
Identifier  'odd' [2702;2705] 
ElseTernary  ':' [2705;2706] 
WhiteSpace   [2706;2707] 
Function  'function' [2707;2715] 
OpenBrace  '(' [2715;2716] 
CloseBrace  ')' [2716;2717] 
WhiteSpace   [2717;2718] 
OpeningCurlyBrace  '{' [2718;2719] 
Return  'return' [2719;2725] 
WhiteSpace   [2725;2726] 
Identifier  'this' [2726;2730] 
Point  '.' [2730;2731] 
Identifier  'pushStack' [2731;2740] 
OpenBrace  '(' [2740;2741] 
WhiteSpace   [2741;2742] 
Identifier  'jQuery' [2742;2748] 
Point  '.' [2748;2749] 
Identifier  'grep' [2749;2753] 
OpenBrace  '(' [2753;2754] 
WhiteSpace   [2754;2755] 
Identifier  'this' [2755;2759] 
Comma  ',' [2759;2760] 
WhiteSpace   [2760;2761] 
Function  'function' [2761;2769] 
OpenBrace  '(' [2769;2770] 
WhiteSpace   [2770;2771] 
Identifier  '_elem' [2771;2776] 
Comma  ',' [2776;2777] 
WhiteSpace   [2777;2778] 
Identifier  'i' [2778;2779] 
WhiteSpace   [2779;2780] 
CloseBrace  ')' [2780;2781] 
WhiteSpace   [2781;2782] 
OpeningCurlyBrace  '{' [2782;2783] 
Return  'return' [2783;2789] 
WhiteSpace   [2789;2790] 
Identifier  'i' [2790;2791] 
WhiteSpace   [2791;2792] 
Module  '%' [2792;2793] 
WhiteSpace   [2793;2794] 
IntConstant  '2' [2794;2795] 
Semicolon  ';' [2795;2796] 
ClosingCurlyBrace  '}' [2796;2797] 
WhiteSpace   [2797;2798] 
CloseBrace  ')' [2798;2799] 
WhiteSpace   [2799;2800] 
CloseBrace  ')' [2800;2801] 
Semicolon  ';' [2801;2802] 
ClosingCurlyBrace  '}' [2802;2803] 
Comma  ',' [2803;2804] 
Identifier  'eq' [2804;2806] 
ElseTernary  ':' [2806;2807] 
WhiteSpace   [2807;2808] 
Function  'function' [2808;2816] 
OpenBrace  '(' [2816;2817] 
WhiteSpace   [2817;2818] 
Identifier  'i' [2818;2819] 
WhiteSpace   [2819;2820] 
CloseBrace  ')' [2820;2821] 
WhiteSpace   [2821;2822] 
OpeningCurlyBrace  '{' [2822;2823] 
Var  'var' [2823;2826] 
WhiteSpace   [2826;2827] 
Identifier  'len' [2827;2830] 
WhiteSpace   [2830;2831] 
Equal  '=' [2831;2832] 
WhiteSpace   [2832;2833] 
Identifier  'this' [2833;2837] 
Point  '.' [2837;2838] 
Identifier  'length' [2838;2844] 
Comma  ',' [2844;2845] 
Identifier  'j' [2845;2846] 
WhiteSpace   [2846;2847] 
Equal  '=' [2847;2848] 
WhiteSpace   [2848;2849] 
Plus  '+' [2849;2850] 
Identifier  'i' [2850;2851] 
WhiteSpace   [2851;2852] 
Plus  '+' [2852;2853] 
WhiteSpace   [2853;2854] 
OpenBrace  '(' [2854;2855] 
WhiteSpace   [2855;2856] 
Identifier  'i' [2856;2857] 
WhiteSpace   [2857;2858] 
Less  '<' [2858;2859] 
WhiteSpace   [2859;2860] 
IntConstant  '0' [2860;2861] 
WhiteSpace   [2861;2862] 
IfTernary  '?' [2862;2863] 
WhiteSpace   [2863;2864] 
Identifier  'len' [2864;2867] 
WhiteSpace   [2867;2868] 
ElseTernary  ':' [2868;2869] 
WhiteSpace   [2869;2870] 
IntConstant  '0' [2870;2871] 
WhiteSpace   [2871;2872] 
CloseBrace  ')' [2872;2873] 
Semicolon  ';' [2873;2874] 
Return  'return' [2874;2880] 
WhiteSpace   [2880;2881] 
Identifier  'this' [2881;2885] 
Point  '.' [2885;2886] 
Identifier  'pushStack' [2886;2895] 
OpenBrace  '(' [2895;2896] 
WhiteSpace   [2896;2897] 
Identifier  'j' [2897;2898] 
WhiteSpace   [2898;2899] 
Greater  '>' [2899;2900] 
Equal  '=' [2900;2901] 
WhiteSpace   [2901;2902] 
IntConstant  '0' [2902;2903] 
WhiteSpace   [2903;2904] 
And  '&&' [2904;2906] 
WhiteSpace   [2906;2907] 
Identifier  'j' [2907;2908] 
WhiteSpace   [2908;2909] 
Less  '<' [2909;2910] 
WhiteSpace   [2910;2911] 
Identifier  'len' [2911;2914] 
WhiteSpace   [2914;2915] 
IfTernary  '?' [2915;2916] 
WhiteSpace   [2916;2917] 
InitArray  '[' [2917;2918] 
WhiteSpace   [2918;2919] 
Identifier  'this' [2919;2923] 
InitArray  '[' [2923;2924] 
WhiteSpace   [2924;2925] 
Identifier  'j' [2925;2926] 
WhiteSpace   [2926;2927] 
FinalArray  ']' [2927;2928] 
WhiteSpace   [2928;2929] 
FinalArray  ']' [2929;2930] 
WhiteSpace   [2930;2931] 
ElseTernary  ':' [2931;2932] 
WhiteSpace   [2932;2933] 
InitArray  '[' [2933;2934] 
FinalArray  ']' [2934;2935] 
WhiteSpace   [2935;2936] 
CloseBrace  ')' [2936;2937] 
Semicolon  ';' [2937;2938] 
ClosingCurlyBrace  '}' [2938;2939] 
Comma  ',' [2939;2940] 
Identifier  'end' [2940;2943] 
ElseTernary  ':' [2943;2944] 
WhiteSpace   [2944;2945] 
Function  'function' [2945;2953] 
OpenBrace  '(' [2953;2954] 
CloseBrace  ')' [2954;2955] 
WhiteSpace   [2955;2956] 
OpeningCurlyBrace  '{' [2956;2957] 
Return  'return' [2957;2963] 
WhiteSpace   [2963;2964] 
Identifier  'this' [2964;2968] 
Point  '.' [2968;2969] 
Identifier  'prevObject' [2969;2979] 
WhiteSpace   [2979;2980] 
Or  '||' [2980;2982] 
WhiteSpace   [2982;2983] 
Identifier  'this' [2983;2987] 
Point  '.' [2987;2988] 
Identifier  'constructor' [2988;2999] 
OpenBrace  '(' [2999;3000] 
CloseBrace  ')' [3000;3001] 
Semicolon  ';' [3001;3002] 
ClosingCurlyBrace  '}' [3002;3003] 
Comma  ',' [3003;3004] 
Identifier  'push' [3004;3008] 
ElseTernary  ':' [3008;3009] 
WhiteSpace   [3009;3010] 
Identifier  'push' [3010;3014] 
Comma  ',' [3014;3015] 
Identifier  'sort' [3015;3019] 
ElseTernary  ':' [3019;3020] 
WhiteSpace   [3020;3021] 
Identifier  'arr' [3021;3024] 
Point  '.' [3024;3025] 
Identifier  'sort' [3025;3029] 
Comma  ',' [3029;3030] 
Identifier  'splice' [3030;3036] 
ElseTernary  ':' [3036;3037] 
WhiteSpace   [3037;3038] 
Identifier  'arr' [3038;3041] 
Point  '.' [3041;3042] 
Identifier  'splice' [3042;3048] 
ClosingCurlyBrace  '}' [3048;3049] 
Semicolon  ';' [3049;3050] 
Identifier  'jQuery' [3050;3056] 
Point  '.' [3056;3057] 
Identifier  'extend' [3057;3063] 
WhiteSpace   [3063;3064] 
Equal  '=' [3064;3065] 
WhiteSpace   [3065;3066] 
Identifier  'jQuery' [3066;3072] 
Point  '.' [3072;3073] 
Identifier  'fn' [3073;3075] 
Point  '.' [3075;3076] 
Identifier  'extend' [3076;3082] 
WhiteSpace   [3082;3083] 
Equal  '=' [3083;3084] 
WhiteSpace   [3084;3085] 
Function  'function' [3085;3093] 
OpenBrace  '(' [3093;3094] 
CloseBrace  ')' [3094;3095] 
WhiteSpace   [3095;3096] 
OpeningCurlyBrace  '{' [3096;3097] 
Var  'var' [3097;3100] 
WhiteSpace   [3100;3101] 
Identifier  'options' [3101;3108] 
Comma  ',' [3108;3109] 
WhiteSpace   [3109;3110] 
Identifier  'name' [3110;3114] 
Comma  ',' [3114;3115] 
WhiteSpace   [3115;3116] 
Identifier  'src' [3116;3119] 
Comma  ',' [3119;3120] 
WhiteSpace   [3120;3121] 
Identifier  'copy' [3121;3125] 
Comma  ',' [3125;3126] 
WhiteSpace   [3126;3127] 
Identifier  'copyIsArray' [3127;3138] 
Comma  ',' [3138;3139] 
WhiteSpace   [3139;3140] 
Identifier  'clone' [3140;3145] 
Comma  ',' [3145;3146] 
Identifier  'target' [3146;3152] 
WhiteSpace   [3152;3153] 
Equal  '=' [3153;3154] 
WhiteSpace   [3154;3155] 
Identifier  'arguments' [3155;3164] 
InitArray  '[' [3164;3165] 
WhiteSpace   [3165;3166] 
IntConstant  '0' [3166;3167] 
WhiteSpace   [3167;3168] 
FinalArray  ']' [3168;3169] 
WhiteSpace   [3169;3170] 
Or  '||' [3170;3172] 
WhiteSpace   [3172;3173] 
OpeningCurlyBrace  '{' [3173;3174] 
ClosingCurlyBrace  '}' [3174;3175] 
Comma  ',' [3175;3176] 
Identifier  'i' [3176;3177] 
WhiteSpace   [3177;3178] 
Equal  '=' [3178;3179] 
WhiteSpace   [3179;3180] 
IntConstant  '1' [3180;3181] 
Comma  ',' [3181;3182] 
Identifier  'length' [3182;3188] 
WhiteSpace   [3188;3189] 
Equal  '=' [3189;3190] 
WhiteSpace   [3190;3191] 
Identifier  'arguments' [3191;3200] 
Point  '.' [3200;3201] 
Identifier  'length' [3201;3207] 
Comma  ',' [3207;3208] 
Identifier  'deep' [3208;3212] 
WhiteSpace   [3212;3213] 
Equal  '=' [3213;3214] 
WhiteSpace   [3214;3215] 
False  'false' [3215;3220] 
Semicolon  ';' [3220;3221] 
If  'if' [3221;3223] 
WhiteSpace   [3223;3224] 
OpenBrace  '(' [3224;3225] 
WhiteSpace   [3225;3226] 
Identifier  'typeof' [3226;3232] 
WhiteSpace   [3232;3233] 
Identifier  'target' [3233;3239] 
WhiteSpace   [3239;3240] 
EqualEqual  '==' [3240;3242] 
Equal  '=' [3242;3243] 
WhiteSpace   [3243;3244] 
String  '"boolean"' [3244;3253] 
WhiteSpace   [3253;3254] 
CloseBrace  ')' [3254;3255] 
WhiteSpace   [3255;3256] 
OpeningCurlyBrace  '{' [3256;3257] 
Identifier  'deep' [3257;3261] 
WhiteSpace   [3261;3262] 
Equal  '=' [3262;3263] 
WhiteSpace   [3263;3264] 
Identifier  'target' [3264;3270] 
Semicolon  ';' [3270;3271] 
Identifier  'target' [3271;3277] 
WhiteSpace   [3277;3278] 
Equal  '=' [3278;3279] 
WhiteSpace   [3279;3280] 
Identifier  'arguments' [3280;3289] 
InitArray  '[' [3289;3290] 
WhiteSpace   [3290;3291] 
Identifier  'i' [3291;3292] 
WhiteSpace   [3292;3293] 
FinalArray  ']' [3293;3294] 
WhiteSpace   [3294;3295] 
Or  '||' [3295;3297] 
WhiteSpace   [3297;3298] 
OpeningCurlyBrace  '{' [3298;3299] 
ClosingCurlyBrace  '}' [3299;3300] 
Semicolon  ';' [3300;3301] 
Identifier  'i' [3301;3302] 
Plus  '+' [3302;3303] 
Plus  '+' [3303;3304] 
Semicolon  ';' [3304;3305] 
ClosingCurlyBrace  '}' [3305;3306] 
If  'if' [3306;3308] 
WhiteSpace   [3308;3309] 
OpenBrace  '(' [3309;3310] 
WhiteSpace   [3310;3311] 
Identifier  'typeof' [3311;3317] 
WhiteSpace   [3317;3318] 
Identifier  'target' [3318;3324] 
WhiteSpace   [3324;3325] 
ExclameEqual  '!=' [3325;3327] 
Equal  '=' [3327;3328] 
WhiteSpace   [3328;3329] 
String  '"object"' [3329;3337] 
WhiteSpace   [3337;3338] 
And  '&&' [3338;3340] 
WhiteSpace   [3340;3341] 
FalseAbrev  '!' [3341;3342] 
Identifier  'isFunction' [3342;3352] 
OpenBrace  '(' [3352;3353] 
WhiteSpace   [3353;3354] 
Identifier  'target' [3354;3360] 
WhiteSpace   [3360;3361] 
CloseBrace  ')' [3361;3362] 
WhiteSpace   [3362;3363] 
CloseBrace  ')' [3363;3364] 
WhiteSpace   [3364;3365] 
OpeningCurlyBrace  '{' [3365;3366] 
Identifier  'target' [3366;3372] 
WhiteSpace   [3372;3373] 
Equal  '=' [3373;3374] 
WhiteSpace   [3374;3375] 
OpeningCurlyBrace  '{' [3375;3376] 
ClosingCurlyBrace  '}' [3376;3377] 
Semicolon  ';' [3377;3378] 
ClosingCurlyBrace  '}' [3378;3379] 
If  'if' [3379;3381] 
WhiteSpace   [3381;3382] 
OpenBrace  '(' [3382;3383] 
WhiteSpace   [3383;3384] 
Identifier  'i' [3384;3385] 
WhiteSpace   [3385;3386] 
EqualEqual  '==' [3386;3388] 
Equal  '=' [3388;3389] 
WhiteSpace   [3389;3390] 
Identifier  'length' [3390;3396] 
WhiteSpace   [3396;3397] 
CloseBrace  ')' [3397;3398] 
WhiteSpace   [3398;3399] 
OpeningCurlyBrace  '{' [3399;3400] 
Identifier  'target' [3400;3406] 
WhiteSpace   [3406;3407] 
Equal  '=' [3407;3408] 
WhiteSpace   [3408;3409] 
Identifier  'this' [3409;3413] 
Semicolon  ';' [3413;3414] 
Identifier  'i' [3414;3415] 
Minus  '-' [3415;3416] 
Minus  '-' [3416;3417] 
Semicolon  ';' [3417;3418] 
ClosingCurlyBrace  '}' [3418;3419] 
Identifier  'for' [3419;3422] 
WhiteSpace   [3422;3423] 
OpenBrace  '(' [3423;3424] 
WhiteSpace   [3424;3425] 
Semicolon  ';' [3425;3426] 
WhiteSpace   [3426;3427] 
Identifier  'i' [3427;3428] 
WhiteSpace   [3428;3429] 
Less  '<' [3429;3430] 
WhiteSpace   [3430;3431] 
Identifier  'length' [3431;3437] 
Semicolon  ';' [3437;3438] 
WhiteSpace   [3438;3439] 
Identifier  'i' [3439;3440] 
Plus  '+' [3440;3441] 
Plus  '+' [3441;3442] 
WhiteSpace   [3442;3443] 
CloseBrace  ')' [3443;3444] 
WhiteSpace   [3444;3445] 
OpeningCurlyBrace  '{' [3445;3446] 
If  'if' [3446;3448] 
WhiteSpace   [3448;3449] 
OpenBrace  '(' [3449;3450] 
WhiteSpace   [3450;3451] 
OpenBrace  '(' [3451;3452] 
WhiteSpace   [3452;3453] 
Identifier  'options' [3453;3460] 
WhiteSpace   [3460;3461] 
Equal  '=' [3461;3462] 
WhiteSpace   [3462;3463] 
Identifier  'arguments' [3463;3472] 
InitArray  '[' [3472;3473] 
WhiteSpace   [3473;3474] 
Identifier  'i' [3474;3475] 
WhiteSpace   [3475;3476] 
FinalArray  ']' [3476;3477] 
WhiteSpace   [3477;3478] 
CloseBrace  ')' [3478;3479] 
WhiteSpace   [3479;3480] 
ExclameEqual  '!=' [3480;3482] 
WhiteSpace   [3482;3483] 
Null  'null' [3483;3487] 
WhiteSpace   [3487;3488] 
CloseBrace  ')' [3488;3489] 
WhiteSpace   [3489;3490] 
OpeningCurlyBrace  '{' [3490;3491] 
Identifier  'for' [3491;3494] 
WhiteSpace   [3494;3495] 
OpenBrace  '(' [3495;3496] 
WhiteSpace   [3496;3497] 
Identifier  'name' [3497;3501] 
WhiteSpace   [3501;3502] 
Identifier  'in' [3502;3504] 
WhiteSpace   [3504;3505] 
Identifier  'options' [3505;3512] 
WhiteSpace   [3512;3513] 
CloseBrace  ')' [3513;3514] 
WhiteSpace   [3514;3515] 
OpeningCurlyBrace  '{' [3515;3516] 
Identifier  'copy' [3516;3520] 
WhiteSpace   [3520;3521] 
Equal  '=' [3521;3522] 
WhiteSpace   [3522;3523] 
Identifier  'options' [3523;3530] 
InitArray  '[' [3530;3531] 
WhiteSpace   [3531;3532] 
Identifier  'name' [3532;3536] 
WhiteSpace   [3536;3537] 
FinalArray  ']' [3537;3538] 
Semicolon  ';' [3538;3539] 
If  'if' [3539;3541] 
WhiteSpace   [3541;3542] 
OpenBrace  '(' [3542;3543] 
WhiteSpace   [3543;3544] 
Identifier  'name' [3544;3548] 
WhiteSpace   [3548;3549] 
EqualEqual  '==' [3549;3551] 
Equal  '=' [3551;3552] 
WhiteSpace   [3552;3553] 
String  '"__proto__"' [3553;3564] 
WhiteSpace   [3564;3565] 
Or  '||' [3565;3567] 
WhiteSpace   [3567;3568] 
Identifier  'target' [3568;3574] 
WhiteSpace   [3574;3575] 
EqualEqual  '==' [3575;3577] 
Equal  '=' [3577;3578] 
WhiteSpace   [3578;3579] 
Identifier  'copy' [3579;3583] 
WhiteSpace   [3583;3584] 
CloseBrace  ')' [3584;3585] 
WhiteSpace   [3585;3586] 
OpeningCurlyBrace  '{' [3586;3587] 
Identifier  'continue' [3587;3595] 
Semicolon  ';' [3595;3596] 
ClosingCurlyBrace  '}' [3596;3597] 
If  'if' [3597;3599] 
WhiteSpace   [3599;3600] 
OpenBrace  '(' [3600;3601] 
WhiteSpace   [3601;3602] 
Identifier  'deep' [3602;3606] 
WhiteSpace   [3606;3607] 
And  '&&' [3607;3609] 
WhiteSpace   [3609;3610] 
Identifier  'copy' [3610;3614] 
WhiteSpace   [3614;3615] 
And  '&&' [3615;3617] 
WhiteSpace   [3617;3618] 
OpenBrace  '(' [3618;3619] 
WhiteSpace   [3619;3620] 
Identifier  'jQuery' [3620;3626] 
Point  '.' [3626;3627] 
Identifier  'isPlainObject' [3627;3640] 
OpenBrace  '(' [3640;3641] 
WhiteSpace   [3641;3642] 
Identifier  'copy' [3642;3646] 
WhiteSpace   [3646;3647] 
CloseBrace  ')' [3647;3648] 
WhiteSpace   [3648;3649] 
Or  '||' [3649;3651] 
OpenBrace  '(' [3651;3652] 
WhiteSpace   [3652;3653] 
Identifier  'copyIsArray' [3653;3664] 
WhiteSpace   [3664;3665] 
Equal  '=' [3665;3666] 
WhiteSpace   [3666;3667] 
Identifier  'Array' [3667;3672] 
Point  '.' [3672;3673] 
Identifier  'isArray' [3673;3680] 
OpenBrace  '(' [3680;3681] 
WhiteSpace   [3681;3682] 
Identifier  'copy' [3682;3686] 
WhiteSpace   [3686;3687] 
CloseBrace  ')' [3687;3688] 
WhiteSpace   [3688;3689] 
CloseBrace  ')' [3689;3690] 
WhiteSpace   [3690;3691] 
CloseBrace  ')' [3691;3692] 
WhiteSpace   [3692;3693] 
CloseBrace  ')' [3693;3694] 
WhiteSpace   [3694;3695] 
OpeningCurlyBrace  '{' [3695;3696] 
Identifier  'src' [3696;3699] 
WhiteSpace   [3699;3700] 
Equal  '=' [3700;3701] 
WhiteSpace   [3701;3702] 
Identifier  'target' [3702;3708] 
InitArray  '[' [3708;3709] 
WhiteSpace   [3709;3710] 
Identifier  'name' [3710;3714] 
WhiteSpace   [3714;3715] 
FinalArray  ']' [3715;3716] 
Semicolon  ';' [3716;3717] 
If  'if' [3717;3719] 
WhiteSpace   [3719;3720] 
OpenBrace  '(' [3720;3721] 
WhiteSpace   [3721;3722] 
Identifier  'copyIsArray' [3722;3733] 
WhiteSpace   [3733;3734] 
And  '&&' [3734;3736] 
WhiteSpace   [3736;3737] 
FalseAbrev  '!' [3737;3738] 
Identifier  'Array' [3738;3743] 
Point  '.' [3743;3744] 
Identifier  'isArray' [3744;3751] 
OpenBrace  '(' [3751;3752] 
WhiteSpace   [3752;3753] 
Identifier  'src' [3753;3756] 
WhiteSpace   [3756;3757] 
CloseBrace  ')' [3757;3758] 
WhiteSpace   [3758;3759] 
CloseBrace  ')' [3759;3760] 
WhiteSpace   [3760;3761] 
OpeningCurlyBrace  '{' [3761;3762] 
Identifier  'clone' [3762;3767] 
WhiteSpace   [3767;3768] 
Equal  '=' [3768;3769] 
WhiteSpace   [3769;3770] 
InitArray  '[' [3770;3771] 
FinalArray  ']' [3771;3772] 
Semicolon  ';' [3772;3773] 
ClosingCurlyBrace  '}' [3773;3774] 
WhiteSpace   [3774;3775] 
Else  'else' [3775;3779] 
WhiteSpace   [3779;3780] 
If  'if' [3780;3782] 
WhiteSpace   [3782;3783] 
OpenBrace  '(' [3783;3784] 
WhiteSpace   [3784;3785] 
FalseAbrev  '!' [3785;3786] 
Identifier  'copyIsArray' [3786;3797] 
WhiteSpace   [3797;3798] 
And  '&&' [3798;3800] 
WhiteSpace   [3800;3801] 
FalseAbrev  '!' [3801;3802] 
Identifier  'jQuery' [3802;3808] 
Point  '.' [3808;3809] 
Identifier  'isPlainObject' [3809;3822] 
OpenBrace  '(' [3822;3823] 
WhiteSpace   [3823;3824] 
Identifier  'src' [3824;3827] 
WhiteSpace   [3827;3828] 
CloseBrace  ')' [3828;3829] 
WhiteSpace   [3829;3830] 
CloseBrace  ')' [3830;3831] 
WhiteSpace   [3831;3832] 
OpeningCurlyBrace  '{' [3832;3833] 
Identifier  'clone' [3833;3838] 
WhiteSpace   [3838;3839] 
Equal  '=' [3839;3840] 
WhiteSpace   [3840;3841] 
OpeningCurlyBrace  '{' [3841;3842] 
ClosingCurlyBrace  '}' [3842;3843] 
Semicolon  ';' [3843;3844] 
ClosingCurlyBrace  '}' [3844;3845] 
WhiteSpace   [3845;3846] 
Else  'else' [3846;3850] 
WhiteSpace   [3850;3851] 
OpeningCurlyBrace  '{' [3851;3852] 
Identifier  'clone' [3852;3857] 
WhiteSpace   [3857;3858] 
Equal  '=' [3858;3859] 
WhiteSpace   [3859;3860] 
Identifier  'src' [3860;3863] 
Semicolon  ';' [3863;3864] 
ClosingCurlyBrace  '}' [3864;3865] 
Identifier  'copyIsArray' [3865;3876] 
WhiteSpace   [3876;3877] 
Equal  '=' [3877;3878] 
WhiteSpace   [3878;3879] 
False  'false' [3879;3884] 
Semicolon  ';' [3884;3885] 
Identifier  'target' [3885;3891] 
InitArray  '[' [3891;3892] 
WhiteSpace   [3892;3893] 
Identifier  'name' [3893;3897] 
WhiteSpace   [3897;3898] 
FinalArray  ']' [3898;3899] 
WhiteSpace   [3899;3900] 
Equal  '=' [3900;3901] 
WhiteSpace   [3901;3902] 
Identifier  'jQuery' [3902;3908] 
Point  '.' [3908;3909] 
Identifier  'extend' [3909;3915] 
OpenBrace  '(' [3915;3916] 
WhiteSpace   [3916;3917] 
Identifier  'deep' [3917;3921] 
Comma  ',' [3921;3922] 
WhiteSpace   [3922;3923] 
Identifier  'clone' [3923;3928] 
Comma  ',' [3928;3929] 
WhiteSpace   [3929;3930] 
Identifier  'copy' [3930;3934] 
WhiteSpace   [3934;3935] 
CloseBrace  ')' [3935;3936] 
Semicolon  ';' [3936;3937] 
ClosingCurlyBrace  '}' [3937;3938] 
WhiteSpace   [3938;3939] 
Else  'else' [3939;3943] 
WhiteSpace   [3943;3944] 
If  'if' [3944;3946] 
WhiteSpace   [3946;3947] 
OpenBrace  '(' [3947;3948] 
WhiteSpace   [3948;3949] 
Identifier  'copy' [3949;3953] 
WhiteSpace   [3953;3954] 
ExclameEqual  '!=' [3954;3956] 
Equal  '=' [3956;3957] 
WhiteSpace   [3957;3958] 
Undefined  'undefined' [3958;3967] 
WhiteSpace   [3967;3968] 
CloseBrace  ')' [3968;3969] 
WhiteSpace   [3969;3970] 
OpeningCurlyBrace  '{' [3970;3971] 
Identifier  'target' [3971;3977] 
InitArray  '[' [3977;3978] 
WhiteSpace   [3978;3979] 
Identifier  'name' [3979;3983] 
WhiteSpace   [3983;3984] 
FinalArray  ']' [3984;3985] 
WhiteSpace   [3985;3986] 
Equal  '=' [3986;3987] 
WhiteSpace   [3987;3988] 
Identifier  'copy' [3988;3992] 
Semicolon  ';' [3992;3993] 
ClosingCurlyBrace  '}' [3993;3994] 
ClosingCurlyBrace  '}' [3994;3995] 
ClosingCurlyBrace  '}' [3995;3996] 
ClosingCurlyBrace  '}' [3996;3997] 
Return  'return' [3997;4003] 
WhiteSpace   [4003;4004] 
Identifier  'target' [4004;4010] 
Semicolon  ';' [4010;4011] 
ClosingCurlyBrace  '}' [4011;4012] 
Semicolon  ';' [4012;4013] 
Identifier  'jQuery' [4013;4019] 
Point  '.' [4019;4020] 
Identifier  'extend' [4020;4026] 
OpenBrace  '(' [4026;4027] 
WhiteSpace   [4027;4028] 
OpeningCurlyBrace  '{' [4028;4029] 
Identifier  'expando' [4029;4036] 
ElseTernary  ':' [4036;4037] 
WhiteSpace   [4037;4038] 
String  '"jQuery"' [4038;4046] 
WhiteSpace   [4046;4047] 
Plus  '+' [4047;4048] 
WhiteSpace   [4048;4049] 
OpenBrace  '(' [4049;4050] 
WhiteSpace   [4050;4051] 
Identifier  'version' [4051;4058] 
WhiteSpace   [4058;4059] 
Plus  '+' [4059;4060] 
WhiteSpace   [4060;4061] 
Identifier  'Math' [4061;4065] 
Point  '.' [4065;4066] 
Identifier  'random' [4066;4072] 
OpenBrace  '(' [4072;4073] 
CloseBrace  ')' [4073;4074] 
WhiteSpace   [4074;4075] 
CloseBrace  ')' [4075;4076] 
Point  '.' [4076;4077] 
Identifier  'replace' [4077;4084] 
OpenBrace  '(' [4084;4085] 
WhiteSpace   [4085;4086] 
Divide  '/' [4086;4087] 
Identifier  'D' [4088;4089] 
Divide  '/' [4089;4090] 
Identifier  'g' [4090;4091] 
Comma  ',' [4091;4092] 
WhiteSpace   [4092;4093] 
String  '""' [4093;4095] 
WhiteSpace   [4095;4096] 
CloseBrace  ')' [4096;4097] 
Comma  ',' [4097;4098] 
Identifier  'isReady' [4098;4105] 
ElseTernary  ':' [4105;4106] 
WhiteSpace   [4106;4107] 
True  'true' [4107;4111] 
Comma  ',' [4111;4112] 
Identifier  'error' [4112;4117] 
ElseTernary  ':' [4117;4118] 
WhiteSpace   [4118;4119] 
Function  'function' [4119;4127] 
OpenBrace  '(' [4127;4128] 
WhiteSpace   [4128;4129] 
Identifier  'msg' [4129;4132] 
WhiteSpace   [4132;4133] 
CloseBrace  ')' [4133;4134] 
WhiteSpace   [4134;4135] 
OpeningCurlyBrace  '{' [4135;4136] 
Identifier  'throw' [4136;4141] 
WhiteSpace   [4141;4142] 
New  'new' [4142;4145] 
WhiteSpace   [4145;4146] 
Identifier  'Error' [4146;4151] 
OpenBrace  '(' [4151;4152] 
WhiteSpace   [4152;4153] 
Identifier  'msg' [4153;4156] 
WhiteSpace   [4156;4157] 
CloseBrace  ')' [4157;4158] 
Semicolon  ';' [4158;4159] 
ClosingCurlyBrace  '}' [4159;4160] 
Comma  ',' [4160;4161] 
Identifier  'noop' [4161;4165] 
ElseTernary  ':' [4165;4166] 
WhiteSpace   [4166;4167] 
Function  'function' [4167;4175] 
OpenBrace  '(' [4175;4176] 
CloseBrace  ')' [4176;4177] 
WhiteSpace   [4177;4178] 
OpeningCurlyBrace  '{' [4178;4179] 
ClosingCurlyBrace  '}' [4179;4180] 
Comma  ',' [4180;4181] 
Identifier  'isPlainObject' [4181;4194] 
ElseTernary  ':' [4194;4195] 
WhiteSpace   [4195;4196] 
Function  'function' [4196;4204] 
OpenBrace  '(' [4204;4205] 
WhiteSpace   [4205;4206] 
Identifier  'obj' [4206;4209] 
WhiteSpace   [4209;4210] 
CloseBrace  ')' [4210;4211] 
WhiteSpace   [4211;4212] 
OpeningCurlyBrace  '{' [4212;4213] 
Var  'var' [4213;4216] 
WhiteSpace   [4216;4217] 
Identifier  'proto' [4217;4222] 
Comma  ',' [4222;4223] 
WhiteSpace   [4223;4224] 
Identifier  'Ctor' [4224;4228] 
Semicolon  ';' [4228;4229] 
If  'if' [4229;4231] 
WhiteSpace   [4231;4232] 
OpenBrace  '(' [4232;4233] 
WhiteSpace   [4233;4234] 
FalseAbrev  '!' [4234;4235] 
Identifier  'obj' [4235;4238] 
WhiteSpace   [4238;4239] 
Or  '||' [4239;4241] 
WhiteSpace   [4241;4242] 
Identifier  'toString' [4242;4250] 
Point  '.' [4250;4251] 
Identifier  'call' [4251;4255] 
OpenBrace  '(' [4255;4256] 
WhiteSpace   [4256;4257] 
Identifier  'obj' [4257;4260] 
WhiteSpace   [4260;4261] 
CloseBrace  ')' [4261;4262] 
WhiteSpace   [4262;4263] 
ExclameEqual  '!=' [4263;4265] 
Equal  '=' [4265;4266] 
WhiteSpace   [4266;4267] 
String  '"[object Object]"' [4267;4284] 
WhiteSpace   [4284;4285] 
CloseBrace  ')' [4285;4286] 
WhiteSpace   [4286;4287] 
OpeningCurlyBrace  '{' [4287;4288] 
Return  'return' [4288;4294] 
WhiteSpace   [4294;4295] 
False  'false' [4295;4300] 
Semicolon  ';' [4300;4301] 
ClosingCurlyBrace  '}' [4301;4302] 
Identifier  'proto' [4302;4307] 
WhiteSpace   [4307;4308] 
Equal  '=' [4308;4309] 
WhiteSpace   [4309;4310] 
Identifier  'getProto' [4310;4318] 
OpenBrace  '(' [4318;4319] 
WhiteSpace   [4319;4320] 
Identifier  'obj' [4320;4323] 
WhiteSpace   [4323;4324] 
CloseBrace  ')' [4324;4325] 
Semicolon  ';' [4325;4326] 
If  'if' [4326;4328] 
WhiteSpace   [4328;4329] 
OpenBrace  '(' [4329;4330] 
WhiteSpace   [4330;4331] 
FalseAbrev  '!' [4331;4332] 
Identifier  'proto' [4332;4337] 
WhiteSpace   [4337;4338] 
CloseBrace  ')' [4338;4339] 
WhiteSpace   [4339;4340] 
OpeningCurlyBrace  '{' [4340;4341] 
Return  'return' [4341;4347] 
WhiteSpace   [4347;4348] 
True  'true' [4348;4352] 
Semicolon  ';' [4352;4353] 
ClosingCurlyBrace  '}' [4353;4354] 
Identifier  'Ctor' [4354;4358] 
WhiteSpace   [4358;4359] 
Equal  '=' [4359;4360] 
WhiteSpace   [4360;4361] 
Identifier  'hasOwn' [4361;4367] 
Point  '.' [4367;4368] 
Identifier  'call' [4368;4372] 
OpenBrace  '(' [4372;4373] 
WhiteSpace   [4373;4374] 
Identifier  'proto' [4374;4379] 
Comma  ',' [4379;4380] 
WhiteSpace   [4380;4381] 
String  '"constructor"' [4381;4394] 
WhiteSpace   [4394;4395] 
CloseBrace  ')' [4395;4396] 
WhiteSpace   [4396;4397] 
And  '&&' [4397;4399] 
WhiteSpace   [4399;4400] 
Identifier  'proto' [4400;4405] 
Point  '.' [4405;4406] 
Identifier  'constructor' [4406;4417] 
Semicolon  ';' [4417;4418] 
Return  'return' [4418;4424] 
WhiteSpace   [4424;4425] 
Identifier  'typeof' [4425;4431] 
WhiteSpace   [4431;4432] 
Identifier  'Ctor' [4432;4436] 
WhiteSpace   [4436;4437] 
EqualEqual  '==' [4437;4439] 
Equal  '=' [4439;4440] 
WhiteSpace   [4440;4441] 
String  '"function"' [4441;4451] 
WhiteSpace   [4451;4452] 
And  '&&' [4452;4454] 
WhiteSpace   [4454;4455] 
Identifier  'fnToString' [4455;4465] 
Point  '.' [4465;4466] 
Identifier  'call' [4466;4470] 
OpenBrace  '(' [4470;4471] 
WhiteSpace   [4471;4472] 
Identifier  'Ctor' [4472;4476] 
WhiteSpace   [4476;4477] 
CloseBrace  ')' [4477;4478] 
WhiteSpace   [4478;4479] 
EqualEqual  '==' [4479;4481] 
Equal  '=' [4481;4482] 
WhiteSpace   [4482;4483] 
Identifier  'ObjectFunctionString' [4483;4503] 
Semicolon  ';' [4503;4504] 
ClosingCurlyBrace  '}' [4504;4505] 
Comma  ',' [4505;4506] 
Identifier  'isEmptyObject' [4506;4519] 
ElseTernary  ':' [4519;4520] 
WhiteSpace   [4520;4521] 
Function  'function' [4521;4529] 
OpenBrace  '(' [4529;4530] 
WhiteSpace   [4530;4531] 
Identifier  'obj' [4531;4534] 
WhiteSpace   [4534;4535] 
CloseBrace  ')' [4535;4536] 
WhiteSpace   [4536;4537] 
OpeningCurlyBrace  '{' [4537;4538] 
Var  'var' [4538;4541] 
WhiteSpace   [4541;4542] 
Identifier  'name' [4542;4546] 
Semicolon  ';' [4546;4547] 
Identifier  'for' [4547;4550] 
WhiteSpace   [4550;4551] 
OpenBrace  '(' [4551;4552] 
WhiteSpace   [4552;4553] 
Identifier  'name' [4553;4557] 
WhiteSpace   [4557;4558] 
Identifier  'in' [4558;4560] 
WhiteSpace   [4560;4561] 
Identifier  'obj' [4561;4564] 
WhiteSpace   [4564;4565] 
CloseBrace  ')' [4565;4566] 
WhiteSpace   [4566;4567] 
OpeningCurlyBrace  '{' [4567;4568] 
Return  'return' [4568;4574] 
WhiteSpace   [4574;4575] 
False  'false' [4575;4580] 
Semicolon  ';' [4580;4581] 
ClosingCurlyBrace  '}' [4581;4582] 
Return  'return' [4582;4588] 
WhiteSpace   [4588;4589] 
True  'true' [4589;4593] 
Semicolon  ';' [4593;4594] 
ClosingCurlyBrace  '}' [4594;4595] 
Comma  ',' [4595;4596] 
Identifier  'globalEval' [4596;4606] 
ElseTernary  ':' [4606;4607] 
WhiteSpace   [4607;4608] 
Function  'function' [4608;4616] 
OpenBrace  '(' [4616;4617] 
WhiteSpace   [4617;4618] 
Identifier  'code' [4618;4622] 
Comma  ',' [4622;4623] 
WhiteSpace   [4623;4624] 
Identifier  'options' [4624;4631] 
Comma  ',' [4631;4632] 
WhiteSpace   [4632;4633] 
Identifier  'doc' [4633;4636] 
WhiteSpace   [4636;4637] 
CloseBrace  ')' [4637;4638] 
WhiteSpace   [4638;4639] 
OpeningCurlyBrace  '{' [4639;4640] 
Identifier  'DOMEval' [4640;4647] 
OpenBrace  '(' [4647;4648] 
WhiteSpace   [4648;4649] 
Identifier  'code' [4649;4653] 
Comma  ',' [4653;4654] 
WhiteSpace   [4654;4655] 
OpeningCurlyBrace  '{' [4655;4656] 
WhiteSpace   [4656;4657] 
Identifier  'nonce' [4657;4662] 
ElseTernary  ':' [4662;4663] 
WhiteSpace   [4663;4664] 
Identifier  'options' [4664;4671] 
WhiteSpace   [4671;4672] 
And  '&&' [4672;4674] 
WhiteSpace   [4674;4675] 
Identifier  'options' [4675;4682] 
Point  '.' [4682;4683] 
Identifier  'nonce' [4683;4688] 
WhiteSpace   [4688;4689] 
ClosingCurlyBrace  '}' [4689;4690] 
Comma  ',' [4690;4691] 
WhiteSpace   [4691;4692] 
Identifier  'doc' [4692;4695] 
WhiteSpace   [4695;4696] 
CloseBrace  ')' [4696;4697] 
Semicolon  ';' [4697;4698] 
ClosingCurlyBrace  '}' [4698;4699] 
Comma  ',' [4699;4700] 
Identifier  'each' [4700;4704] 
ElseTernary  ':' [4704;4705] 
WhiteSpace   [4705;4706] 
Function  'function' [4706;4714] 
OpenBrace  '(' [4714;4715] 
WhiteSpace   [4715;4716] 
Identifier  'obj' [4716;4719] 
Comma  ',' [4719;4720] 
WhiteSpace   [4720;4721] 
Identifier  'callback' [4721;4729] 
WhiteSpace   [4729;4730] 
CloseBrace  ')' [4730;4731] 
WhiteSpace   [4731;4732] 
OpeningCurlyBrace  '{' [4732;4733] 
Var  'var' [4733;4736] 
WhiteSpace   [4736;4737] 
Identifier  'length' [4737;4743] 
Comma  ',' [4743;4744] 
WhiteSpace   [4744;4745] 
Identifier  'i' [4745;4746] 
WhiteSpace   [4746;4747] 
Equal  '=' [4747;4748] 
WhiteSpace   [4748;4749] 
IntConstant  '0' [4749;4750] 
Semicolon  ';' [4750;4751] 
If  'if' [4751;4753] 
WhiteSpace   [4753;4754] 
OpenBrace  '(' [4754;4755] 
WhiteSpace   [4755;4756] 
Identifier  'isArrayLike' [4756;4767] 
OpenBrace  '(' [4767;4768] 
WhiteSpace   [4768;4769] 
Identifier  'obj' [4769;4772] 
WhiteSpace   [4772;4773] 
CloseBrace  ')' [4773;4774] 
WhiteSpace   [4774;4775] 
CloseBrace  ')' [4775;4776] 
WhiteSpace   [4776;4777] 
OpeningCurlyBrace  '{' [4777;4778] 
Identifier  'length' [4778;4784] 
WhiteSpace   [4784;4785] 
Equal  '=' [4785;4786] 
WhiteSpace   [4786;4787] 
Identifier  'obj' [4787;4790] 
Point  '.' [4790;4791] 
Identifier  'length' [4791;4797] 
Semicolon  ';' [4797;4798] 
Identifier  'for' [4798;4801] 
WhiteSpace   [4801;4802] 
OpenBrace  '(' [4802;4803] 
WhiteSpace   [4803;4804] 
Semicolon  ';' [4804;4805] 
WhiteSpace   [4805;4806] 
Identifier  'i' [4806;4807] 
WhiteSpace   [4807;4808] 
Less  '<' [4808;4809] 
WhiteSpace   [4809;4810] 
Identifier  'length' [4810;4816] 
Semicolon  ';' [4816;4817] 
WhiteSpace   [4817;4818] 
Identifier  'i' [4818;4819] 
Plus  '+' [4819;4820] 
Plus  '+' [4820;4821] 
WhiteSpace   [4821;4822] 
CloseBrace  ')' [4822;4823] 
WhiteSpace   [4823;4824] 
OpeningCurlyBrace  '{' [4824;4825] 
If  'if' [4825;4827] 
WhiteSpace   [4827;4828] 
OpenBrace  '(' [4828;4829] 
WhiteSpace   [4829;4830] 
Identifier  'callback' [4830;4838] 
Point  '.' [4838;4839] 
Identifier  'call' [4839;4843] 
OpenBrace  '(' [4843;4844] 
WhiteSpace   [4844;4845] 
Identifier  'obj' [4845;4848] 
InitArray  '[' [4848;4849] 
WhiteSpace   [4849;4850] 
Identifier  'i' [4850;4851] 
WhiteSpace   [4851;4852] 
FinalArray  ']' [4852;4853] 
Comma  ',' [4853;4854] 
WhiteSpace   [4854;4855] 
Identifier  'i' [4855;4856] 
Comma  ',' [4856;4857] 
WhiteSpace   [4857;4858] 
Identifier  'obj' [4858;4861] 
InitArray  '[' [4861;4862] 
WhiteSpace   [4862;4863] 
Identifier  'i' [4863;4864] 
WhiteSpace   [4864;4865] 
FinalArray  ']' [4865;4866] 
WhiteSpace   [4866;4867] 
CloseBrace  ')' [4867;4868] 
WhiteSpace   [4868;4869] 
EqualEqual  '==' [4869;4871] 
Equal  '=' [4871;4872] 
WhiteSpace   [4872;4873] 
False  'false' [4873;4878] 
WhiteSpace   [4878;4879] 
CloseBrace  ')' [4879;4880] 
WhiteSpace   [4880;4881] 
OpeningCurlyBrace  '{' [4881;4882] 
Break  'break' [4882;4887] 
Semicolon  ';' [4887;4888] 
ClosingCurlyBrace  '}' [4888;4889] 
ClosingCurlyBrace  '}' [4889;4890] 
ClosingCurlyBrace  '}' [4890;4891] 
WhiteSpace   [4891;4892] 
Else  'else' [4892;4896] 
WhiteSpace   [4896;4897] 
OpeningCurlyBrace  '{' [4897;4898] 
Identifier  'for' [4898;4901] 
WhiteSpace   [4901;4902] 
OpenBrace  '(' [4902;4903] 
WhiteSpace   [4903;4904] 
Identifier  'i' [4904;4905] 
WhiteSpace   [4905;4906] 
Identifier  'in' [4906;4908] 
WhiteSpace   [4908;4909] 
Identifier  'obj' [4909;4912] 
WhiteSpace   [4912;4913] 
CloseBrace  ')' [4913;4914] 
WhiteSpace   [4914;4915] 
OpeningCurlyBrace  '{' [4915;4916] 
If  'if' [4916;4918] 
WhiteSpace   [4918;4919] 
OpenBrace  '(' [4919;4920] 
WhiteSpace   [4920;4921] 
Identifier  'callback' [4921;4929] 
Point  '.' [4929;4930] 
Identifier  'call' [4930;4934] 
OpenBrace  '(' [4934;4935] 
WhiteSpace   [4935;4936] 
Identifier  'obj' [4936;4939] 
InitArray  '[' [4939;4940] 
WhiteSpace   [4940;4941] 
Identifier  'i' [4941;4942] 
WhiteSpace   [4942;4943] 
FinalArray  ']' [4943;4944] 
Comma  ',' [4944;4945] 
WhiteSpace   [4945;4946] 
Identifier  'i' [4946;4947] 
Comma  ',' [4947;4948] 
WhiteSpace   [4948;4949] 
Identifier  'obj' [4949;4952] 
InitArray  '[' [4952;4953] 
WhiteSpace   [4953;4954] 
Identifier  'i' [4954;4955] 
WhiteSpace   [4955;4956] 
FinalArray  ']' [4956;4957] 
WhiteSpace   [4957;4958] 
CloseBrace  ')' [4958;4959] 
WhiteSpace   [4959;4960] 
EqualEqual  '==' [4960;4962] 
Equal  '=' [4962;4963] 
WhiteSpace   [4963;4964] 
False  'false' [4964;4969] 
WhiteSpace   [4969;4970] 
CloseBrace  ')' [4970;4971] 
WhiteSpace   [4971;4972] 
OpeningCurlyBrace  '{' [4972;4973] 
Break  'break' [4973;4978] 
Semicolon  ';' [4978;4979] 
ClosingCurlyBrace  '}' [4979;4980] 
ClosingCurlyBrace  '}' [4980;4981] 
ClosingCurlyBrace  '}' [4981;4982] 
Return  'return' [4982;4988] 
WhiteSpace   [4988;4989] 
Identifier  'obj' [4989;4992] 
Semicolon  ';' [4992;4993] 
ClosingCurlyBrace  '}' [4993;4994] 
Comma  ',' [4994;4995] 
Identifier  'makeArray' [4995;5004] 
ElseTernary  ':' [5004;5005] 
WhiteSpace   [5005;5006] 
Function  'function' [5006;5014] 
OpenBrace  '(' [5014;5015] 
WhiteSpace   [5015;5016] 
Identifier  'arr' [5016;5019] 
Comma  ',' [5019;5020] 
WhiteSpace   [5020;5021] 
Identifier  'results' [5021;5028] 
WhiteSpace   [5028;5029] 
CloseBrace  ')' [5029;5030] 
WhiteSpace   [5030;5031] 
OpeningCurlyBrace  '{' [5031;5032] 
Var  'var' [5032;5035] 
WhiteSpace   [5035;5036] 
Identifier  'ret' [5036;5039] 
WhiteSpace   [5039;5040] 
Equal  '=' [5040;5041] 
WhiteSpace   [5041;5042] 
Identifier  'results' [5042;5049] 
WhiteSpace   [5049;5050] 
Or  '||' [5050;5052] 
WhiteSpace   [5052;5053] 
InitArray  '[' [5053;5054] 
FinalArray  ']' [5054;5055] 
Semicolon  ';' [5055;5056] 
If  'if' [5056;5058] 
WhiteSpace   [5058;5059] 
OpenBrace  '(' [5059;5060] 
WhiteSpace   [5060;5061] 
Identifier  'arr' [5061;5064] 
WhiteSpace   [5064;5065] 
ExclameEqual  '!=' [5065;5067] 
WhiteSpace   [5067;5068] 
Null  'null' [5068;5072] 
WhiteSpace   [5072;5073] 
CloseBrace  ')' [5073;5074] 
WhiteSpace   [5074;5075] 
OpeningCurlyBrace  '{' [5075;5076] 
If  'if' [5076;5078] 
WhiteSpace   [5078;5079] 
OpenBrace  '(' [5079;5080] 
WhiteSpace   [5080;5081] 
Identifier  'isArrayLike' [5081;5092] 
OpenBrace  '(' [5092;5093] 
WhiteSpace   [5093;5094] 
Identifier  'Object' [5094;5100] 
OpenBrace  '(' [5100;5101] 
WhiteSpace   [5101;5102] 
Identifier  'arr' [5102;5105] 
WhiteSpace   [5105;5106] 
CloseBrace  ')' [5106;5107] 
WhiteSpace   [5107;5108] 
CloseBrace  ')' [5108;5109] 
WhiteSpace   [5109;5110] 
CloseBrace  ')' [5110;5111] 
WhiteSpace   [5111;5112] 
OpeningCurlyBrace  '{' [5112;5113] 
Identifier  'jQuery' [5113;5119] 
Point  '.' [5119;5120] 
Identifier  'merge' [5120;5125] 
OpenBrace  '(' [5125;5126] 
WhiteSpace   [5126;5127] 
Identifier  'ret' [5127;5130] 
Comma  ',' [5130;5131] 
Identifier  'typeof' [5131;5137] 
WhiteSpace   [5137;5138] 
Identifier  'arr' [5138;5141] 
WhiteSpace   [5141;5142] 
EqualEqual  '==' [5142;5144] 
Equal  '=' [5144;5145] 
WhiteSpace   [5145;5146] 
String  '"string"' [5146;5154] 
WhiteSpace   [5154;5155] 
IfTernary  '?' [5155;5156] 
InitArray  '[' [5156;5157] 
WhiteSpace   [5157;5158] 
Identifier  'arr' [5158;5161] 
WhiteSpace   [5161;5162] 
FinalArray  ']' [5162;5163] 
WhiteSpace   [5163;5164] 
ElseTernary  ':' [5164;5165] 
WhiteSpace   [5165;5166] 
Identifier  'arr' [5166;5169] 
CloseBrace  ')' [5169;5170] 
Semicolon  ';' [5170;5171] 
ClosingCurlyBrace  '}' [5171;5172] 
WhiteSpace   [5172;5173] 
Else  'else' [5173;5177] 
WhiteSpace   [5177;5178] 
OpeningCurlyBrace  '{' [5178;5179] 
Identifier  'push' [5179;5183] 
Point  '.' [5183;5184] 
Identifier  'call' [5184;5188] 
OpenBrace  '(' [5188;5189] 
WhiteSpace   [5189;5190] 
Identifier  'ret' [5190;5193] 
Comma  ',' [5193;5194] 
WhiteSpace   [5194;5195] 
Identifier  'arr' [5195;5198] 
WhiteSpace   [5198;5199] 
CloseBrace  ')' [5199;5200] 
Semicolon  ';' [5200;5201] 
ClosingCurlyBrace  '}' [5201;5202] 
ClosingCurlyBrace  '}' [5202;5203] 
Return  'return' [5203;5209] 
WhiteSpace   [5209;5210] 
Identifier  'ret' [5210;5213] 
Semicolon  ';' [5213;5214] 
ClosingCurlyBrace  '}' [5214;5215] 
Comma  ',' [5215;5216] 
Identifier  'inArray' [5216;5223] 
ElseTernary  ':' [5223;5224] 
WhiteSpace   [5224;5225] 
Function  'function' [5225;5233] 
OpenBrace  '(' [5233;5234] 
WhiteSpace   [5234;5235] 
Identifier  'elem' [5235;5239] 
Comma  ',' [5239;5240] 
WhiteSpace   [5240;5241] 
Identifier  'arr' [5241;5244] 
Comma  ',' [5244;5245] 
WhiteSpace   [5245;5246] 
Identifier  'i' [5246;5247] 
WhiteSpace   [5247;5248] 
CloseBrace  ')' [5248;5249] 
WhiteSpace   [5249;5250] 
OpeningCurlyBrace  '{' [5250;5251] 
Return  'return' [5251;5257] 
WhiteSpace   [5257;5258] 
Identifier  'arr' [5258;5261] 
WhiteSpace   [5261;5262] 
EqualEqual  '==' [5262;5264] 
WhiteSpace   [5264;5265] 
Null  'null' [5265;5269] 
WhiteSpace   [5269;5270] 
IfTernary  '?' [5270;5271] 
WhiteSpace   [5271;5272] 
Minus  '-' [5272;5273] 
IntConstant  '1' [5273;5274] 
WhiteSpace   [5274;5275] 
ElseTernary  ':' [5275;5276] 
WhiteSpace   [5276;5277] 
Identifier  'indexOf' [5277;5284] 
Point  '.' [5284;5285] 
Identifier  'call' [5285;5289] 
OpenBrace  '(' [5289;5290] 
WhiteSpace   [5290;5291] 
Identifier  'arr' [5291;5294] 
Comma  ',' [5294;5295] 
WhiteSpace   [5295;5296] 
Identifier  'elem' [5296;5300] 
Comma  ',' [5300;5301] 
WhiteSpace   [5301;5302] 
Identifier  'i' [5302;5303] 
WhiteSpace   [5303;5304] 
CloseBrace  ')' [5304;5305] 
Semicolon  ';' [5305;5306] 
ClosingCurlyBrace  '}' [5306;5307] 
Comma  ',' [5307;5308] 
Identifier  'merge' [5308;5313] 
ElseTernary  ':' [5313;5314] 
WhiteSpace   [5314;5315] 
Function  'function' [5315;5323] 
OpenBrace  '(' [5323;5324] 
WhiteSpace   [5324;5325] 
Identifier  'first' [5325;5330] 
Comma  ',' [5330;5331] 
WhiteSpace   [5331;5332] 
Identifier  'second' [5332;5338] 
WhiteSpace   [5338;5339] 
CloseBrace  ')' [5339;5340] 
WhiteSpace   [5340;5341] 
OpeningCurlyBrace  '{' [5341;5342] 
Var  'var' [5342;5345] 
WhiteSpace   [5345;5346] 
Identifier  'len' [5346;5349] 
WhiteSpace   [5349;5350] 
Equal  '=' [5350;5351] 
WhiteSpace   [5351;5352] 
Plus  '+' [5352;5353] 
Identifier  'second' [5353;5359] 
Point  '.' [5359;5360] 
Identifier  'length' [5360;5366] 
Comma  ',' [5366;5367] 
Identifier  'j' [5367;5368] 
WhiteSpace   [5368;5369] 
Equal  '=' [5369;5370] 
WhiteSpace   [5370;5371] 
IntConstant  '0' [5371;5372] 
Comma  ',' [5372;5373] 
Identifier  'i' [5373;5374] 
WhiteSpace   [5374;5375] 
Equal  '=' [5375;5376] 
WhiteSpace   [5376;5377] 
Identifier  'first' [5377;5382] 
Point  '.' [5382;5383] 
Identifier  'length' [5383;5389] 
Semicolon  ';' [5389;5390] 
Identifier  'for' [5390;5393] 
WhiteSpace   [5393;5394] 
OpenBrace  '(' [5394;5395] 
WhiteSpace   [5395;5396] 
Semicolon  ';' [5396;5397] 
WhiteSpace   [5397;5398] 
Identifier  'j' [5398;5399] 
WhiteSpace   [5399;5400] 
Less  '<' [5400;5401] 
WhiteSpace   [5401;5402] 
Identifier  'len' [5402;5405] 
Semicolon  ';' [5405;5406] 
WhiteSpace   [5406;5407] 
Identifier  'j' [5407;5408] 
Plus  '+' [5408;5409] 
Plus  '+' [5409;5410] 
WhiteSpace   [5410;5411] 
CloseBrace  ')' [5411;5412] 
WhiteSpace   [5412;5413] 
OpeningCurlyBrace  '{' [5413;5414] 
Identifier  'first' [5414;5419] 
InitArray  '[' [5419;5420] 
WhiteSpace   [5420;5421] 
Identifier  'i' [5421;5422] 
Plus  '+' [5422;5423] 
Plus  '+' [5423;5424] 
WhiteSpace   [5424;5425] 
FinalArray  ']' [5425;5426] 
WhiteSpace   [5426;5427] 
Equal  '=' [5427;5428] 
WhiteSpace   [5428;5429] 
Identifier  'second' [5429;5435] 
InitArray  '[' [5435;5436] 
WhiteSpace   [5436;5437] 
Identifier  'j' [5437;5438] 
WhiteSpace   [5438;5439] 
FinalArray  ']' [5439;5440] 
Semicolon  ';' [5440;5441] 
ClosingCurlyBrace  '}' [5441;5442] 
Identifier  'first' [5442;5447] 
Point  '.' [5447;5448] 
Identifier  'length' [5448;5454] 
WhiteSpace   [5454;5455] 
Equal  '=' [5455;5456] 
WhiteSpace   [5456;5457] 
Identifier  'i' [5457;5458] 
Semicolon  ';' [5458;5459] 
Return  'return' [5459;5465] 
WhiteSpace   [5465;5466] 
Identifier  'first' [5466;5471] 
Semicolon  ';' [5471;5472] 
ClosingCurlyBrace  '}' [5472;5473] 
Comma  ',' [5473;5474] 
Identifier  'grep' [5474;5478] 
ElseTernary  ':' [5478;5479] 
WhiteSpace   [5479;5480] 
Function  'function' [5480;5488] 
OpenBrace  '(' [5488;5489] 
WhiteSpace   [5489;5490] 
Identifier  'elems' [5490;5495] 
Comma  ',' [5495;5496] 
WhiteSpace   [5496;5497] 
Identifier  'callback' [5497;5505] 
Comma  ',' [5505;5506] 
WhiteSpace   [5506;5507] 
Identifier  'invert' [5507;5513] 
WhiteSpace   [5513;5514] 
CloseBrace  ')' [5514;5515] 
WhiteSpace   [5515;5516] 
OpeningCurlyBrace  '{' [5516;5517] 
Var  'var' [5517;5520] 
WhiteSpace   [5520;5521] 
Identifier  'callbackInverse' [5521;5536] 
Comma  ',' [5536;5537] 
Identifier  'matches' [5537;5544] 
WhiteSpace   [5544;5545] 
Equal  '=' [5545;5546] 
WhiteSpace   [5546;5547] 
InitArray  '[' [5547;5548] 
FinalArray  ']' [5548;5549] 
Comma  ',' [5549;5550] 
Identifier  'i' [5550;5551] 
WhiteSpace   [5551;5552] 
Equal  '=' [5552;5553] 
WhiteSpace   [5553;5554] 
IntConstant  '0' [5554;5555] 
Comma  ',' [5555;5556] 
Identifier  'length' [5556;5562] 
WhiteSpace   [5562;5563] 
Equal  '=' [5563;5564] 
WhiteSpace   [5564;5565] 
Identifier  'elems' [5565;5570] 
Point  '.' [5570;5571] 
Identifier  'length' [5571;5577] 
Comma  ',' [5577;5578] 
Identifier  'callbackExpect' [5578;5592] 
WhiteSpace   [5592;5593] 
Equal  '=' [5593;5594] 
WhiteSpace   [5594;5595] 
FalseAbrev  '!' [5595;5596] 
Identifier  'invert' [5596;5602] 
Semicolon  ';' [5602;5603] 
Identifier  'for' [5603;5606] 
WhiteSpace   [5606;5607] 
OpenBrace  '(' [5607;5608] 
WhiteSpace   [5608;5609] 
Semicolon  ';' [5609;5610] 
WhiteSpace   [5610;5611] 
Identifier  'i' [5611;5612] 
WhiteSpace   [5612;5613] 
Less  '<' [5613;5614] 
WhiteSpace   [5614;5615] 
Identifier  'length' [5615;5621] 
Semicolon  ';' [5621;5622] 
WhiteSpace   [5622;5623] 
Identifier  'i' [5623;5624] 
Plus  '+' [5624;5625] 
Plus  '+' [5625;5626] 
WhiteSpace   [5626;5627] 
CloseBrace  ')' [5627;5628] 
WhiteSpace   [5628;5629] 
OpeningCurlyBrace  '{' [5629;5630] 
Identifier  'callbackInverse' [5630;5645] 
WhiteSpace   [5645;5646] 
Equal  '=' [5646;5647] 
WhiteSpace   [5647;5648] 
FalseAbrev  '!' [5648;5649] 
Identifier  'callback' [5649;5657] 
OpenBrace  '(' [5657;5658] 
WhiteSpace   [5658;5659] 
Identifier  'elems' [5659;5664] 
InitArray  '[' [5664;5665] 
WhiteSpace   [5665;5666] 
Identifier  'i' [5666;5667] 
WhiteSpace   [5667;5668] 
FinalArray  ']' [5668;5669] 
Comma  ',' [5669;5670] 
WhiteSpace   [5670;5671] 
Identifier  'i' [5671;5672] 
WhiteSpace   [5672;5673] 
CloseBrace  ')' [5673;5674] 
Semicolon  ';' [5674;5675] 
If  'if' [5675;5677] 
WhiteSpace   [5677;5678] 
OpenBrace  '(' [5678;5679] 
WhiteSpace   [5679;5680] 
Identifier  'callbackInverse' [5680;5695] 
WhiteSpace   [5695;5696] 
ExclameEqual  '!=' [5696;5698] 
Equal  '=' [5698;5699] 
WhiteSpace   [5699;5700] 
Identifier  'callbackExpect' [5700;5714] 
WhiteSpace   [5714;5715] 
CloseBrace  ')' [5715;5716] 
WhiteSpace   [5716;5717] 
OpeningCurlyBrace  '{' [5717;5718] 
Identifier  'matches' [5718;5725] 
Point  '.' [5725;5726] 
Identifier  'push' [5726;5730] 
OpenBrace  '(' [5730;5731] 
WhiteSpace   [5731;5732] 
Identifier  'elems' [5732;5737] 
InitArray  '[' [5737;5738] 
WhiteSpace   [5738;5739] 
Identifier  'i' [5739;5740] 
WhiteSpace   [5740;5741] 
FinalArray  ']' [5741;5742] 
WhiteSpace   [5742;5743] 
CloseBrace  ')' [5743;5744] 
Semicolon  ';' [5744;5745] 
ClosingCurlyBrace  '}' [5745;5746] 
ClosingCurlyBrace  '}' [5746;5747] 
Return  'return' [5747;5753] 
WhiteSpace   [5753;5754] 
Identifier  'matches' [5754;5761] 
Semicolon  ';' [5761;5762] 
ClosingCurlyBrace  '}' [5762;5763] 
Comma  ',' [5763;5764] 
Identifier  'map' [5764;5767] 
ElseTernary  ':' [5767;5768] 
WhiteSpace   [5768;5769] 
Function  'function' [5769;5777] 
OpenBrace  '(' [5777;5778] 
WhiteSpace   [5778;5779] 
Identifier  'elems' [5779;5784] 
Comma  ',' [5784;5785] 
WhiteSpace   [5785;5786] 
Identifier  'callback' [5786;5794] 
Comma  ',' [5794;5795] 
WhiteSpace   [5795;5796] 
Identifier  'arg' [5796;5799] 
WhiteSpace   [5799;5800] 
CloseBrace  ')' [5800;5801] 
WhiteSpace   [5801;5802] 
OpeningCurlyBrace  '{' [5802;5803] 
Var  'var' [5803;5806] 
WhiteSpace   [5806;5807] 
Identifier  'length' [5807;5813] 
Comma  ',' [5813;5814] 
WhiteSpace   [5814;5815] 
Identifier  'value' [5815;5820] 
Comma  ',' [5820;5821] 
Identifier  'i' [5821;5822] 
WhiteSpace   [5822;5823] 
Equal  '=' [5823;5824] 
WhiteSpace   [5824;5825] 
IntConstant  '0' [5825;5826] 
Comma  ',' [5826;5827] 
Identifier  'ret' [5827;5830] 
WhiteSpace   [5830;5831] 
Equal  '=' [5831;5832] 
WhiteSpace   [5832;5833] 
InitArray  '[' [5833;5834] 
FinalArray  ']' [5834;5835] 
Semicolon  ';' [5835;5836] 
If  'if' [5836;5838] 
WhiteSpace   [5838;5839] 
OpenBrace  '(' [5839;5840] 
WhiteSpace   [5840;5841] 
Identifier  'isArrayLike' [5841;5852] 
OpenBrace  '(' [5852;5853] 
WhiteSpace   [5853;5854] 
Identifier  'elems' [5854;5859] 
WhiteSpace   [5859;5860] 
CloseBrace  ')' [5860;5861] 
WhiteSpace   [5861;5862] 
CloseBrace  ')' [5862;5863] 
WhiteSpace   [5863;5864] 
OpeningCurlyBrace  '{' [5864;5865] 
Identifier  'length' [5865;5871] 
WhiteSpace   [5871;5872] 
Equal  '=' [5872;5873] 
WhiteSpace   [5873;5874] 
Identifier  'elems' [5874;5879] 
Point  '.' [5879;5880] 
Identifier  'length' [5880;5886] 
Semicolon  ';' [5886;5887] 
Identifier  'for' [5887;5890] 
WhiteSpace   [5890;5891] 
OpenBrace  '(' [5891;5892] 
WhiteSpace   [5892;5893] 
Semicolon  ';' [5893;5894] 
WhiteSpace   [5894;5895] 
Identifier  'i' [5895;5896] 
WhiteSpace   [5896;5897] 
Less  '<' [5897;5898] 
WhiteSpace   [5898;5899] 
Identifier  'length' [5899;5905] 
Semicolon  ';' [5905;5906] 
WhiteSpace   [5906;5907] 
Identifier  'i' [5907;5908] 
Plus  '+' [5908;5909] 
Plus  '+' [5909;5910] 
WhiteSpace   [5910;5911] 
CloseBrace  ')' [5911;5912] 
WhiteSpace   [5912;5913] 
OpeningCurlyBrace  '{' [5913;5914] 
Identifier  'value' [5914;5919] 
WhiteSpace   [5919;5920] 
Equal  '=' [5920;5921] 
WhiteSpace   [5921;5922] 
Identifier  'callback' [5922;5930] 
OpenBrace  '(' [5930;5931] 
WhiteSpace   [5931;5932] 
Identifier  'elems' [5932;5937] 
InitArray  '[' [5937;5938] 
WhiteSpace   [5938;5939] 
Identifier  'i' [5939;5940] 
WhiteSpace   [5940;5941] 
FinalArray  ']' [5941;5942] 
Comma  ',' [5942;5943] 
WhiteSpace   [5943;5944] 
Identifier  'i' [5944;5945] 
Comma  ',' [5945;5946] 
WhiteSpace   [5946;5947] 
Identifier  'arg' [5947;5950] 
WhiteSpace   [5950;5951] 
CloseBrace  ')' [5951;5952] 
Semicolon  ';' [5952;5953] 
If  'if' [5953;5955] 
WhiteSpace   [5955;5956] 
OpenBrace  '(' [5956;5957] 
WhiteSpace   [5957;5958] 
Identifier  'value' [5958;5963] 
WhiteSpace   [5963;5964] 
ExclameEqual  '!=' [5964;5966] 
WhiteSpace   [5966;5967] 
Null  'null' [5967;5971] 
WhiteSpace   [5971;5972] 
CloseBrace  ')' [5972;5973] 
WhiteSpace   [5973;5974] 
OpeningCurlyBrace  '{' [5974;5975] 
Identifier  'ret' [5975;5978] 
Point  '.' [5978;5979] 
Identifier  'push' [5979;5983] 
OpenBrace  '(' [5983;5984] 
WhiteSpace   [5984;5985] 
Identifier  'value' [5985;5990] 
WhiteSpace   [5990;5991] 
CloseBrace  ')' [5991;5992] 
Semicolon  ';' [5992;5993] 
ClosingCurlyBrace  '}' [5993;5994] 
ClosingCurlyBrace  '}' [5994;5995] 
ClosingCurlyBrace  '}' [5995;5996] 
WhiteSpace   [5996;5997] 
Else  'else' [5997;6001] 
WhiteSpace   [6001;6002] 
OpeningCurlyBrace  '{' [6002;6003] 
Identifier  'for' [6003;6006] 
WhiteSpace   [6006;6007] 
OpenBrace  '(' [6007;6008] 
WhiteSpace   [6008;6009] 
Identifier  'i' [6009;6010] 
WhiteSpace   [6010;6011] 
Identifier  'in' [6011;6013] 
WhiteSpace   [6013;6014] 
Identifier  'elems' [6014;6019] 
WhiteSpace   [6019;6020] 
CloseBrace  ')' [6020;6021] 
WhiteSpace   [6021;6022] 
OpeningCurlyBrace  '{' [6022;6023] 
Identifier  'value' [6023;6028] 
WhiteSpace   [6028;6029] 
Equal  '=' [6029;6030] 
WhiteSpace   [6030;6031] 
Identifier  'callback' [6031;6039] 
OpenBrace  '(' [6039;6040] 
WhiteSpace   [6040;6041] 
Identifier  'elems' [6041;6046] 
InitArray  '[' [6046;6047] 
WhiteSpace   [6047;6048] 
Identifier  'i' [6048;6049] 
WhiteSpace   [6049;6050] 
FinalArray  ']' [6050;6051] 
Comma  ',' [6051;6052] 
WhiteSpace   [6052;6053] 
Identifier  'i' [6053;6054] 
Comma  ',' [6054;6055] 
WhiteSpace   [6055;6056] 
Identifier  'arg' [6056;6059] 
WhiteSpace   [6059;6060] 
CloseBrace  ')' [6060;6061] 
Semicolon  ';' [6061;6062] 
If  'if' [6062;6064] 
WhiteSpace   [6064;6065] 
OpenBrace  '(' [6065;6066] 
WhiteSpace   [6066;6067] 
Identifier  'value' [6067;6072] 
WhiteSpace   [6072;6073] 
ExclameEqual  '!=' [6073;6075] 
WhiteSpace   [6075;6076] 
Null  'null' [6076;6080] 
WhiteSpace   [6080;6081] 
CloseBrace  ')' [6081;6082] 
WhiteSpace   [6082;6083] 
OpeningCurlyBrace  '{' [6083;6084] 
Identifier  'ret' [6084;6087] 
Point  '.' [6087;6088] 
Identifier  'push' [6088;6092] 
OpenBrace  '(' [6092;6093] 
WhiteSpace   [6093;6094] 
Identifier  'value' [6094;6099] 
WhiteSpace   [6099;6100] 
CloseBrace  ')' [6100;6101] 
Semicolon  ';' [6101;6102] 
ClosingCurlyBrace  '}' [6102;6103] 
ClosingCurlyBrace  '}' [6103;6104] 
ClosingCurlyBrace  '}' [6104;6105] 
Return  'return' [6105;6111] 
WhiteSpace   [6111;6112] 
Identifier  'flat' [6112;6116] 
OpenBrace  '(' [6116;6117] 
WhiteSpace   [6117;6118] 
Identifier  'ret' [6118;6121] 
WhiteSpace   [6121;6122] 
CloseBrace  ')' [6122;6123] 
Semicolon  ';' [6123;6124] 
ClosingCurlyBrace  '}' [6124;6125] 
Comma  ',' [6125;6126] 
Identifier  'guid' [6126;6130] 
ElseTernary  ':' [6130;6131] 
WhiteSpace   [6131;6132] 
IntConstant  '1' [6132;6133] 
Comma  ',' [6133;6134] 
Identifier  'support' [6134;6141] 
ElseTernary  ':' [6141;6142] 
WhiteSpace   [6142;6143] 
Identifier  'support' [6143;6150] 
ClosingCurlyBrace  '}' [6150;6151] 
WhiteSpace   [6151;6152] 
CloseBrace  ')' [6152;6153] 
Semicolon  ';' [6153;6154] 
If  'if' [6154;6156] 
WhiteSpace   [6156;6157] 
OpenBrace  '(' [6157;6158] 
WhiteSpace   [6158;6159] 
Identifier  'typeof' [6159;6165] 
WhiteSpace   [6165;6166] 
Identifier  'Symbol' [6166;6172] 
WhiteSpace   [6172;6173] 
EqualEqual  '==' [6173;6175] 
Equal  '=' [6175;6176] 
WhiteSpace   [6176;6177] 
String  '"function"' [6177;6187] 
WhiteSpace   [6187;6188] 
CloseBrace  ')' [6188;6189] 
WhiteSpace   [6189;6190] 
OpeningCurlyBrace  '{' [6190;6191] 
Identifier  'jQuery' [6191;6197] 
Point  '.' [6197;6198] 
Identifier  'fn' [6198;6200] 
InitArray  '[' [6200;6201] 
WhiteSpace   [6201;6202] 
Identifier  'Symbol' [6202;6208] 
Point  '.' [6208;6209] 
Identifier  'iterator' [6209;6217] 
WhiteSpace   [6217;6218] 
FinalArray  ']' [6218;6219] 
WhiteSpace   [6219;6220] 
Equal  '=' [6220;6221] 
WhiteSpace   [6221;6222] 
Identifier  'arr' [6222;6225] 
InitArray  '[' [6225;6226] 
WhiteSpace   [6226;6227] 
Identifier  'Symbol' [6227;6233] 
Point  '.' [6233;6234] 
Identifier  'iterator' [6234;6242] 
WhiteSpace   [6242;6243] 
FinalArray  ']' [6243;6244] 
Semicolon  ';' [6244;6245] 
ClosingCurlyBrace  '}' [6245;6246] 
Identifier  'jQuery' [6246;6252] 
Point  '.' [6252;6253] 
Identifier  'each' [6253;6257] 
OpenBrace  '(' [6257;6258] 
WhiteSpace   [6258;6259] 
String  '"Boolean Number String Function Array Date RegExp Object Error Symbol"' [6259;6329] 
Point  '.' [6329;6330] 
Identifier  'split' [6330;6335] 
OpenBrace  '(' [6335;6336] 
WhiteSpace   [6336;6337] 
String  '" "' [6337;6340] 
WhiteSpace   [6340;6341] 
CloseBrace  ')' [6341;6342] 
Comma  ',' [6342;6343] 
Function  'function' [6343;6351] 
OpenBrace  '(' [6351;6352] 
WhiteSpace   [6352;6353] 
Identifier  '_i' [6353;6355] 
Comma  ',' [6355;6356] 
WhiteSpace   [6356;6357] 
Identifier  'name' [6357;6361] 
WhiteSpace   [6361;6362] 
CloseBrace  ')' [6362;6363] 
WhiteSpace   [6363;6364] 
OpeningCurlyBrace  '{' [6364;6365] 
Identifier  'class2type' [6365;6375] 
InitArray  '[' [6375;6376] 
WhiteSpace   [6376;6377] 
String  '"[object "' [6377;6387] 
WhiteSpace   [6387;6388] 
Plus  '+' [6388;6389] 
WhiteSpace   [6389;6390] 
Identifier  'name' [6390;6394] 
WhiteSpace   [6394;6395] 
Plus  '+' [6395;6396] 
WhiteSpace   [6396;6397] 
String  '"]"' [6397;6400] 
WhiteSpace   [6400;6401] 
FinalArray  ']' [6401;6402] 
WhiteSpace   [6402;6403] 
Equal  '=' [6403;6404] 
WhiteSpace   [6404;6405] 
Identifier  'name' [6405;6409] 
Point  '.' [6409;6410] 
Identifier  'toLowerCase' [6410;6421] 
OpenBrace  '(' [6421;6422] 
CloseBrace  ')' [6422;6423] 
Semicolon  ';' [6423;6424] 
ClosingCurlyBrace  '}' [6424;6425] 
WhiteSpace   [6425;6426] 
CloseBrace  ')' [6426;6427] 
Semicolon  ';' [6427;6428] 
Function  'function' [6428;6436] 
WhiteSpace   [6436;6437] 
Identifier  'isArrayLike' [6437;6448] 
OpenBrace  '(' [6448;6449] 
WhiteSpace   [6449;6450] 
Identifier  'obj' [6450;6453] 
WhiteSpace   [6453;6454] 
CloseBrace  ')' [6454;6455] 
WhiteSpace   [6455;6456] 
OpeningCurlyBrace  '{' [6456;6457] 
Var  'var' [6457;6460] 
WhiteSpace   [6460;6461] 
Identifier  'length' [6461;6467] 
WhiteSpace   [6467;6468] 
Equal  '=' [6468;6469] 
WhiteSpace   [6469;6470] 
FalseAbrev  '!' [6470;6471] 
FalseAbrev  '!' [6471;6472] 
Identifier  'obj' [6472;6475] 
WhiteSpace   [6475;6476] 
And  '&&' [6476;6478] 
WhiteSpace   [6478;6479] 
String  '"length"' [6479;6487] 
WhiteSpace   [6487;6488] 
Identifier  'in' [6488;6490] 
WhiteSpace   [6490;6491] 
Identifier  'obj' [6491;6494] 
WhiteSpace   [6494;6495] 
And  '&&' [6495;6497] 
WhiteSpace   [6497;6498] 
Identifier  'obj' [6498;6501] 
Point  '.' [6501;6502] 
Identifier  'length' [6502;6508] 
Comma  ',' [6508;6509] 
Identifier  'type' [6509;6513] 
WhiteSpace   [6513;6514] 
Equal  '=' [6514;6515] 
WhiteSpace   [6515;6516] 
Identifier  'toType' [6516;6522] 
OpenBrace  '(' [6522;6523] 
WhiteSpace   [6523;6524] 
Identifier  'obj' [6524;6527] 
WhiteSpace   [6527;6528] 
CloseBrace  ')' [6528;6529] 
Semicolon  ';' [6529;6530] 
If  'if' [6530;6532] 
WhiteSpace   [6532;6533] 
OpenBrace  '(' [6533;6534] 
WhiteSpace   [6534;6535] 
Identifier  'isFunction' [6535;6545] 
OpenBrace  '(' [6545;6546] 
WhiteSpace   [6546;6547] 
Identifier  'obj' [6547;6550] 
WhiteSpace   [6550;6551] 
CloseBrace  ')' [6551;6552] 
WhiteSpace   [6552;6553] 
Or  '||' [6553;6555] 
WhiteSpace   [6555;6556] 
Identifier  'isWindow' [6556;6564] 
OpenBrace  '(' [6564;6565] 
WhiteSpace   [6565;6566] 
Identifier  'obj' [6566;6569] 
WhiteSpace   [6569;6570] 
CloseBrace  ')' [6570;6571] 
WhiteSpace   [6571;6572] 
CloseBrace  ')' [6572;6573] 
WhiteSpace   [6573;6574] 
OpeningCurlyBrace  '{' [6574;6575] 
Return  'return' [6575;6581] 
WhiteSpace   [6581;6582] 
False  'false' [6582;6587] 
Semicolon  ';' [6587;6588] 
ClosingCurlyBrace  '}' [6588;6589] 
Return  'return' [6589;6595] 
WhiteSpace   [6595;6596] 
Identifier  'type' [6596;6600] 
WhiteSpace   [6600;6601] 
EqualEqual  '==' [6601;6603] 
Equal  '=' [6603;6604] 
WhiteSpace   [6604;6605] 
String  '"array"' [6605;6612] 
WhiteSpace   [6612;6613] 
Or  '||' [6613;6615] 
WhiteSpace   [6615;6616] 
Identifier  'length' [6616;6622] 
WhiteSpace   [6622;6623] 
EqualEqual  '==' [6623;6625] 
Equal  '=' [6625;6626] 
WhiteSpace   [6626;6627] 
IntConstant  '0' [6627;6628] 
WhiteSpace   [6628;6629] 
Or  '||' [6629;6631] 
Identifier  'typeof' [6631;6637] 
WhiteSpace   [6637;6638] 
Identifier  'length' [6638;6644] 
WhiteSpace   [6644;6645] 
EqualEqual  '==' [6645;6647] 
Equal  '=' [6647;6648] 
WhiteSpace   [6648;6649] 
String  '"number"' [6649;6657] 
WhiteSpace   [6657;6658] 
And  '&&' [6658;6660] 
WhiteSpace   [6660;6661] 
Identifier  'length' [6661;6667] 
WhiteSpace   [6667;6668] 
Greater  '>' [6668;6669] 
WhiteSpace   [6669;6670] 
IntConstant  '0' [6670;6671] 
WhiteSpace   [6671;6672] 
And  '&&' [6672;6674] 
WhiteSpace   [6674;6675] 
OpenBrace  '(' [6675;6676] 
WhiteSpace   [6676;6677] 
Identifier  'length' [6677;6683] 
WhiteSpace   [6683;6684] 
Minus  '-' [6684;6685] 
WhiteSpace   [6685;6686] 
IntConstant  '1' [6686;6687] 
WhiteSpace   [6687;6688] 
CloseBrace  ')' [6688;6689] 
WhiteSpace   [6689;6690] 
Identifier  'in' [6690;6692] 
WhiteSpace   [6692;6693] 
Identifier  'obj' [6693;6696] 
Semicolon  ';' [6696;6697] 
ClosingCurlyBrace  '}' [6697;6698] 
Var  'var' [6698;6701] 
WhiteSpace   [6701;6702] 
Identifier  'Sizzle' [6702;6708] 
WhiteSpace   [6708;6709] 
Equal  '=' [6709;6710] 
OpenBrace  '(' [6710;6711] 
WhiteSpace   [6711;6712] 
Function  'function' [6712;6720] 
OpenBrace  '(' [6720;6721] 
WhiteSpace   [6721;6722] 
Identifier  'window' [6722;6728] 
WhiteSpace   [6728;6729] 
CloseBrace  ')' [6729;6730] 
WhiteSpace   [6730;6731] 
OpeningCurlyBrace  '{' [6731;6732] 
Var  'var' [6732;6735] 
WhiteSpace   [6735;6736] 
Identifier  'i' [6736;6737] 
Comma  ',' [6737;6738] 
Identifier  'support' [6738;6745] 
Comma  ',' [6745;6746] 
Identifier  'Expr' [6746;6750] 
Comma  ',' [6750;6751] 
Identifier  'getText' [6751;6758] 
Comma  ',' [6758;6759] 
Identifier  'isXML' [6759;6764] 
Comma  ',' [6764;6765] 
Identifier  'tokenize' [6765;6773] 
Comma  ',' [6773;6774] 
Identifier  'compile' [6774;6781] 
Comma  ',' [6781;6782] 
Identifier  'select' [6782;6788] 
Comma  ',' [6788;6789] 
Identifier  'outermostContext' [6789;6805] 
Comma  ',' [6805;6806] 
Identifier  'sortInput' [6806;6815] 
Comma  ',' [6815;6816] 
Identifier  'hasDuplicate' [6816;6828] 
Comma  ',' [6828;6829] 
Identifier  'setDocument' [6829;6840] 
Comma  ',' [6840;6841] 
Identifier  'document' [6841;6849] 
Comma  ',' [6849;6850] 
Identifier  'docElem' [6850;6857] 
Comma  ',' [6857;6858] 
Identifier  'documentIsHTML' [6858;6872] 
Comma  ',' [6872;6873] 
Identifier  'rbuggyQSA' [6873;6882] 
Comma  ',' [6882;6883] 
Identifier  'rbuggyMatches' [6883;6896] 
Comma  ',' [6896;6897] 
Identifier  'matches' [6897;6904] 
Comma  ',' [6904;6905] 
Identifier  'contains' [6905;6913] 
Comma  ',' [6913;6914] 
Identifier  'expando' [6914;6921] 
WhiteSpace   [6921;6922] 
Equal  '=' [6922;6923] 
WhiteSpace   [6923;6924] 
String  '"sizzle"' [6924;6932] 
WhiteSpace   [6932;6933] 
Plus  '+' [6933;6934] 
WhiteSpace   [6934;6935] 
IntConstant  '1' [6935;6936] 
WhiteSpace   [6936;6937] 
Multiply  '*' [6937;6938] 
WhiteSpace   [6938;6939] 
New  'new' [6939;6942] 
WhiteSpace   [6942;6943] 
Identifier  'Date' [6943;6947] 
OpenBrace  '(' [6947;6948] 
CloseBrace  ')' [6948;6949] 
Comma  ',' [6949;6950] 
Identifier  'preferredDoc' [6950;6962] 
WhiteSpace   [6962;6963] 
Equal  '=' [6963;6964] 
WhiteSpace   [6964;6965] 
Identifier  'window' [6965;6971] 
Point  '.' [6971;6972] 
Identifier  'document' [6972;6980] 
Comma  ',' [6980;6981] 
Identifier  'dirruns' [6981;6988] 
WhiteSpace   [6988;6989] 
Equal  '=' [6989;6990] 
WhiteSpace   [6990;6991] 
IntConstant  '0' [6991;6992] 
Comma  ',' [6992;6993] 
Identifier  'done' [6993;6997] 
WhiteSpace   [6997;6998] 
Equal  '=' [6998;6999] 
WhiteSpace   [6999;7000] 
IntConstant  '0' [7000;7001] 
Comma  ',' [7001;7002] 
Identifier  'classCache' [7002;7012] 
WhiteSpace   [7012;7013] 
Equal  '=' [7013;7014] 
WhiteSpace   [7014;7015] 
Identifier  'createCache' [7015;7026] 
OpenBrace  '(' [7026;7027] 
CloseBrace  ')' [7027;7028] 
Comma  ',' [7028;7029] 
Identifier  'tokenCache' [7029;7039] 
WhiteSpace   [7039;7040] 
Equal  '=' [7040;7041] 
WhiteSpace   [7041;7042] 
Identifier  'createCache' [7042;7053] 
OpenBrace  '(' [7053;7054] 
CloseBrace  ')' [7054;7055] 
Comma  ',' [7055;7056] 
Identifier  'compilerCache' [7056;7069] 
WhiteSpace   [7069;7070] 
Equal  '=' [7070;7071] 
WhiteSpace   [7071;7072] 
Identifier  'createCache' [7072;7083] 
OpenBrace  '(' [7083;7084] 
CloseBrace  ')' [7084;7085] 
Comma  ',' [7085;7086] 
Identifier  'nonnativeSelectorCache' [7086;7108] 
WhiteSpace   [7108;7109] 
Equal  '=' [7109;7110] 
WhiteSpace   [7110;7111] 
Identifier  'createCache' [7111;7122] 
OpenBrace  '(' [7122;7123] 
CloseBrace  ')' [7123;7124] 
Comma  ',' [7124;7125] 
Identifier  'sortOrder' [7125;7134] 
WhiteSpace   [7134;7135] 
Equal  '=' [7135;7136] 
WhiteSpace   [7136;7137] 
Function  'function' [7137;7145] 
OpenBrace  '(' [7145;7146] 
WhiteSpace   [7146;7147] 
Identifier  'a' [7147;7148] 
Comma  ',' [7148;7149] 
WhiteSpace   [7149;7150] 
Identifier  'b' [7150;7151] 
WhiteSpace   [7151;7152] 
CloseBrace  ')' [7152;7153] 
WhiteSpace   [7153;7154] 
OpeningCurlyBrace  '{' [7154;7155] 
If  'if' [7155;7157] 
WhiteSpace   [7157;7158] 
OpenBrace  '(' [7158;7159] 
WhiteSpace   [7159;7160] 
Identifier  'a' [7160;7161] 
WhiteSpace   [7161;7162] 
EqualEqual  '==' [7162;7164] 
Equal  '=' [7164;7165] 
WhiteSpace   [7165;7166] 
Identifier  'b' [7166;7167] 
WhiteSpace   [7167;7168] 
CloseBrace  ')' [7168;7169] 
WhiteSpace   [7169;7170] 
OpeningCurlyBrace  '{' [7170;7171] 
Identifier  'hasDuplicate' [7171;7183] 
WhiteSpace   [7183;7184] 
Equal  '=' [7184;7185] 
WhiteSpace   [7185;7186] 
True  'true' [7186;7190] 
Semicolon  ';' [7190;7191] 
ClosingCurlyBrace  '}' [7191;7192] 
Return  'return' [7192;7198] 
WhiteSpace   [7198;7199] 
IntConstant  '0' [7199;7200] 
Semicolon  ';' [7200;7201] 
ClosingCurlyBrace  '}' [7201;7202] 
Comma  ',' [7202;7203] 
Identifier  'hasOwn' [7203;7209] 
WhiteSpace   [7209;7210] 
Equal  '=' [7210;7211] 
WhiteSpace   [7211;7212] 
OpenBrace  '(' [7212;7213] 
WhiteSpace   [7213;7214] 
OpeningCurlyBrace  '{' [7214;7215] 
ClosingCurlyBrace  '}' [7215;7216] 
WhiteSpace   [7216;7217] 
CloseBrace  ')' [7217;7218] 
Point  '.' [7218;7219] 
Identifier  'hasOwnProperty' [7219;7233] 
Comma  ',' [7233;7234] 
Identifier  'arr' [7234;7237] 
WhiteSpace   [7237;7238] 
Equal  '=' [7238;7239] 
WhiteSpace   [7239;7240] 
InitArray  '[' [7240;7241] 
FinalArray  ']' [7241;7242] 
Comma  ',' [7242;7243] 
Identifier  'pop' [7243;7246] 
WhiteSpace   [7246;7247] 
Equal  '=' [7247;7248] 
WhiteSpace   [7248;7249] 
Identifier  'arr' [7249;7252] 
Point  '.' [7252;7253] 
Identifier  'pop' [7253;7256] 
Comma  ',' [7256;7257] 
Identifier  'pushNative' [7257;7267] 
WhiteSpace   [7267;7268] 
Equal  '=' [7268;7269] 
WhiteSpace   [7269;7270] 
Identifier  'arr' [7270;7273] 
Point  '.' [7273;7274] 
Identifier  'push' [7274;7278] 
Comma  ',' [7278;7279] 
Identifier  'push' [7279;7283] 
WhiteSpace   [7283;7284] 
Equal  '=' [7284;7285] 
WhiteSpace   [7285;7286] 
Identifier  'arr' [7286;7289] 
Point  '.' [7289;7290] 
Identifier  'push' [7290;7294] 
Comma  ',' [7294;7295] 
Identifier  'slice' [7295;7300] 
WhiteSpace   [7300;7301] 
Equal  '=' [7301;7302] 
WhiteSpace   [7302;7303] 
Identifier  'arr' [7303;7306] 
Point  '.' [7306;7307] 
Identifier  'slice' [7307;7312] 
Comma  ',' [7312;7313] 
Identifier  'indexOf' [7313;7320] 
WhiteSpace   [7320;7321] 
Equal  '=' [7321;7322] 
WhiteSpace   [7322;7323] 
Function  'function' [7323;7331] 
OpenBrace  '(' [7331;7332] 
WhiteSpace   [7332;7333] 
Identifier  'list' [7333;7337] 
Comma  ',' [7337;7338] 
WhiteSpace   [7338;7339] 
Identifier  'elem' [7339;7343] 
WhiteSpace   [7343;7344] 
CloseBrace  ')' [7344;7345] 
WhiteSpace   [7345;7346] 
OpeningCurlyBrace  '{' [7346;7347] 
Var  'var' [7347;7350] 
WhiteSpace   [7350;7351] 
Identifier  'i' [7351;7352] 
WhiteSpace   [7352;7353] 
Equal  '=' [7353;7354] 
WhiteSpace   [7354;7355] 
IntConstant  '0' [7355;7356] 
Comma  ',' [7356;7357] 
Identifier  'len' [7357;7360] 
WhiteSpace   [7360;7361] 
Equal  '=' [7361;7362] 
WhiteSpace   [7362;7363] 
Identifier  'list' [7363;7367] 
Point  '.' [7367;7368] 
Identifier  'length' [7368;7374] 
Semicolon  ';' [7374;7375] 
Identifier  'for' [7375;7378] 
WhiteSpace   [7378;7379] 
OpenBrace  '(' [7379;7380] 
WhiteSpace   [7380;7381] 
Semicolon  ';' [7381;7382] 
WhiteSpace   [7382;7383] 
Identifier  'i' [7383;7384] 
WhiteSpace   [7384;7385] 
Less  '<' [7385;7386] 
WhiteSpace   [7386;7387] 
Identifier  'len' [7387;7390] 
Semicolon  ';' [7390;7391] 
WhiteSpace   [7391;7392] 
Identifier  'i' [7392;7393] 
Plus  '+' [7393;7394] 
Plus  '+' [7394;7395] 
WhiteSpace   [7395;7396] 
CloseBrace  ')' [7396;7397] 
WhiteSpace   [7397;7398] 
OpeningCurlyBrace  '{' [7398;7399] 
If  'if' [7399;7401] 
WhiteSpace   [7401;7402] 
OpenBrace  '(' [7402;7403] 
WhiteSpace   [7403;7404] 
Identifier  'list' [7404;7408] 
InitArray  '[' [7408;7409] 
WhiteSpace   [7409;7410] 
Identifier  'i' [7410;7411] 
WhiteSpace   [7411;7412] 
FinalArray  ']' [7412;7413] 
WhiteSpace   [7413;7414] 
EqualEqual  '==' [7414;7416] 
Equal  '=' [7416;7417] 
WhiteSpace   [7417;7418] 
Identifier  'elem' [7418;7422] 
WhiteSpace   [7422;7423] 
CloseBrace  ')' [7423;7424] 
WhiteSpace   [7424;7425] 
OpeningCurlyBrace  '{' [7425;7426] 
Return  'return' [7426;7432] 
WhiteSpace   [7432;7433] 
Identifier  'i' [7433;7434] 
Semicolon  ';' [7434;7435] 
ClosingCurlyBrace  '}' [7435;7436] 
ClosingCurlyBrace  '}' [7436;7437] 
Return  'return' [7437;7443] 
WhiteSpace   [7443;7444] 
Minus  '-' [7444;7445] 
IntConstant  '1' [7445;7446] 
Semicolon  ';' [7446;7447] 
ClosingCurlyBrace  '}' [7447;7448] 
Comma  ',' [7448;7449] 
Identifier  'booleans' [7449;7457] 
WhiteSpace   [7457;7458] 
Equal  '=' [7458;7459] 
WhiteSpace   [7459;7460] 
String  '"checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|"' [7460;7535] 
WhiteSpace   [7535;7536] 
Plus  '+' [7536;7537] 
String  '"ismap|loop|multiple|open|readonly|required|scoped"' [7537;7588] 
Comma  ',' [7588;7589] 
Identifier  'whitespace' [7589;7599] 
WhiteSpace   [7599;7600] 
Equal  '=' [7600;7601] 
WhiteSpace   [7601;7602] 
String  '"[\\x20\\t\\r\\n\\f]"' [7602;7623] 
Comma  ',' [7623;7624] 
Identifier  'identifier' [7624;7634] 
WhiteSpace   [7634;7635] 
Equal  '=' [7635;7636] 
WhiteSpace   [7636;7637] 
String  '"(?:\\\\[\\da-fA-F]{1,6}"' [7637;7662] 
WhiteSpace   [7662;7663] 
Plus  '+' [7663;7664] 
WhiteSpace   [7664;7665] 
Identifier  'whitespace' [7665;7675] 
WhiteSpace   [7675;7676] 
Plus  '+' [7676;7677] 
String  '"?|\\\\[^\\r\\n\\f]|[\\w-]|[^\0-\\x7f])+"' [7677;7718] 
Comma  ',' [7718;7719] 
Identifier  'attributes' [7719;7729] 
WhiteSpace   [7729;7730] 
Equal  '=' [7730;7731] 
WhiteSpace   [7731;7732] 
String  '"\\["' [7732;7737] 
WhiteSpace   [7737;7738] 
Plus  '+' [7738;7739] 
WhiteSpace   [7739;7740] 
Identifier  'whitespace' [7740;7750] 
WhiteSpace   [7750;7751] 
Plus  '+' [7751;7752] 
WhiteSpace   [7752;7753] 
String  '"*("' [7753;7757] 
WhiteSpace   [7757;7758] 
Plus  '+' [7758;7759] 
WhiteSpace   [7759;7760] 
Identifier  'identifier' [7760;7770] 
WhiteSpace   [7770;7771] 
Plus  '+' [7771;7772] 
WhiteSpace   [7772;7773] 
String  '")(?:"' [7773;7779] 
WhiteSpace   [7779;7780] 
Plus  '+' [7780;7781] 
WhiteSpace   [7781;7782] 
Identifier  'whitespace' [7782;7792] 
WhiteSpace   [7792;7793] 
Plus  '+' [7793;7794] 
String  '"*([*^$|!~]?=)"' [7794;7809] 
WhiteSpace   [7809;7810] 
Plus  '+' [7810;7811] 
WhiteSpace   [7811;7812] 
Identifier  'whitespace' [7812;7822] 
WhiteSpace   [7822;7823] 
Plus  '+' [7823;7824] 
String  '"*(?:'((?:\\\\.|[^\\\\'])*)'|\"' [7824;7855] 
OpenBrace  '(' [7855;7856] 
OpenBrace  '(' [7856;7857] 
IfTernary  '?' [7857;7858] 
ElseTernary  ':' [7858;7859] 
Point  '.' [7863;7864] 
SingleOr  '|' [7864;7865] 
InitArray  '[' [7865;7866] 
String  '"])*)\"' [7872;7879] 
SingleOr  '|' [7879;7880] 
OpenBrace  '(' [7880;7881] 
String  '" + identifier + "' [7881;7899] 
CloseBrace  ')' [7899;7900] 
CloseBrace  ')' [7900;7901] 
SingleOr  '|' [7901;7902] 
CloseBrace  ')' [7902;7903] 
String  '" +whitespace + "' [7903;7920] 
Multiply  '*' [7920;7921] 
FinalArray  ']' [7923;7924] 
String  '",pseudos = "' [7924;7937] 
ElseTernary  ':' [7937;7938] 
OpenBrace  '(' [7938;7939] 
String  '" + identifier + "' [7939;7957] 
CloseBrace  ')' [7957;7958] 
OpenBrace  '(' [7958;7959] 
IfTernary  '?' [7959;7960] 
ElseTernary  ':' [7960;7961] 
OpenBrace  '(' [7963;7964] 
OpenBrace  '(' [7964;7965] 
String  '" +"' [7965;7969] 
OpenBrace  '(' [7969;7970] 
String  ''((?:\\\\.|[^\\\\'' [7970;7988] 
FinalArray  ']' [7988;7989] 
CloseBrace  ')' [7989;7990] 
Multiply  '*' [7990;7991] 
CloseBrace  ')' [7991;7992] 
String  ''|\"((?:\\\\.|[^\\\\\"])*)\")|" +"((?:\\\\.|[^\\\\()[\\]]|" + attributes + ")*)|" +".*" +")\\)|)",rwhitespace = new RegExp( whitespace + "+", "g" ),rtrim = new RegExp( "^" + whitespace + "+|((?:^|[^\\\\])(?:\\\\.)*)" +whitespace + "+$", "g" ),rcomma = new RegExp( "^" + whitespace + "*," + whitespace + "*" ),rcombinators = new RegExp( "^" + whitespace + "*([>+~]|" + whitespace + ")" + whitespace +"*" ),rdescend = new RegExp( whitespace + "|>" ),rpseudo = new RegExp( pseudos ),ridentifier = new RegExp( "^" + identifier + "$" ),matchExpr = {"ID": new RegExp( "^#(" + identifier + ")" ),"CLASS": new RegExp( "^\\.(" + identifier + ")" ),"TAG": new RegExp( "^(" + identifier + "|[*])" ),"ATTR": new RegExp( "^" + attributes ),"PSEUDO": new RegExp( "^" + pseudos ),"CHILD": new RegExp( "^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\(" +whitespace + "*(even|odd|(([+-]|)(\\d*)n|)" + whitespace + "*(?:([+-]|)" +whitespace + "*(\\d+)|))" + whitespace + "*\\)|)", "i" ),"bool": new RegExp( "^(?:" + booleans + ")$", "i" ),"needsContext": new RegExp( "^" + whitespace +"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\(" + whitespace +"*((?:-\\d)?\\d*)" + whitespace + "*\\)|)(?=[^-]|$)", "i" )},rhtml = /HTML$/i,rinputs = /^(?:input|select|textarea|button)$/i,rheader = /^h\d$/i,rnative = /^[^{]+\{\s*\[native \w/,rquickExpr = /^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,rsibling = /[+~]/,runescape = new RegExp( "\\\\[\\da-fA-F]{1,6}" + whitespace + "?|\\\\([^\\r\\n\\f])", "g" ),funescape = function( escape, nonHex ) {var high = "0x" + escape.slice( 1 ) - 0x10000;return nonHex ?nonHex :high < 0 ?String.fromCharCode( high + 0x10000 ) :String.fromCharCode( high >> 10 | 0xD800, high & 0x3FF | 0xDC00 );},rcssescape = /([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g,fcssescape = function( ch, asCodePoint ) {if ( asCodePoint ) {if ( ch === "\0" ) {return "\uFFFD";}return ch.slice( 0, -1 ) + "\\" +ch.charCodeAt( ch.length - 1 ).toString( 16 ) + " ";}return "\\" + ch;},unloadHandler = function() {setDocument();},inDisabledFieldset = addCombinator(function( elem ) {return elem.disabled === true && elem.nodeName.toLowerCase() === "fieldset";},{ dir: "parentNode", next: "legend" });try {push.apply(( arr = slice.call( preferredDoc.childNodes ) ),preferredDoc.childNodes);arr[ preferredDoc.childNodes.length ].nodeType;} catch ( e ) {push = { apply: arr.length ?function( target, els ) {pushNative.apply( target, slice.call( els ) );} :function( target, els ) {var j = target.length,i = 0;while ( ( target[ j++ ] = els[ i++ ] ) ) {}target.length = j - 1;}};}function Sizzle( selector, context, results, seed ) {var m, i, elem, nid, match, groups, newSelector,newContext = context && context.ownerDocument,nodeType = context ? context.nodeType : 9;results = results || [];if ( typeof selector !== "string" || !selector ||nodeType !== 1 && nodeType !== 9 && nodeType !== 11 ) {return results;}if ( !seed ) {setDocument( context );context = context || document;if ( documentIsHTML ) {if ( nodeType !== 11 && ( match = rquickExpr.exec( selector ) ) ) {if ( ( m = match[ 1 ] ) ) {if ( nodeType === 9 ) {if ( ( elem = context.getElementById( m ) ) ) {if ( elem.id === m ) {results.push( elem );return results;}} else {return results;}} else {if ( newContext && ( elem = newContext.getElementById( m ) ) &&contains( context, elem ) &&elem.id === m ) {results.push( elem );return results;}}} else if ( match[ 2 ] ) {push.apply( results, context.getElementsByTagName( selector ) );return results;} else if ( ( m = match[ 3 ] ) && support.getElementsByClassName &&context.getElementsByClassName ) {push.apply( results, context.getElementsByClassName( m ) );return results;}}if ( support.qsa &&!nonnativeSelectorCache[ selector + " " ] &&( !rbuggyQSA || !rbuggyQSA.test( selector ) ) &&( nodeType !== 1 || context.nodeName.toLowerCase() !== "object" ) ) {newSelector = selector;newContext = context;if ( nodeType === 1 &&( rdescend.test( selector ) || rcombinators.test( selector ) ) ) {newContext = rsibling.test( selector ) && testContext( context.parentNode ) ||context;if ( newContext !== context || !support.scope ) {if ( ( nid = context.getAttribute( "id" ) ) ) {nid = nid.replace( rcssescape, fcssescape );} else {context.setAttribute( "id", ( nid = expando ) );}}groups = tokenize( selector );i = groups.length;while ( i-- ) {groups[ i ] = ( nid ? "#" + nid : ":scope" ) + " " +toSelector( groups[ i ] );}newSelector = groups.join( "," );}try {push.apply( results,newContext.querySelectorAll( newSelector ));return results;} catch ( qsaError ) {nonnativeSelectorCache( selector, true );} finally {if ( nid === expando ) {context.removeAttribute( "id" );}}}}}return select( selector.replace( rtrim, "$1" ), context, results, seed );}function createCache() {var keys = [];function cache( key, value ) {if ( keys.push( key + " " ) > Expr.cacheLength ) {delete cache[ keys.shift() ];}return ( cache[ key + " " ] = value );}return cache;}function markFunction( fn ) {fn[ expando ] = true;return fn;}function assert( fn ) {var el = document.createElement( "fieldset" );try {return !!fn( el );} catch ( e ) {return false;} finally {if ( el.parentNode ) {el.parentNode.removeChild( el );}el = null;}}function addHandle( attrs, handler ) {var arr = attrs.split( "|" ),i = arr.length;while ( i-- ) {Expr.attrHandle[ arr[ i ] ] = handler;}}function siblingCheck( a, b ) {var cur = b && a,diff = cur && a.nodeType === 1 && b.nodeType === 1 &&a.sourceIndex - b.sourceIndex;if ( diff ) {return diff;}if ( cur ) {while ( ( cur = cur.nextSibling ) ) {if ( cur === b ) {return -1;}}}return a ? 1 : -1;}function createInputPseudo( type ) {return function( elem ) {var name = elem.nodeName.toLowerCase();return name === "input" && elem.type === type;};}function createButtonPseudo( type ) {return function( elem ) {var name = elem.nodeName.toLowerCase();return ( name === "input" || name === "button" ) && elem.type === type;};}function createDisabledPseudo( disabled ) {return function( elem ) {if ( "form" in elem ) {if ( elem.parentNode && elem.disabled === false ) {if ( "label" in elem ) {if ( "label" in elem.parentNode ) {return elem.parentNode.disabled === disabled;} else {return elem.disabled === disabled;}}return elem.isDisabled === disabled ||elem.isDisabled !== !disabled &&inDisabledFieldset( elem ) === disabled;}return elem.disabled === disabled;} else if ( "label" in elem ) {return elem.disabled === disabled;}return false;};}function createPositionalPseudo( fn ) {return markFunction( function( argument ) {argument = +argument;return markFunction( function( seed, matches ) {var j,matchIndexes = fn( [], seed.length, argument ),i = matchIndexes.length;while ( i-- ) {if ( seed[ ( j = matchIndexes[ i ] ) ] ) {seed[ j ] = !( matches[ j ] = seed[ j ] );}}} );} );}function testContext( context ) {return context && typeof context.getElementsByTagName !== "undefined" && context;}support = Sizzle.support = {};isXML = Sizzle.isXML = function( elem ) {var namespace = elem && elem.namespaceURI,docElem = elem && ( elem.ownerDocument || elem ).documentElement;return !rhtml.test( namespace || docElem && docElem.nodeName || "HTML" );};setDocument = Sizzle.setDocument = function( node ) {var hasCompare, subWindow,doc = node ? node.ownerDocument || node : preferredDoc;if ( doc == document || doc.nodeType !== 9 || !doc.documentElement ) {return document;}document = doc;docElem = document.documentElement;documentIsHTML = !isXML( document );if ( preferredDoc != document &&( subWindow = document.defaultView ) && subWindow.top !== subWindow ) {if ( subWindow.addEventListener ) {subWindow.addEventListener( "unload", unloadHandler, false );} else if ( subWindow.attachEvent ) {subWindow.attachEvent( "onunload", unloadHandler );}}support.scope = assert( function( el ) {docElem.appendChild( el ).appendChild( document.createElement( "div" ) );return typeof el.querySelectorAll !== "undefined" &&!el.querySelectorAll( ":scope fieldset div" ).length;} );support.attributes = assert( function( el ) {el.className = "i";return !el.getAttribute( "className" );} );support.getElementsByTagName = assert( function( el ) {el.appendChild( document.createComment( "" ) );return !el.getElementsByTagName( "*" ).length;} );support.getElementsByClassName = rnative.test( document.getElementsByClassName );support.getById = assert( function( el ) {docElem.appendChild( el ).id = expando;return !document.getElementsByName || !document.getElementsByName( expando ).length;} );if ( support.getById ) {Expr.filter[ "ID" ] = function( id ) {var attrId = id.replace( runescape, funescape );return function( elem ) {return elem.getAttribute( "id" ) === attrId;};};Expr.find[ "ID" ] = function( id, context ) {if ( typeof context.getElementById !== "undefined" && documentIsHTML ) {var elem = context.getElementById( id );return elem ? [ elem ] : [];}};} else {Expr.filter[ "ID" ] =  function( id ) {var attrId = id.replace( runescape, funescape );return function( elem ) {var node = typeof elem.getAttributeNode !== "undefined" &&elem.getAttributeNode( "id" );return node && node.value === attrId;};};Expr.find[ "ID" ] = function( id, context ) {if ( typeof context.getElementById !== "undefined" && documentIsHTML ) {var node, i, elems,elem = context.getElementById( id );if ( elem ) {node = elem.getAttributeNode( "id" );if ( node && node.value === id ) {return [ elem ];}elems = context.getElementsByName( id );i = 0;while ( ( elem = elems[ i++ ] ) ) {node = elem.getAttributeNode( "id" );if ( node && node.value === id ) {return [ elem ];}}}return [];}};}Expr.find[ "TAG" ] = support.getElementsByTagName ?function( tag, context ) {if ( typeof context.getElementsByTagName !== "undefined" ) {return context.getElementsByTagName( tag );} else if ( support.qsa ) {return context.querySelectorAll( tag );}} :function( tag, context ) {var elem,tmp = [],i = 0,results = context.getElementsByTagName( tag );if ( tag === "*" ) {while ( ( elem = results[ i++ ] ) ) {if ( elem.nodeType === 1 ) {tmp.push( elem );}}return tmp;}return results;};Expr.find[ "CLASS" ] = support.getElementsByClassName && function( className, context ) {if ( typeof context.getElementsByClassName !== "undefined" && documentIsHTML ) {return context.getElementsByClassName( className );}};rbuggyMatches = [];rbuggyQSA = [];if ( ( support.qsa = rnative.test( document.querySelectorAll ) ) ) {assert( function( el ) {var input;docElem.appendChild( el ).innerHTML = "<a id='' [7992;18414] 
String  '" + expando + "' [18414;18429] 
String  ''></a>" +"<select id='' [18429;18451] 
String  '" + expando + "' [18451;18466] 
Minus  '-' [18466;18467] 
Identifier  'r' [18468;18469] 
String  '' msallowcapture='' [18471;18489] 
String  ''>" +"<option selected='' [18489;18513] 
String  ''></option></select>";if ( el.querySelectorAll( "[msallowcapture^='' [18513;18580] 
String  '']" ).length ) {rbuggyQSA.push( "[*^$]=" + whitespace + "*(?:'' [18580;18642] 
String  ''|\"\")" );}if ( !el.querySelectorAll( "[selected]" ).length ) {rbuggyQSA.push( "\\[" + whitespace + "*(?:value|" + booleans + ")" );}if ( !el.querySelectorAll( "[id~=" + expando + "-]" ).length ) {rbuggyQSA.push( "~=" );}input = document.createElement( "input" );input.setAttribute( "name", "" );el.appendChild( input );if ( !el.querySelectorAll( "[name='' [18642;18998] 
String  '']" ).length ) {rbuggyQSA.push( "\\[" + whitespace + "*name" + whitespace + "*=" +whitespace + "*(?:'' [18998;19099] 
String  ''|\"\")" );}if ( !el.querySelectorAll( ":checked" ).length ) {rbuggyQSA.push( ":checked" );}if ( !el.querySelectorAll( "a#" + expando + "+*" ).length ) {rbuggyQSA.push( ".#.+[+~]" );}el.querySelectorAll( "\\\f" );rbuggyQSA.push( "[\\r\\n\\f]" );} );assert( function( el ) {el.innerHTML = "<a href='' [19099;19397] 
String  '' disabled='' [19397;19409] 
Identifier  'disabled' [19409;19417] 
String  ''></a>" +"<select disabled='' [19417;19445] 
Identifier  'disabled' [19445;19453] 
String  ''><option/></select>";var input = document.createElement( "input" );input.setAttribute( "type", "hidden" );el.appendChild( input ).setAttribute( "name", "D" );if ( el.querySelectorAll( "[name=d]" ).length ) {rbuggyQSA.push( "name" + whitespace + "*[*^$|!~]?=" );}if ( el.querySelectorAll( ":enabled" ).length !== 2 ) {rbuggyQSA.push( ":enabled", ":disabled" );}docElem.appendChild( el ).disabled = true;if ( el.querySelectorAll( ":disabled" ).length !== 2 ) {rbuggyQSA.push( ":enabled", ":disabled" );}el.querySelectorAll( "*,:x" );rbuggyQSA.push( ",.*:" );} );}if ( ( support.matchesSelector = rnative.test( ( matches = docElem.matches ||docElem.webkitMatchesSelector ||docElem.mozMatchesSelector ||docElem.oMatchesSelector ||docElem.msMatchesSelector ) ) ) ) {assert( function( el ) {support.disconnectedMatch = matches.call( el, "*" );matches.call( el, "[s!='' [19453;20315] 
String  '']:x" );rbuggyMatches.push( "!=", pseudos );} );}rbuggyQSA = rbuggyQSA.length && new RegExp( rbuggyQSA.join( "|" ) );rbuggyMatches = rbuggyMatches.length && new RegExp( rbuggyMatches.join( "|" ) );hasCompare = rnative.test( docElem.compareDocumentPosition );contains = hasCompare || rnative.test( docElem.contains ) ?function( a, b ) {var adown = a.nodeType === 9 ? a.documentElement : a,bup = b && b.parentNode;return a === bup || !!( bup && bup.nodeType === 1 && (adown.contains ?adown.contains( bup ) :a.compareDocumentPosition && a.compareDocumentPosition( bup ) & 16) );} :function( a, b ) {if ( b ) {while ( ( b = b.parentNode ) ) {if ( b === a ) {return true;}}}return false;};sortOrder = hasCompare ?function( a, b ) {if ( a === b ) {hasDuplicate = true;return 0;}var compare = !a.compareDocumentPosition - !b.compareDocumentPosition;if ( compare ) {return compare;}compare = ( a.ownerDocument || a ) == ( b.ownerDocument || b ) ?a.compareDocumentPosition( b ) :1;if ( compare & 1 ||( !support.sortDetached && b.compareDocumentPosition( a ) === compare ) ) {if ( a == document || a.ownerDocument == preferredDoc &&contains( preferredDoc, a ) ) {return -1;}if ( b == document || b.ownerDocument == preferredDoc &&contains( preferredDoc, b ) ) {return 1;}return sortInput ?( indexOf( sortInput, a ) - indexOf( sortInput, b ) ) :0;}return compare & 4 ? -1 : 1;} :function( a, b ) {if ( a === b ) {hasDuplicate = true;return 0;}var cur,i = 0,aup = a.parentNode,bup = b.parentNode,ap = [ a ],bp = [ b ];if ( !aup || !bup ) {return a == document ? -1 :b == document ? 1 :aup ? -1 :bup ? 1 :sortInput ?( indexOf( sortInput, a ) - indexOf( sortInput, b ) ) :0;} else if ( aup === bup ) {return siblingCheck( a, b );}cur = a;while ( ( cur = cur.parentNode ) ) {ap.unshift( cur );}cur = b;while ( ( cur = cur.parentNode ) ) {bp.unshift( cur );}while ( ap[ i ] === bp[ i ] ) {i++;}return i ?siblingCheck( ap[ i ], bp[ i ] ) :ap[ i ] == preferredDoc ? -1 :bp[ i ] == preferredDoc ? 1 :0;};return document;};Sizzle.matches = function( expr, elements ) {return Sizzle( expr, null, null, elements );};Sizzle.matchesSelector = function( elem, expr ) {setDocument( elem );if ( support.matchesSelector && documentIsHTML &&!nonnativeSelectorCache[ expr + " " ] &&( !rbuggyMatches || !rbuggyMatches.test( expr ) ) &&( !rbuggyQSA     || !rbuggyQSA.test( expr ) ) ) {try {var ret = matches.call( elem, expr );if ( ret || support.disconnectedMatch ||elem.document && elem.document.nodeType !== 11 ) {return ret;}} catch ( e ) {nonnativeSelectorCache( expr, true );}}return Sizzle( expr, document, null, [ elem ] ).length > 0;};Sizzle.contains = function( context, elem ) {if ( ( context.ownerDocument || context ) != document ) {setDocument( context );}return contains( context, elem );};Sizzle.attr = function( elem, name ) {if ( ( elem.ownerDocument || elem ) != document ) {setDocument( elem );}var fn = Expr.attrHandle[ name.toLowerCase() ],val = fn && hasOwn.call( Expr.attrHandle, name.toLowerCase() ) ?fn( elem, name, !documentIsHTML ) :undefined;return val !== undefined ?val :support.attributes || !documentIsHTML ?elem.getAttribute( name ) :( val = elem.getAttributeNode( name ) ) && val.specified ?val.value :null;};Sizzle.escape = function( sel ) {return ( sel + "" ).replace( rcssescape, fcssescape );};Sizzle.error = function( msg ) {throw new Error( "Syntax error, unrecognized expression: " + msg );};Sizzle.uniqueSort = function( results ) {var elem,duplicates = [],j = 0,i = 0;hasDuplicate = !support.detectDuplicates;sortInput = !support.sortStable && results.slice( 0 );results.sort( sortOrder );if ( hasDuplicate ) {while ( ( elem = results[ i++ ] ) ) {if ( elem === results[ i ] ) {j = duplicates.push( i );}}while ( j-- ) {results.splice( duplicates[ j ], 1 );}}sortInput = null;return results;};getText = Sizzle.getText = function( elem ) {var node,ret = "",i = 0,nodeType = elem.nodeType;if ( !nodeType ) {while ( ( node = elem[ i++ ] ) ) {ret += getText( node );}} else if ( nodeType === 1 || nodeType === 9 || nodeType === 11 ) {if ( typeof elem.textContent === "string" ) {return elem.textContent;} else {for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {ret += getText( elem );}}} else if ( nodeType === 3 || nodeType === 4 ) {return elem.nodeValue;}return ret;};Expr = Sizzle.selectors = {cacheLength: 50,createPseudo: markFunction,match: matchExpr,attrHandle: {},find: {},relative: {">": { dir: "parentNode", first: true }," ": { dir: "parentNode" },"+": { dir: "previousSibling", first: true },"~": { dir: "previousSibling" }},preFilter: {"ATTR": function( match ) {match[ 1 ] = match[ 1 ].replace( runescape, funescape );match[ 3 ] = ( match[ 3 ] || match[ 4 ] ||match[ 5 ] || "" ).replace( runescape, funescape );if ( match[ 2 ] === "~=" ) {match[ 3 ] = " " + match[ 3 ] + " ";}return match.slice( 0, 4 );},"CHILD": function( match ) {match[ 1 ] = match[ 1 ].toLowerCase();if ( match[ 1 ].slice( 0, 3 ) === "nth" ) {if ( !match[ 3 ] ) {Sizzle.error( match[ 0 ] );}match[ 4 ] = +( match[ 4 ] ?match[ 5 ] + ( match[ 6 ] || 1 ) :2 * ( match[ 3 ] === "even" || match[ 3 ] === "odd" ) );match[ 5 ] = +( ( match[ 7 ] + match[ 8 ] ) || match[ 3 ] === "odd" );} else if ( match[ 3 ] ) {Sizzle.error( match[ 0 ] );}return match;},"PSEUDO": function( match ) {var excess,unquoted = !match[ 6 ] && match[ 2 ];if ( matchExpr[ "CHILD" ].test( match[ 0 ] ) ) {return null;}if ( match[ 3 ] ) {match[ 2 ] = match[ 4 ] || match[ 5 ] || "";} else if ( unquoted && rpseudo.test( unquoted ) &&( excess = tokenize( unquoted, true ) ) &&( excess = unquoted.indexOf( ")", unquoted.length - excess ) - unquoted.length ) ) {match[ 0 ] = match[ 0 ].slice( 0, excess );match[ 2 ] = unquoted.slice( 0, excess );}return match.slice( 0, 3 );}},filter: {"TAG": function( nodeNameSelector ) {var nodeName = nodeNameSelector.replace( runescape, funescape ).toLowerCase();return nodeNameSelector === "*" ?function() {return true;} :function( elem ) {return elem.nodeName && elem.nodeName.toLowerCase() === nodeName;};},"CLASS": function( className ) {var pattern = classCache[ className + " " ];return pattern ||( pattern = new RegExp( "(^|" + whitespace +")" + className + "(" + whitespace + "|$)" ) ) && classCache(className, function( elem ) {return pattern.test(typeof elem.className === "string" && elem.className ||typeof elem.getAttribute !== "undefined" &&elem.getAttribute( "class" ) ||"");} );},"ATTR": function( name, operator, check ) {return function( elem ) {var result = Sizzle.attr( elem, name );if ( result == null ) {return operator === "!=";}if ( !operator ) {return true;}result += "";return operator === "=" ? result === check :operator === "!=" ? result !== check :operator === "^=" ? check && result.indexOf( check ) === 0 :operator === "*=" ? check && result.indexOf( check ) > -1 :operator === "$=" ? check && result.slice( -check.length ) === check :operator === "~=" ? ( " " + result.replace( rwhitespace, " " ) + " " ).indexOf( check ) > -1 :operator === "|=" ? result === check || result.slice( 0, check.length + 1 ) === check + "-" :false;};},"CHILD": function( type, what, _argument, first, last ) {var simple = type.slice( 0, 3 ) !== "nth",forward = type.slice( -4 ) !== "last",ofType = what === "of-type";return first === 1 && last === 0 ?function( elem ) {return !!elem.parentNode;} :function( elem, _context, xml ) {var cache, uniqueCache, outerCache, node, nodeIndex, start,dir = simple !== forward ? "nextSibling" : "previousSibling",parent = elem.parentNode,name = ofType && elem.nodeName.toLowerCase(),useCache = !xml && !ofType,diff = false;if ( parent ) {if ( simple ) {while ( dir ) {node = elem;while ( ( node = node[ dir ] ) ) {if ( ofType ?node.nodeName.toLowerCase() === name :node.nodeType === 1 ) {return false;}}start = dir = type === "only" && !start && "nextSibling";}return true;}start = [ forward ? parent.firstChild : parent.lastChild ];if ( forward && useCache ) {node = parent;outerCache = node[ expando ] || ( node[ expando ] = {} );uniqueCache = outerCache[ node.uniqueID ] ||( outerCache[ node.uniqueID ] = {} );cache = uniqueCache[ type ] || [];nodeIndex = cache[ 0 ] === dirruns && cache[ 1 ];diff = nodeIndex && cache[ 2 ];node = nodeIndex && parent.childNodes[ nodeIndex ];while ( ( node = ++nodeIndex && node && node[ dir ] ||( diff = nodeIndex = 0 ) || start.pop() ) ) {if ( node.nodeType === 1 && ++diff && node === elem ) {uniqueCache[ type ] = [ dirruns, nodeIndex, diff ];break;}}} else {if ( useCache ) {node = elem;outerCache = node[ expando ] || ( node[ expando ] = {} );uniqueCache = outerCache[ node.uniqueID ] ||( outerCache[ node.uniqueID ] = {} );cache = uniqueCache[ type ] || [];nodeIndex = cache[ 0 ] === dirruns && cache[ 1 ];diff = nodeIndex;}if ( diff === false ) {while ( ( node = ++nodeIndex && node && node[ dir ] ||( diff = nodeIndex = 0 ) || start.pop() ) ) {if ( ( ofType ?node.nodeName.toLowerCase() === name :node.nodeType === 1 ) &&++diff ) {if ( useCache ) {outerCache = node[ expando ] ||( node[ expando ] = {} );uniqueCache = outerCache[ node.uniqueID ] ||( outerCache[ node.uniqueID ] = {} );uniqueCache[ type ] = [ dirruns, diff ];}if ( node === elem ) {break;}}}}}diff -= last;return diff === first || ( diff % first === 0 && diff / first >= 0 );}};},"PSEUDO": function( pseudo, argument ) {var args,fn = Expr.pseudos[ pseudo ] || Expr.setFilters[ pseudo.toLowerCase() ] ||Sizzle.error( "unsupported pseudo: " + pseudo );if ( fn[ expando ] ) {return fn( argument );}if ( fn.length > 1 ) {args = [ pseudo, pseudo, "", argument ];return Expr.setFilters.hasOwnProperty( pseudo.toLowerCase() ) ?markFunction( function( seed, matches ) {var idx,matched = fn( seed, argument ),i = matched.length;while ( i-- ) {idx = indexOf( seed, matched[ i ] );seed[ idx ] = !( matches[ idx ] = matched[ i ] );}} ) :function( elem ) {return fn( elem, 0, args );};}return fn;}},pseudos: {"not": markFunction( function( selector ) {var input = [],results = [],matcher = compile( selector.replace( rtrim, "$1" ) );return matcher[ expando ] ?markFunction( function( seed, matches, _context, xml ) {var elem,unmatched = matcher( seed, null, xml, [] ),i = seed.length;while ( i-- ) {if ( ( elem = unmatched[ i ] ) ) {seed[ i ] = !( matches[ i ] = elem );}}} ) :function( elem, _context, xml ) {input[ 0 ] = elem;matcher( input, null, xml, results );input[ 0 ] = null;return !results.pop();};} ),"has": markFunction( function( selector ) {return function( elem ) {return Sizzle( selector, elem ).length > 0;};} ),"contains": markFunction( function( text ) {text = text.replace( runescape, funescape );return function( elem ) {return ( elem.textContent || getText( elem ) ).indexOf( text ) > -1;};} ),"lang": markFunction( function( lang ) {if ( !ridentifier.test( lang || "" ) ) {Sizzle.error( "unsupported lang: " + lang );}lang = lang.replace( runescape, funescape ).toLowerCase();return function( elem ) {var elemLang;do {if ( ( elemLang = documentIsHTML ?elem.lang :elem.getAttribute( "xml:lang" ) || elem.getAttribute( "lang" ) ) ) {elemLang = elemLang.toLowerCase();return elemLang === lang || elemLang.indexOf( lang + "-" ) === 0;}} while ( ( elem = elem.parentNode ) && elem.nodeType === 1 );return false;};} ),"target": function( elem ) {var hash = window.location && window.location.hash;return hash && hash.slice( 1 ) === elem.id;},"root": function( elem ) {return elem === docElem;},"focus": function( elem ) {return elem === document.activeElement &&( !document.hasFocus || document.hasFocus() ) &&!!( elem.type || elem.href || ~elem.tabIndex );},"enabled": createDisabledPseudo( false ),"disabled": createDisabledPseudo( true ),"checked": function( elem ) {var nodeName = elem.nodeName.toLowerCase();return ( nodeName === "input" && !!elem.checked ) ||( nodeName === "option" && !!elem.selected );},"selected": function( elem ) {if ( elem.parentNode ) {elem.parentNode.selectedIndex;}return elem.selected === true;},"empty": function( elem ) {for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {if ( elem.nodeType < 6 ) {return false;}}return true;},"parent": function( elem ) {return !Expr.pseudos[ "empty" ]( elem );},"header": function( elem ) {return rheader.test( elem.nodeName );},"input": function( elem ) {return rinputs.test( elem.nodeName );},"button": function( elem ) {var name = elem.nodeName.toLowerCase();return name === "input" && elem.type === "button" || name === "button";},"text": function( elem ) {var attr;return elem.nodeName.toLowerCase() === "input" &&elem.type === "text" &&( ( attr = elem.getAttribute( "type" ) ) == null ||attr.toLowerCase() === "text" );},"first": createPositionalPseudo( function() {return [ 0 ];} ),"last": createPositionalPseudo( function( _matchIndexes, length ) {return [ length - 1 ];} ),"eq": createPositionalPseudo( function( _matchIndexes, length, argument ) {return [ argument < 0 ? argument + length : argument ];} ),"even": createPositionalPseudo( function( matchIndexes, length ) {var i = 0;for ( ; i < length; i += 2 ) {matchIndexes.push( i );}return matchIndexes;} ),"odd": createPositionalPseudo( function( matchIndexes, length ) {var i = 1;for ( ; i < length; i += 2 ) {matchIndexes.push( i );}return matchIndexes;} ),"lt": createPositionalPseudo( function( matchIndexes, length, argument ) {var i = argument < 0 ?argument + length :argument > length ?length :argument;for ( ; --i >= 0; ) {matchIndexes.push( i );}return matchIndexes;} ),"gt": createPositionalPseudo( function( matchIndexes, length, argument ) {var i = argument < 0 ? argument + length : argument;for ( ; ++i < length; ) {matchIndexes.push( i );}return matchIndexes;} )}};Expr.pseudos[ "nth" ] = Expr.pseudos[ "eq" ];for ( i in { radio: true, checkbox: true, file: true, password: true, image: true } ) {Expr.pseudos[ i ] = createInputPseudo( i );}for ( i in { submit: true, reset: true } ) {Expr.pseudos[ i ] = createButtonPseudo( i );}function setFilters() {}setFilters.prototype = Expr.filters = Expr.pseudos;Expr.setFilters = new setFilters();tokenize = Sizzle.tokenize = function( selector, parseOnly ) {var matched, match, tokens, type,soFar, groups, preFilters,cached = tokenCache[ selector + " " ];if ( cached ) {return parseOnly ? 0 : cached.slice( 0 );}soFar = selector;groups = [];preFilters = Expr.preFilter;while ( soFar ) {if ( !matched || ( match = rcomma.exec( soFar ) ) ) {if ( match ) {soFar = soFar.slice( match[ 0 ].length ) || soFar;}groups.push( ( tokens = [] ) );}matched = false;if ( ( match = rcombinators.exec( soFar ) ) ) {matched = match.shift();tokens.push( {value: matched,type: match[ 0 ].replace( rtrim, " " )} );soFar = soFar.slice( matched.length );}for ( type in Expr.filter ) {if ( ( match = matchExpr[ type ].exec( soFar ) ) && ( !preFilters[ type ] ||( match = preFilters[ type ]( match ) ) ) ) {matched = match.shift();tokens.push( {value: matched,type: type,matches: match} );soFar = soFar.slice( matched.length );}}if ( !matched ) {break;}}return parseOnly ?soFar.length :soFar ?Sizzle.error( selector ) :tokenCache( selector, groups ).slice( 0 );};function toSelector( tokens ) {var i = 0,len = tokens.length,selector = "";for ( ; i < len; i++ ) {selector += tokens[ i ].value;}return selector;}function addCombinator( matcher, combinator, base ) {var dir = combinator.dir,skip = combinator.next,key = skip || dir,checkNonElements = base && key === "parentNode",doneName = done++;return combinator.first ?function( elem, context, xml ) {while ( ( elem = elem[ dir ] ) ) {if ( elem.nodeType === 1 || checkNonElements ) {return matcher( elem, context, xml );}}return false;} :function( elem, context, xml ) {var oldCache, uniqueCache, outerCache,newCache = [ dirruns, doneName ];if ( xml ) {while ( ( elem = elem[ dir ] ) ) {if ( elem.nodeType === 1 || checkNonElements ) {if ( matcher( elem, context, xml ) ) {return true;}}}} else {while ( ( elem = elem[ dir ] ) ) {if ( elem.nodeType === 1 || checkNonElements ) {outerCache = elem[ expando ] || ( elem[ expando ] = {} );uniqueCache = outerCache[ elem.uniqueID ] ||( outerCache[ elem.uniqueID ] = {} );if ( skip && skip === elem.nodeName.toLowerCase() ) {elem = elem[ dir ] || elem;} else if ( ( oldCache = uniqueCache[ key ] ) &&oldCache[ 0 ] === dirruns && oldCache[ 1 ] === doneName ) {return ( newCache[ 2 ] = oldCache[ 2 ] );} else {uniqueCache[ key ] = newCache;if ( ( newCache[ 2 ] = matcher( elem, context, xml ) ) ) {return true;}}}}}return false;};}function elementMatcher( matchers ) {return matchers.length > 1 ?function( elem, context, xml ) {var i = matchers.length;while ( i-- ) {if ( !matchers[ i ]( elem, context, xml ) ) {return false;}}return true;} :matchers[ 0 ];}function multipleContexts( selector, contexts, results ) {var i = 0,len = contexts.length;for ( ; i < len; i++ ) {Sizzle( selector, contexts[ i ], results );}return results;}function condense( unmatched, map, filter, context, xml ) {var elem,newUnmatched = [],i = 0,len = unmatched.length,mapped = map != null;for ( ; i < len; i++ ) {if ( ( elem = unmatched[ i ] ) ) {if ( !filter || filter( elem, context, xml ) ) {newUnmatched.push( elem );if ( mapped ) {map.push( i );}}}}return newUnmatched;}function setMatcher( preFilter, selector, matcher, postFilter, postFinder, postSelector ) {if ( postFilter && !postFilter[ expando ] ) {postFilter = setMatcher( postFilter );}if ( postFinder && !postFinder[ expando ] ) {postFinder = setMatcher( postFinder, postSelector );}return markFunction( function( seed, results, context, xml ) {var temp, i, elem,preMap = [],postMap = [],preexisting = results.length,elems = seed || multipleContexts(selector || "*",context.nodeType ? [ context ] : context,[]),matcherIn = preFilter && ( seed || !selector ) ?condense( elems, preMap, preFilter, context, xml ) :elems,matcherOut = matcher ?postFinder || ( seed ? preFilter : preexisting || postFilter ) ?[] :results :matcherIn;if ( matcher ) {matcher( matcherIn, matcherOut, context, xml );}if ( postFilter ) {temp = condense( matcherOut, postMap );postFilter( temp, [], context, xml );i = temp.length;while ( i-- ) {if ( ( elem = temp[ i ] ) ) {matcherOut[ postMap[ i ] ] = !( matcherIn[ postMap[ i ] ] = elem );}}}if ( seed ) {if ( postFinder || preFilter ) {if ( postFinder ) {temp = [];i = matcherOut.length;while ( i-- ) {if ( ( elem = matcherOut[ i ] ) ) {temp.push( ( matcherIn[ i ] = elem ) );}}postFinder( null, ( matcherOut = [] ), temp, xml );}i = matcherOut.length;while ( i-- ) {if ( ( elem = matcherOut[ i ] ) &&( temp = postFinder ? indexOf( seed, elem ) : preMap[ i ] ) > -1 ) {seed[ temp ] = !( results[ temp ] = elem );}}}} else {matcherOut = condense(matcherOut === results ?matcherOut.splice( preexisting, matcherOut.length ) :matcherOut);if ( postFinder ) {postFinder( null, results, matcherOut, xml );} else {push.apply( results, matcherOut );}}} );}function matcherFromTokens( tokens ) {var checkContext, matcher, j,len = tokens.length,leadingRelative = Expr.relative[ tokens[ 0 ].type ],implicitRelative = leadingRelative || Expr.relative[ " " ],i = leadingRelative ? 1 : 0,matchContext = addCombinator( function( elem ) {return elem === checkContext;}, implicitRelative, true ),matchAnyContext = addCombinator( function( elem ) {return indexOf( checkContext, elem ) > -1;}, implicitRelative, true ),matchers = [ function( elem, context, xml ) {var ret = ( !leadingRelative && ( xml || context !== outermostContext ) ) || (( checkContext = context ).nodeType ?matchContext( elem, context, xml ) :matchAnyContext( elem, context, xml ) );checkContext = null;return ret;} ];for ( ; i < len; i++ ) {if ( ( matcher = Expr.relative[ tokens[ i ].type ] ) ) {matchers = [ addCombinator( elementMatcher( matchers ), matcher ) ];} else {matcher = Expr.filter[ tokens[ i ].type ].apply( null, tokens[ i ].matches );if ( matcher[ expando ] ) {j = ++i;for ( ; j < len; j++ ) {if ( Expr.relative[ tokens[ j ].type ] ) {break;}}return setMatcher(i > 1 && elementMatcher( matchers ),i > 1 && toSelector(tokens.slice( 0, i - 1 ).concat( { value: tokens[ i - 2 ].type === " " ? "*" : "" } )).replace( rtrim, "$1" ),matcher,i < j && matcherFromTokens( tokens.slice( i, j ) ),j < len && matcherFromTokens( ( tokens = tokens.slice( j ) ) ),j < len && toSelector( tokens ));}matchers.push( matcher );}}return elementMatcher( matchers );}function matcherFromGroupMatchers( elementMatchers, setMatchers ) {var bySet = setMatchers.length > 0,byElement = elementMatchers.length > 0,superMatcher = function( seed, context, xml, results, outermost ) {var elem, j, matcher,matchedCount = 0,i = "0",unmatched = seed && [],setMatched = [],contextBackup = outermostContext,elems = seed || byElement && Expr.find[ "TAG" ]( "*", outermost ),dirrunsUnique = ( dirruns += contextBackup == null ? 1 : Math.random() || 0.1 ),len = elems.length;if ( outermost ) {outermostContext = context == document || context || outermost;}for ( ; i !== len && ( elem = elems[ i ] ) != null; i++ ) {if ( byElement && elem ) {j = 0;if ( !context && elem.ownerDocument != document ) {setDocument( elem );xml = !documentIsHTML;}while ( ( matcher = elementMatchers[ j++ ] ) ) {if ( matcher( elem, context || document, xml ) ) {results.push( elem );break;}}if ( outermost ) {dirruns = dirrunsUnique;}}if ( bySet ) {if ( ( elem = !matcher && elem ) ) {matchedCount--;}if ( seed ) {unmatched.push( elem );}}}matchedCount += i;if ( bySet && i !== matchedCount ) {j = 0;while ( ( matcher = setMatchers[ j++ ] ) ) {matcher( unmatched, setMatched, context, xml );}if ( seed ) {if ( matchedCount > 0 ) {while ( i-- ) {if ( !( unmatched[ i ] || setMatched[ i ] ) ) {setMatched[ i ] = pop.call( results );}}}setMatched = condense( setMatched );}push.apply( results, setMatched );if ( outermost && !seed && setMatched.length > 0 &&( matchedCount + setMatchers.length ) > 1 ) {Sizzle.uniqueSort( results );}}if ( outermost ) {dirruns = dirrunsUnique;outermostContext = contextBackup;}return unmatched;};return bySet ?markFunction( superMatcher ) :superMatcher;}compile = Sizzle.compile = function( selector, match  ) {var i,setMatchers = [],elementMatchers = [],cached = compilerCache[ selector + " " ];if ( !cached ) {if ( !match ) {match = tokenize( selector );}i = match.length;while ( i-- ) {cached = matcherFromTokens( match[ i ] );if ( cached[ expando ] ) {setMatchers.push( cached );} else {elementMatchers.push( cached );}}cached = compilerCache(selector,matcherFromGroupMatchers( elementMatchers, setMatchers ));cached.selector = selector;}return cached;};select = Sizzle.select = function( selector, context, results, seed ) {var i, tokens, token, type, find,compiled = typeof selector === "function" && selector,match = !seed && tokenize( ( selector = compiled.selector || selector ) );results = results || [];if ( match.length === 1 ) {tokens = match[ 0 ] = match[ 0 ].slice( 0 );if ( tokens.length > 2 && ( token = tokens[ 0 ] ).type === "ID" &&context.nodeType === 9 && documentIsHTML && Expr.relative[ tokens[ 1 ].type ] ) {context = ( Expr.find[ "ID" ]( token.matches[ 0 ].replace( runescape, funescape ), context ) || [] )[ 0 ];if ( !context ) {return results;} else if ( compiled ) {context = context.parentNode;}selector = selector.slice( tokens.shift().value.length );}i = matchExpr[ "needsContext" ].test( selector ) ? 0 : tokens.length;while ( i-- ) {token = tokens[ i ];if ( Expr.relative[ ( type = token.type ) ] ) {break;}if ( ( find = Expr.find[ type ] ) ) {if ( ( seed = find(token.matches[ 0 ].replace( runescape, funescape ),rsibling.test( tokens[ 0 ].type ) && testContext( context.parentNode ) ||context) ) ) {tokens.splice( i, 1 );selector = seed.length && toSelector( tokens );if ( !selector ) {push.apply( results, seed );return results;}break;}}}}( compiled || compile( selector, match ) )(seed,context,!documentIsHTML,results,!context || rsibling.test( selector ) && testContext( context.parentNode ) || context);return results;};support.sortStable = expando.split( "" ).sort( sortOrder ).join( "" ) === expando;support.detectDuplicates = !!hasDuplicate;setDocument();support.sortDetached = assert( function( el ) {return el.compareDocumentPosition( document.createElement( "fieldset" ) ) & 1;} );if ( !assert( function( el ) {el.innerHTML = "<a href='' [20315;44445] 
String  ''></a>";return el.firstChild.getAttribute( "href" ) === "#";} ) ) {addHandle( "type|href|height|width", function( elem, name, isXML ) {if ( !isXML ) {return elem.getAttribute( name, name.toLowerCase() === "type" ? 1 : 2 );}} );}if ( !support.attributes || !assert( function( el ) {el.innerHTML = "<input/>";el.firstChild.setAttribute( "value", "" );return el.firstChild.getAttribute( "value" ) === "";} ) ) {addHandle( "value", function( elem, _name, isXML ) {if ( !isXML && elem.nodeName.toLowerCase() === "input" ) {return elem.defaultValue;}} );}if ( !assert( function( el ) {return el.getAttribute( "disabled" ) == null;} ) ) {addHandle( booleans, function( elem, name, isXML ) {var val;if ( !isXML ) {return elem[ name ] === true ? name.toLowerCase() :( val = elem.getAttributeNode( name ) ) && val.specified ?val.value :null;}} );}return Sizzle;} )( window );jQuery.find = Sizzle;jQuery.expr = Sizzle.selectors;jQuery.expr[ ":" ] = jQuery.expr.pseudos;jQuery.uniqueSort = jQuery.unique = Sizzle.uniqueSort;jQuery.text = Sizzle.getText;jQuery.isXMLDoc = Sizzle.isXML;jQuery.contains = Sizzle.contains;jQuery.escapeSelector = Sizzle.escape;var dir = function( elem, dir, until ) {var matched = [],truncate = until !== undefined;while ( ( elem = elem[ dir ] ) && elem.nodeType !== 9 ) {if ( elem.nodeType === 1 ) {if ( truncate && jQuery( elem ).is( until ) ) {break;}matched.push( elem );}}return matched;};var siblings = function( n, elem ) {var matched = [];for ( ; n; n = n.nextSibling ) {if ( n.nodeType === 1 && n !== elem ) {matched.push( n );}}return matched;};var rneedsContext = jQuery.expr.match.needsContext;function nodeName( elem, name ) {return elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase();}var rsingleTag = ( /^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i );function winnow( elements, qualifier, not ) {if ( isFunction( qualifier ) ) {return jQuery.grep( elements, function( elem, i ) {return !!qualifier.call( elem, i, elem ) !== not;} );}if ( qualifier.nodeType ) {return jQuery.grep( elements, function( elem ) {return ( elem === qualifier ) !== not;} );}if ( typeof qualifier !== "string" ) {return jQuery.grep( elements, function( elem ) {return ( indexOf.call( qualifier, elem ) > -1 ) !== not;} );}return jQuery.filter( qualifier, elements, not );}jQuery.filter = function( expr, elems, not ) {var elem = elems[ 0 ];if ( not ) {expr = ":not(" + expr + ")";}if ( elems.length === 1 && elem.nodeType === 1 ) {return jQuery.find.matchesSelector( elem, expr ) ? [ elem ] : [];}return jQuery.find.matches( expr, jQuery.grep( elems, function( elem ) {return elem.nodeType === 1;} ) );};jQuery.fn.extend( {find: function( selector ) {var i, ret,len = this.length,self = this;if ( typeof selector !== "string" ) {return this.pushStack( jQuery( selector ).filter( function() {for ( i = 0; i < len; i++ ) {if ( jQuery.contains( self[ i ], this ) ) {return true;}}} ) );}ret = this.pushStack( [] );for ( i = 0; i < len; i++ ) {jQuery.find( selector, self[ i ], ret );}return len > 1 ? jQuery.uniqueSort( ret ) : ret;},filter: function( selector ) {return this.pushStack( winnow( this, selector || [], false ) );},not: function( selector ) {return this.pushStack( winnow( this, selector || [], true ) );},is: function( selector ) {return !!winnow(this,typeof selector === "string" && rneedsContext.test( selector ) ?jQuery( selector ) :selector || [],false).length;}} );var rootjQuery,rquickExpr = /^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/,init = jQuery.fn.init = function( selector, context, root ) {var match, elem;if ( !selector ) {return this;}root = root || rootjQuery;if ( typeof selector === "string" ) {if ( selector[ 0 ] === "<" &&selector[ selector.length - 1 ] === ">" &&selector.length >= 3 ) {match = [ null, selector, null ];} else {match = rquickExpr.exec( selector );}if ( match && ( match[ 1 ] || !context ) ) {if ( match[ 1 ] ) {context = context instanceof jQuery ? context[ 0 ] : context;jQuery.merge( this, jQuery.parseHTML(match[ 1 ],context && context.nodeType ? context.ownerDocument || context : document,true) );if ( rsingleTag.test( match[ 1 ] ) && jQuery.isPlainObject( context ) ) {for ( match in context ) {if ( isFunction( this[ match ] ) ) {this[ match ]( context[ match ] );} else {this.attr( match, context[ match ] );}}}return this;} else {elem = document.getElementById( match[ 2 ] );if ( elem ) {this[ 0 ] = elem;this.length = 1;}return this;}} else if ( !context || context.jquery ) {return ( context || root ).find( selector );} else {return this.constructor( context ).find( selector );}} else if ( selector.nodeType ) {this[ 0 ] = selector;this.length = 1;return this;} else if ( isFunction( selector ) ) {return root.ready !== undefined ?root.ready( selector ) :selector( jQuery );}return jQuery.makeArray( selector, this );};init.prototype = jQuery.fn;rootjQuery = jQuery( document );var rparentsprev = /^(?:parents|prev(?:Until|All))/,guaranteedUnique = {children: true,contents: true,next: true,prev: true};jQuery.fn.extend( {has: function( target ) {var targets = jQuery( target, this ),l = targets.length;return this.filter( function() {var i = 0;for ( ; i < l; i++ ) {if ( jQuery.contains( this, targets[ i ] ) ) {return true;}}} );},closest: function( selectors, context ) {var cur,i = 0,l = this.length,matched = [],targets = typeof selectors !== "string" && jQuery( selectors );if ( !rneedsContext.test( selectors ) ) {for ( ; i < l; i++ ) {for ( cur = this[ i ]; cur && cur !== context; cur = cur.parentNode ) {if ( cur.nodeType < 11 && ( targets ?targets.index( cur ) > -1 :cur.nodeType === 1 &&jQuery.find.matchesSelector( cur, selectors ) ) ) {matched.push( cur );break;}}}}return this.pushStack( matched.length > 1 ? jQuery.uniqueSort( matched ) : matched );},index: function( elem ) {if ( !elem ) {return ( this[ 0 ] && this[ 0 ].parentNode ) ? this.first().prevAll().length : -1;}if ( typeof elem === "string" ) {return indexOf.call( jQuery( elem ), this[ 0 ] );}return indexOf.call( this,elem.jquery ? elem[ 0 ] : elem);},add: function( selector, context ) {return this.pushStack(jQuery.uniqueSort(jQuery.merge( this.get(), jQuery( selector, context ) )));},addBack: function( selector ) {return this.add( selector == null ?this.prevObject : this.prevObject.filter( selector ));}} );function sibling( cur, dir ) {while ( ( cur = cur[ dir ] ) && cur.nodeType !== 1 ) {}return cur;}jQuery.each( {parent: function( elem ) {var parent = elem.parentNode;return parent && parent.nodeType !== 11 ? parent : null;},parents: function( elem ) {return dir( elem, "parentNode" );},parentsUntil: function( elem, _i, until ) {return dir( elem, "parentNode", until );},next: function( elem ) {return sibling( elem, "nextSibling" );},prev: function( elem ) {return sibling( elem, "previousSibling" );},nextAll: function( elem ) {return dir( elem, "nextSibling" );},prevAll: function( elem ) {return dir( elem, "previousSibling" );},nextUntil: function( elem, _i, until ) {return dir( elem, "nextSibling", until );},prevUntil: function( elem, _i, until ) {return dir( elem, "previousSibling", until );},siblings: function( elem ) {return siblings( ( elem.parentNode || {} ).firstChild, elem );},children: function( elem ) {return siblings( elem.firstChild );},contents: function( elem ) {if ( elem.contentDocument != null &&getProto( elem.contentDocument ) ) {return elem.contentDocument;}if ( nodeName( elem, "template" ) ) {elem = elem.content || elem;}return jQuery.merge( [], elem.childNodes );}}, function( name, fn ) {jQuery.fn[ name ] = function( until, selector ) {var matched = jQuery.map( this, fn, until );if ( name.slice( -5 ) !== "Until" ) {selector = until;}if ( selector && typeof selector === "string" ) {matched = jQuery.filter( selector, matched );}if ( this.length > 1 ) {if ( !guaranteedUnique[ name ] ) {jQuery.uniqueSort( matched );}if ( rparentsprev.test( name ) ) {matched.reverse();}}return this.pushStack( matched );};} );var rnothtmlwhite = ( /[^\x20\t\r\n\f]+/g );function createOptions( options ) {var object = {};jQuery.each( options.match( rnothtmlwhite ) || [], function( _, flag ) {object[ flag ] = true;} );return object;}jQuery.Callbacks = function( options ) {options = typeof options === "string" ?createOptions( options ) :jQuery.extend( {}, options );varfiring,memory,fired,locked,list = [],queue = [],firingIndex = -1,fire = function() {locked = locked || options.once;fired = firing = true;for ( ; queue.length; firingIndex = -1 ) {memory = queue.shift();while ( ++firingIndex < list.length ) {if ( list[ firingIndex ].apply( memory[ 0 ], memory[ 1 ] ) === false &&options.stopOnFalse ) {firingIndex = list.length;memory = false;}}}if ( !options.memory ) {memory = false;}firing = false;if ( locked ) {if ( memory ) {list = [];} else {list = "";}}},self = {add: function() {if ( list ) {if ( memory && !firing ) {firingIndex = list.length - 1;queue.push( memory );}( function add( args ) {jQuery.each( args, function( _, arg ) {if ( isFunction( arg ) ) {if ( !options.unique || !self.has( arg ) ) {list.push( arg );}} else if ( arg && arg.length && toType( arg ) !== "string" ) {add( arg );}} );} )( arguments );if ( memory && !firing ) {fire();}}return this;},remove: function() {jQuery.each( arguments, function( _, arg ) {var index;while ( ( index = jQuery.inArray( arg, list, index ) ) > -1 ) {list.splice( index, 1 );if ( index <= firingIndex ) {firingIndex--;}}} );return this;},has: function( fn ) {return fn ?jQuery.inArray( fn, list ) > -1 :list.length > 0;},empty: function() {if ( list ) {list = [];}return this;},disable: function() {locked = queue = [];list = memory = "";return this;},disabled: function() {return !list;},lock: function() {locked = queue = [];if ( !memory && !firing ) {list = memory = "";}return this;},locked: function() {return !!locked;},fireWith: function( context, args ) {if ( !locked ) {args = args || [];args = [ context, args.slice ? args.slice() : args ];queue.push( args );if ( !firing ) {fire();}}return this;},fire: function() {self.fireWith( this, arguments );return this;},fired: function() {return !!fired;}};return self;};function Identity( v ) {return v;}function Thrower( ex ) {throw ex;}function adoptValue( value, resolve, reject, noValue ) {var method;try {if ( value && isFunction( ( method = value.promise ) ) ) {method.call( value ).done( resolve ).fail( reject );} else if ( value && isFunction( ( method = value.then ) ) ) {method.call( value, resolve, reject );} else {resolve.apply( undefined, [ value ].slice( noValue ) );}} catch ( value ) {reject.apply( undefined, [ value ] );}}jQuery.extend( {Deferred: function( func ) {var tuples = [[ "notify", "progress", jQuery.Callbacks( "memory" ),jQuery.Callbacks( "memory" ), 2 ],[ "resolve", "done", jQuery.Callbacks( "once memory" ),jQuery.Callbacks( "once memory" ), 0, "resolved" ],[ "reject", "fail", jQuery.Callbacks( "once memory" ),jQuery.Callbacks( "once memory" ), 1, "rejected" ]],state = "pending",promise = {state: function() {return state;},always: function() {deferred.done( arguments ).fail( arguments );return this;},"catch": function( fn ) {return promise.then( null, fn );},pipe: function(  ) {var fns = arguments;return jQuery.Deferred( function( newDefer ) {jQuery.each( tuples, function( _i, tuple ) {var fn = isFunction( fns[ tuple[ 4 ] ] ) && fns[ tuple[ 4 ] ];deferred[ tuple[ 1 ] ]( function() {var returned = fn && fn.apply( this, arguments );if ( returned && isFunction( returned.promise ) ) {returned.promise().progress( newDefer.notify ).done( newDefer.resolve ).fail( newDefer.reject );} else {newDefer[ tuple[ 0 ] + "With" ](this,fn ? [ returned ] : arguments);}} );} );fns = null;} ).promise();},then: function( onFulfilled, onRejected, onProgress ) {var maxDepth = 0;function resolve( depth, deferred, handler, special ) {return function() {var that = this,args = arguments,mightThrow = function() {var returned, then;if ( depth < maxDepth ) {return;}returned = handler.apply( that, args );if ( returned === deferred.promise() ) {throw new TypeError( "Thenable self-resolution" );}then = returned &&( typeof returned === "object" ||typeof returned === "function" ) &&returned.then;if ( isFunction( then ) ) {if ( special ) {then.call(returned,resolve( maxDepth, deferred, Identity, special ),resolve( maxDepth, deferred, Thrower, special ));} else {maxDepth++;then.call(returned,resolve( maxDepth, deferred, Identity, special ),resolve( maxDepth, deferred, Thrower, special ),resolve( maxDepth, deferred, Identity,deferred.notifyWith ));}} else {if ( handler !== Identity ) {that = undefined;args = [ returned ];}( special || deferred.resolveWith )( that, args );}},process = special ?mightThrow :function() {try {mightThrow();} catch ( e ) {if ( jQuery.Deferred.exceptionHook ) {jQuery.Deferred.exceptionHook( e,process.stackTrace );}if ( depth + 1 >= maxDepth ) {if ( handler !== Thrower ) {that = undefined;args = [ e ];}deferred.rejectWith( that, args );}}};if ( depth ) {process();} else {if ( jQuery.Deferred.getStackHook ) {process.stackTrace = jQuery.Deferred.getStackHook();}window.setTimeout( process );}};}return jQuery.Deferred( function( newDefer ) {tuples[ 0 ][ 3 ].add(resolve(0,newDefer,isFunction( onProgress ) ?onProgress :Identity,newDefer.notifyWith));tuples[ 1 ][ 3 ].add(resolve(0,newDefer,isFunction( onFulfilled ) ?onFulfilled :Identity));tuples[ 2 ][ 3 ].add(resolve(0,newDefer,isFunction( onRejected ) ?onRejected :Thrower));} ).promise();},promise: function( obj ) {return obj != null ? jQuery.extend( obj, promise ) : promise;}},deferred = {};jQuery.each( tuples, function( i, tuple ) {var list = tuple[ 2 ],stateString = tuple[ 5 ];promise[ tuple[ 1 ] ] = list.add;if ( stateString ) {list.add(function() {state = stateString;},tuples[ 3 - i ][ 2 ].disable,tuples[ 3 - i ][ 3 ].disable,tuples[ 0 ][ 2 ].lock,tuples[ 0 ][ 3 ].lock);}list.add( tuple[ 3 ].fire );deferred[ tuple[ 0 ] ] = function() {deferred[ tuple[ 0 ] + "With" ]( this === deferred ? undefined : this, arguments );return this;};deferred[ tuple[ 0 ] + "With" ] = list.fireWith;} );promise.promise( deferred );if ( func ) {func.call( deferred, deferred );}return deferred;},when: function( singleValue ) {varremaining = arguments.length,i = remaining,resolveContexts = Array( i ),resolveValues = slice.call( arguments ),primary = jQuery.Deferred(),updateFunc = function( i ) {return function( value ) {resolveContexts[ i ] = this;resolveValues[ i ] = arguments.length > 1 ? slice.call( arguments ) : value;if ( !( --remaining ) ) {primary.resolveWith( resolveContexts, resolveValues );}};};if ( remaining <= 1 ) {adoptValue( singleValue, primary.done( updateFunc( i ) ).resolve, primary.reject,!remaining );if ( primary.state() === "pending" ||isFunction( resolveValues[ i ] && resolveValues[ i ].then ) ) {return primary.then();}}while ( i-- ) {adoptValue( resolveValues[ i ], updateFunc( i ), primary.reject );}return primary.promise();}} );var rerrorNames = /^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;jQuery.Deferred.exceptionHook = function( error, stack ) {if ( window.console && window.console.warn && error && rerrorNames.test( error.name ) ) {window.console.warn( "jQuery.Deferred exception: " + error.message, error.stack, stack );}};jQuery.readyException = function( error ) {window.setTimeout( function() {throw error;} );};var readyList = jQuery.Deferred();jQuery.fn.ready = function( fn ) {readyList.then( fn ).catch( function( error ) {jQuery.readyException( error );} );return this;};jQuery.extend( {isReady: false,readyWait: 1,ready: function( wait ) {if ( wait === true ? --jQuery.readyWait : jQuery.isReady ) {return;}jQuery.isReady = true;if ( wait !== true && --jQuery.readyWait > 0 ) {return;}readyList.resolveWith( document, [ jQuery ] );}} );jQuery.ready.then = readyList.then;function completed() {document.removeEventListener( "DOMContentLoaded", completed );window.removeEventListener( "load", completed );jQuery.ready();}if ( document.readyState === "complete" ||( document.readyState !== "loading" && !document.documentElement.doScroll ) ) {window.setTimeout( jQuery.ready );} else {document.addEventListener( "DOMContentLoaded", completed );window.addEventListener( "load", completed );}var access = function( elems, fn, key, value, chainable, emptyGet, raw ) {var i = 0,len = elems.length,bulk = key == null;if ( toType( key ) === "object" ) {chainable = true;for ( i in key ) {access( elems, fn, i, key[ i ], true, emptyGet, raw );}} else if ( value !== undefined ) {chainable = true;if ( !isFunction( value ) ) {raw = true;}if ( bulk ) {if ( raw ) {fn.call( elems, value );fn = null;} else {bulk = fn;fn = function( elem, _key, value ) {return bulk.call( jQuery( elem ), value );};}}if ( fn ) {for ( ; i < len; i++ ) {fn(elems[ i ], key, raw ?value :value.call( elems[ i ], i, fn( elems[ i ], key ) ));}}}if ( chainable ) {return elems;}if ( bulk ) {return fn.call( elems );}return len ? fn( elems[ 0 ], key ) : emptyGet;};var rmsPrefix = /^-ms-/,rdashAlpha = /-([a-z])/g;function fcamelCase( _all, letter ) {return letter.toUpperCase();}function camelCase( string ) {return string.replace( rmsPrefix, "ms-" ).replace( rdashAlpha, fcamelCase );}var acceptData = function( owner ) {return owner.nodeType === 1 || owner.nodeType === 9 || !( +owner.nodeType );};function Data() {this.expando = jQuery.expando + Data.uid++;}Data.uid = 1;Data.prototype = {cache: function( owner ) {var value = owner[ this.expando ];if ( !value ) {value = {};if ( acceptData( owner ) ) {if ( owner.nodeType ) {owner[ this.expando ] = value;} else {Object.defineProperty( owner, this.expando, {value: value,configurable: true} );}}}return value;},set: function( owner, data, value ) {var prop,cache = this.cache( owner );if ( typeof data === "string" ) {cache[ camelCase( data ) ] = value;} else {for ( prop in data ) {cache[ camelCase( prop ) ] = data[ prop ];}}return cache;},get: function( owner, key ) {return key === undefined ?this.cache( owner ) :owner[ this.expando ] && owner[ this.expando ][ camelCase( key ) ];},access: function( owner, key, value ) {if ( key === undefined ||( ( key && typeof key === "string" ) && value === undefined ) ) {return this.get( owner, key );}this.set( owner, key, value );return value !== undefined ? value : key;},remove: function( owner, key ) {var i,cache = owner[ this.expando ];if ( cache === undefined ) {return;}if ( key !== undefined ) {if ( Array.isArray( key ) ) {key = key.map( camelCase );} else {key = camelCase( key );key = key in cache ?[ key ] :( key.match( rnothtmlwhite ) || [] );}i = key.length;while ( i-- ) {delete cache[ key[ i ] ];}}if ( key === undefined || jQuery.isEmptyObject( cache ) ) {if ( owner.nodeType ) {owner[ this.expando ] = undefined;} else {delete owner[ this.expando ];}}},hasData: function( owner ) {var cache = owner[ this.expando ];return cache !== undefined && !jQuery.isEmptyObject( cache );}};var dataPriv = new Data();var dataUser = new Data();var rbrace = /^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,rmultiDash = /[A-Z]/g;function getData( data ) {if ( data === "true" ) {return true;}if ( data === "false" ) {return false;}if ( data === "null" ) {return null;}if ( data === +data + "" ) {return +data;}if ( rbrace.test( data ) ) {return JSON.parse( data );}return data;}function dataAttr( elem, key, data ) {var name;if ( data === undefined && elem.nodeType === 1 ) {name = "data-" + key.replace( rmultiDash, "-$&" ).toLowerCase();data = elem.getAttribute( name );if ( typeof data === "string" ) {try {data = getData( data );} catch ( e ) {}dataUser.set( elem, key, data );} else {data = undefined;}}return data;}jQuery.extend( {hasData: function( elem ) {return dataUser.hasData( elem ) || dataPriv.hasData( elem );},data: function( elem, name, data ) {return dataUser.access( elem, name, data );},removeData: function( elem, name ) {dataUser.remove( elem, name );},_data: function( elem, name, data ) {return dataPriv.access( elem, name, data );},_removeData: function( elem, name ) {dataPriv.remove( elem, name );}} );jQuery.fn.extend( {data: function( key, value ) {var i, name, data,elem = this[ 0 ],attrs = elem && elem.attributes;if ( key === undefined ) {if ( this.length ) {data = dataUser.get( elem );if ( elem.nodeType === 1 && !dataPriv.get( elem, "hasDataAttrs" ) ) {i = attrs.length;while ( i-- ) {if ( attrs[ i ] ) {name = attrs[ i ].name;if ( name.indexOf( "data-" ) === 0 ) {name = camelCase( name.slice( 5 ) );dataAttr( elem, name, data[ name ] );}}}dataPriv.set( elem, "hasDataAttrs", true );}}return data;}if ( typeof key === "object" ) {return this.each( function() {dataUser.set( this, key );} );}return access( this, function( value ) {var data;if ( elem && value === undefined ) {data = dataUser.get( elem, key );if ( data !== undefined ) {return data;}data = dataAttr( elem, key );if ( data !== undefined ) {return data;}return;}this.each( function() {dataUser.set( this, key, value );} );}, null, value, arguments.length > 1, null, true );},removeData: function( key ) {return this.each( function() {dataUser.remove( this, key );} );}} );jQuery.extend( {queue: function( elem, type, data ) {var queue;if ( elem ) {type = ( type || "fx" ) + "queue";queue = dataPriv.get( elem, type );if ( data ) {if ( !queue || Array.isArray( data ) ) {queue = dataPriv.access( elem, type, jQuery.makeArray( data ) );} else {queue.push( data );}}return queue || [];}},dequeue: function( elem, type ) {type = type || "fx";var queue = jQuery.queue( elem, type ),startLength = queue.length,fn = queue.shift(),hooks = jQuery._queueHooks( elem, type ),next = function() {jQuery.dequeue( elem, type );};if ( fn === "inprogress" ) {fn = queue.shift();startLength--;}if ( fn ) {if ( type === "fx" ) {queue.unshift( "inprogress" );}delete hooks.stop;fn.call( elem, next, hooks );}if ( !startLength && hooks ) {hooks.empty.fire();}},_queueHooks: function( elem, type ) {var key = type + "queueHooks";return dataPriv.get( elem, key ) || dataPriv.access( elem, key, {empty: jQuery.Callbacks( "once memory" ).add( function() {dataPriv.remove( elem, [ type + "queue", key ] );} )} );}} );jQuery.fn.extend( {queue: function( type, data ) {var setter = 2;if ( typeof type !== "string" ) {data = type;type = "fx";setter--;}if ( arguments.length < setter ) {return jQuery.queue( this[ 0 ], type );}return data === undefined ?this :this.each( function() {var queue = jQuery.queue( this, type, data );jQuery._queueHooks( this, type );if ( type === "fx" && queue[ 0 ] !== "inprogress" ) {jQuery.dequeue( this, type );}} );},dequeue: function( type ) {return this.each( function() {jQuery.dequeue( this, type );} );},clearQueue: function( type ) {return this.queue( type || "fx", [] );},promise: function( type, obj ) {var tmp,count = 1,defer = jQuery.Deferred(),elements = this,i = this.length,resolve = function() {if ( !( --count ) ) {defer.resolveWith( elements, [ elements ] );}};if ( typeof type !== "string" ) {obj = type;type = undefined;}type = type || "fx";while ( i-- ) {tmp = dataPriv.get( elements[ i ], type + "queueHooks" );if ( tmp && tmp.empty ) {count++;tmp.empty.add( resolve );}}resolve();return defer.promise( obj );}} );var pnum = ( /[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/ ).source;var rcssNum = new RegExp( "^(?:([+-])=|)(" + pnum + ")([a-z%]*)$", "i" );var cssExpand = [ "Top", "Right", "Bottom", "Left" ];var documentElement = document.documentElement;var isAttached = function( elem ) {return jQuery.contains( elem.ownerDocument, elem );},composed = { composed: true };if ( documentElement.getRootNode ) {isAttached = function( elem ) {return jQuery.contains( elem.ownerDocument, elem ) ||elem.getRootNode( composed ) === elem.ownerDocument;};}var isHiddenWithinTree = function( elem, el ) {elem = el || elem;return elem.style.display === "none" ||elem.style.display === "" &&isAttached( elem ) &&jQuery.css( elem, "display" ) === "none";};function adjustCSS( elem, prop, valueParts, tween ) {var adjusted, scale,maxIterations = 20,currentValue = tween ?function() {return tween.cur();} :function() {return jQuery.css( elem, prop, "" );},initial = currentValue(),unit = valueParts && valueParts[ 3 ] || ( jQuery.cssNumber[ prop ] ? "" : "px" ),initialInUnit = elem.nodeType &&( jQuery.cssNumber[ prop ] || unit !== "px" && +initial ) &&rcssNum.exec( jQuery.css( elem, prop ) );if ( initialInUnit && initialInUnit[ 3 ] !== unit ) {initial = initial / 2;unit = unit || initialInUnit[ 3 ];initialInUnit = +initial || 1;while ( maxIterations-- ) {jQuery.style( elem, prop, initialInUnit + unit );if ( ( 1 - scale ) * ( 1 - ( scale = currentValue() / initial || 0.5 ) ) <= 0 ) {maxIterations = 0;}initialInUnit = initialInUnit / scale;}initialInUnit = initialInUnit * 2;jQuery.style( elem, prop, initialInUnit + unit );valueParts = valueParts || [];}if ( valueParts ) {initialInUnit = +initialInUnit || +initial || 0;adjusted = valueParts[ 1 ] ?initialInUnit + ( valueParts[ 1 ] + 1 ) * valueParts[ 2 ] :+valueParts[ 2 ];if ( tween ) {tween.unit = unit;tween.start = initialInUnit;tween.end = adjusted;}}return adjusted;}var defaultDisplayMap = {};function getDefaultDisplay( elem ) {var temp,doc = elem.ownerDocument,nodeName = elem.nodeName,display = defaultDisplayMap[ nodeName ];if ( display ) {return display;}temp = doc.body.appendChild( doc.createElement( nodeName ) );display = jQuery.css( temp, "display" );temp.parentNode.removeChild( temp );if ( display === "none" ) {display = "block";}defaultDisplayMap[ nodeName ] = display;return display;}function showHide( elements, show ) {var display, elem,values = [],index = 0,length = elements.length;for ( ; index < length; index++ ) {elem = elements[ index ];if ( !elem.style ) {continue;}display = elem.style.display;if ( show ) {if ( display === "none" ) {values[ index ] = dataPriv.get( elem, "display" ) || null;if ( !values[ index ] ) {elem.style.display = "";}}if ( elem.style.display === "" && isHiddenWithinTree( elem ) ) {values[ index ] = getDefaultDisplay( elem );}} else {if ( display !== "none" ) {values[ index ] = "none";dataPriv.set( elem, "display", display );}}}for ( index = 0; index < length; index++ ) {if ( values[ index ] != null ) {elements[ index ].style.display = values[ index ];}}return elements;}jQuery.fn.extend( {show: function() {return showHide( this, true );},hide: function() {return showHide( this );},toggle: function( state ) {if ( typeof state === "boolean" ) {return state ? this.show() : this.hide();}return this.each( function() {if ( isHiddenWithinTree( this ) ) {jQuery( this ).show();} else {jQuery( this ).hide();}} );}} );var rcheckableType = ( /^(?:checkbox|radio)$/i );var rtagName = ( /<([a-z][^\/\0>\x20\t\r\n\f]*)/i );var rscriptType = ( /^$|^module$|\/(?:java|ecma)script/i );( function() {var fragment = document.createDocumentFragment(),div = fragment.appendChild( document.createElement( "div" ) ),input = document.createElement( "input" );input.setAttribute( "type", "radio" );input.setAttribute( "checked", "checked" );input.setAttribute( "name", "t" );div.appendChild( input );support.checkClone = div.cloneNode( true ).cloneNode( true ).lastChild.checked;div.innerHTML = "<textarea>x</textarea>";support.noCloneChecked = !!div.cloneNode( true ).lastChild.defaultValue;div.innerHTML = "<option></option>";support.option = !!div.lastChild;} )();var wrapMap = {thead: [ 1, "<table>", "</table>" ],col: [ 2, "<table><colgroup>", "</colgroup></table>" ],tr: [ 2, "<table><tbody>", "</tbody></table>" ],td: [ 3, "<table><tbody><tr>", "</tr></tbody></table>" ],_default: [ 0, "", "" ]};wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;wrapMap.th = wrapMap.td;if ( !support.option ) {wrapMap.optgroup = wrapMap.option = [ 1, "<select multiple='' [44446;72110] 
Identifier  'multiple' [72110;72118] 
Greater  '>' [72119;72120] 
String  '", "' [72120;72124] 
Less  '<' [72124;72125] 
Divide  '/' [72125;72126] 
Identifier  'select' [72126;72132] 
Greater  '>' [72132;72133] 
String  '" ];}function getAll( context, tag ) {var ret;if ( typeof context.getElementsByTagName !== "' [72133;72225] 
Undefined  'undefined' [72225;72234] 
String  '" ) {ret = context.getElementsByTagName( tag || "' [72234;72283] 
Multiply  '*' [72283;72284] 
String  '" );} else if ( typeof context.querySelectorAll !== "' [72284;72337] 
Undefined  'undefined' [72337;72346] 
String  '" ) {ret = context.querySelectorAll( tag || "' [72346;72391] 
Multiply  '*' [72391;72392] 
String  '" );} else {ret = [];}if ( tag === undefined || tag && nodeName( context, tag ) ) {return jQuery.merge( [ context ], ret );}return ret;}function setGlobalEval( elems, refElements ) {var i = 0,l = elems.length;for ( ; i < l; i++ ) {dataPriv.set(elems[ i ],"' [72392;72648] 
Identifier  'globalEval' [72648;72658] 
String  '",!refElements || dataPriv.get( refElements[ i ], "' [72658;72709] 
Identifier  'globalEval' [72709;72719] 
String  '" ));}}var rhtml = /<|&#?\w+;/;function buildFragment( elems, context, scripts, selection, ignored ) {var elem, tmp, tag, wrap, attached, j,fragment = context.createDocumentFragment(),nodes = [],i = 0,l = elems.length;for ( ; i < l; i++ ) {elem = elems[ i ];if ( elem || elem === 0 ) {if ( toType( elem ) === "' [72719;73029] 
Identifier  'object' [73029;73035] 
String  '" ) {jQuery.merge( nodes, elem.nodeType ? [ elem ] : elem );} else if ( !rhtml.test( elem ) ) {nodes.push( context.createTextNode( elem ) );} else {tmp = tmp || fragment.appendChild( context.createElement( "' [73035;73242] 
Identifier  'div' [73242;73245] 
String  '" ) );tag = ( rtagName.exec( elem ) || [ "' [73245;73287] 
String  '", "' [73287;73291] 
String  '" ] )[ 1 ].toLowerCase();wrap = wrapMap[ tag ] || wrapMap._default;tmp.innerHTML = wrap[ 1 ] + jQuery.htmlPrefilter( elem ) + wrap[ 2 ];j = wrap[ 0 ];while ( j-- ) {tmp = tmp.lastChild;}jQuery.merge( nodes, tmp.childNodes );tmp = fragment.firstChild;tmp.textContent = "' [73291;73560] 
String  '";}}}fragment.textContent = "' [73560;73589] 
String  '";i = 0;while ( ( elem = nodes[ i++ ] ) ) {if ( selection && jQuery.inArray( elem, selection ) > -1 ) {if ( ignored ) {ignored.push( elem );}continue;}attached = isAttached( elem );tmp = getAll( fragment.appendChild( elem ), "' [73589;73815] 
Identifier  'script' [73815;73821] 
String  '" );if ( attached ) {setGlobalEval( tmp );}if ( scripts ) {j = 0;while ( ( elem = tmp[ j++ ] ) ) {if ( rscriptType.test( elem.type || "' [73821;73956] 
String  '" ) ) {scripts.push( elem );}}}}return fragment;}var rtypenamespace = /^([^.]*)(?:\.(.+)|)/;function returnTrue() {return true;}function returnFalse() {return false;}function expectSync( elem, type ) {return ( elem === safeActiveElement() ) === ( type === "' [73956;74213] 
Identifier  'focus' [74213;74218] 
String  '" );}function safeActiveElement() {try {return document.activeElement;} catch ( err ) { }}function on( elem, types, selector, data, fn, one ) {var origFn, type;if ( typeof types === "' [74218;74401] 
Identifier  'object' [74401;74407] 
String  '" ) {if ( typeof selector !== "' [74407;74438] 
Identifier  'string' [74438;74444] 
String  '" ) {data = data || selector;selector = undefined;}for ( type in types ) {on( elem, type, selector, data, types[ type ], one );}return elem;}if ( data == null && fn == null ) {fn = selector;data = selector = undefined;} else if ( fn == null ) {if ( typeof selector === "' [74444;74714] 
Identifier  'string' [74714;74720] 
String  '" ) {fn = data;data = undefined;} else {fn = data;data = selector;selector = undefined;}}if ( fn === false ) {fn = returnFalse;} else if ( !fn ) {return elem;}if ( one === 1 ) {origFn = fn;fn = function( event ) {jQuery().off( event );return origFn.apply( this, arguments );};fn.guid = origFn.guid || ( origFn.guid = jQuery.guid++ );}return elem.each( function() {jQuery.event.add( this, types, fn, data, selector );} );}jQuery.event = {global: {},add: function( elem, types, handler, data, selector ) {var handleObjIn, eventHandle, tmp,events, t, handleObj,special, handlers, type, namespaces, origType,elemData = dataPriv.get( elem );if ( !acceptData( elem ) ) {return;}if ( handler.handler ) {handleObjIn = handler;handler = handleObjIn.handler;selector = handleObjIn.selector;}if ( selector ) {jQuery.find.matchesSelector( documentElement, selector );}if ( !handler.guid ) {handler.guid = jQuery.guid++;}if ( !( events = elemData.events ) ) {events = elemData.events = Object.create( null );}if ( !( eventHandle = elemData.handle ) ) {eventHandle = elemData.handle = function( e ) {return typeof jQuery !== "' [74720;75832] 
Undefined  'undefined' [75832;75841] 
String  '" && jQuery.event.triggered !== e.type ?jQuery.event.dispatch.apply( elem, arguments ) : undefined;};}types = ( types || "' [75841;75963] 
String  '" ).match( rnothtmlwhite ) || [ "' [75963;75996] 
String  '" ];t = types.length;while ( t-- ) {tmp = rtypenamespace.exec( types[ t ] ) || [];type = origType = tmp[ 1 ];namespaces = ( tmp[ 2 ] || "' [75996;76133] 
String  '" ).split( "' [76133;76145] 
Point  '.' [76145;76146] 
String  '" ).sort();if ( !type ) {continue;}special = jQuery.event.special[ type ] || {};type = ( selector ? special.delegateType : special.bindType ) || type;special = jQuery.event.special[ type ] || {};handleObj = jQuery.extend( {type: type,origType: origType,data: data,handler: handler,guid: handler.guid,selector: selector,needsContext: selector && jQuery.expr.match.needsContext.test( selector ),namespace: namespaces.join( "' [76146;76568] 
Point  '.' [76568;76569] 
String  '" )}, handleObjIn );if ( !( handlers = events[ type ] ) ) {handlers = events[ type ] = [];handlers.delegateCount = 0;if ( !special.setup ||special.setup.call( elem, data, namespaces, eventHandle ) === false ) {if ( elem.addEventListener ) {elem.addEventListener( type, eventHandle );}}}if ( special.add ) {special.add.call( elem, handleObj );if ( !handleObj.handler.guid ) {handleObj.handler.guid = handler.guid;}}if ( selector ) {handlers.splice( handlers.delegateCount++, 0, handleObj );} else {handlers.push( handleObj );}jQuery.event.global[ type ] = true;}},remove: function( elem, types, handler, selector, mappedTypes ) {var j, origCount, tmp,events, t, handleObj,special, handlers, type, namespaces, origType,elemData = dataPriv.hasData( elem ) && dataPriv.get( elem );if ( !elemData || !( events = elemData.events ) ) {return;}types = ( types || "' [76569;77425] 
String  '" ).match( rnothtmlwhite ) || [ "' [77425;77458] 
String  '" ];t = types.length;while ( t-- ) {tmp = rtypenamespace.exec( types[ t ] ) || [];type = origType = tmp[ 1 ];namespaces = ( tmp[ 2 ] || "' [77458;77595] 
String  '" ).split( "' [77595;77607] 
Point  '.' [77607;77608] 
String  '" ).sort();if ( !type ) {for ( type in events ) {jQuery.event.remove( elem, type + types[ t ], handler, selector, true );}continue;}special = jQuery.event.special[ type ] || {};type = ( selector ? special.delegateType : special.bindType ) || type;handlers = events[ type ] || [];tmp = tmp[ 2 ] &&new RegExp( "' [77608;77917] 
OpenBrace  '(' [77917;77918] 
SingleOr  '|' [77919;77920] 
Point  '.' [77922;77923] 
CloseBrace  ')' [77923;77924] 
String  '" + namespaces.join( "' [77924;77946] 
Point  '.' [77948;77949] 
OpenBrace  '(' [77949;77950] 
IfTernary  '?' [77950;77951] 
ElseTernary  ':' [77951;77952] 
Point  '.' [77952;77953] 
Multiply  '*' [77953;77954] 
Point  '.' [77956;77957] 
SingleOr  '|' [77957;77958] 
CloseBrace  ')' [77958;77959] 
String  '" ) + "' [77959;77966] 
OpenBrace  '(' [77966;77967] 
Point  '.' [77969;77970] 
SingleOr  '|' [77970;77971] 
CloseBrace  ')' [77972;77973] 
String  '" );origCount = j = handlers.length;while ( j-- ) {handleObj = handlers[ j ];if ( ( mappedTypes || origType === handleObj.origType ) &&( !handler || handler.guid === handleObj.guid ) &&( !tmp || tmp.test( handleObj.namespace ) ) &&( !selector || selector === handleObj.selector ||selector === "' [77973;78267] 
Multiply  '*' [78267;78268] 
Multiply  '*' [78268;78269] 
String  '" && handleObj.selector ) ) {handlers.splice( j, 1 );if ( handleObj.selector ) {handlers.delegateCount--;}if ( special.remove ) {special.remove.call( elem, handleObj );}}}if ( origCount && !handlers.length ) {if ( !special.teardown ||special.teardown.call( elem, namespaces, elemData.handle ) === false ) {jQuery.removeEvent( elem, type, elemData.handle );}delete events[ type ];}}if ( jQuery.isEmptyObject( events ) ) {dataPriv.remove( elem, "' [78269;78713] 
Identifier  'handle' [78713;78719] 
WhiteSpace   [78719;78720] 
Identifier  'events' [78720;78726] 
String  '" );}},dispatch: function( nativeEvent ) {var i, j, ret, matched, handleObj, handlerQueue,args = new Array( arguments.length ),event = jQuery.event.fix( nativeEvent ),handlers = (dataPriv.get( this, "' [78726;78926] 
Identifier  'events' [78926;78932] 
String  '" ) || Object.create( null ))[ event.type ] || [],special = jQuery.event.special[ event.type ] || {};args[ 0 ] = event;for ( i = 1; i < arguments.length; i++ ) {args[ i ] = arguments[ i ];}event.delegateTarget = this;if ( special.preDispatch && special.preDispatch.call( this, event ) === false ) {return;}handlerQueue = jQuery.event.handlers.call( this, event, handlers );i = 0;while ( ( matched = handlerQueue[ i++ ] ) && !event.isPropagationStopped() ) {event.currentTarget = matched.elem;j = 0;while ( ( handleObj = matched.handlers[ j++ ] ) &&!event.isImmediatePropagationStopped() ) {if ( !event.rnamespace || handleObj.namespace === false ||event.rnamespace.test( handleObj.namespace ) ) {event.handleObj = handleObj;event.data = handleObj.data;ret = ( ( jQuery.event.special[ handleObj.origType ] || {} ).handle ||handleObj.handler ).apply( matched.elem, args );if ( ret !== undefined ) {if ( ( event.result = ret ) === false ) {event.preventDefault();event.stopPropagation();}}}}}if ( special.postDispatch ) {special.postDispatch.call( this, event );}return event.result;},handlers: function( event, handlers ) {var i, handleObj, sel, matchedHandlers, matchedSelectors,handlerQueue = [],delegateCount = handlers.delegateCount,cur = event.target;if ( delegateCount &&cur.nodeType &&!( event.type === "' [78932;80241] 
Identifier  'click' [80241;80246] 
String  '" && event.button >= 1 ) ) {for ( ; cur !== this; cur = cur.parentNode || this ) {if ( cur.nodeType === 1 && !( event.type === "' [80246;80374] 
Identifier  'click' [80374;80379] 
String  '" && cur.disabled === true ) ) {matchedHandlers = [];matchedSelectors = {};for ( i = 0; i < delegateCount; i++ ) {handleObj = handlers[ i ];sel = handleObj.selector + "' [80379;80547] 
WhiteSpace   [80547;80548] 
String  '";if ( matchedSelectors[ sel ] === undefined ) {matchedSelectors[ sel ] = handleObj.needsContext ?jQuery( sel, this ).index( cur ) > -1 :jQuery.find( sel, this, null, [ cur ] ).length;}if ( matchedSelectors[ sel ] ) {matchedHandlers.push( handleObj );}}if ( matchedHandlers.length ) {handlerQueue.push( { elem: cur, handlers: matchedHandlers } );}}}}cur = this;if ( delegateCount < handlers.length ) {handlerQueue.push( { elem: cur, handlers: handlers.slice( delegateCount ) } );}return handlerQueue;},addProp: function( name, hook ) {Object.defineProperty( jQuery.Event.prototype, name, {enumerable: true,configurable: true,get: isFunction( hook ) ?function() {if ( this.originalEvent ) {return hook( this.originalEvent );}} :function() {if ( this.originalEvent ) {return this.originalEvent[ name ];}},set: function( value ) {Object.defineProperty( this, name, {enumerable: true,configurable: true,writable: true,value: value} );}} );},fix: function( originalEvent ) {return originalEvent[ jQuery.expando ] ?originalEvent :new jQuery.Event( originalEvent );},special: {load: {noBubble: true},click: {setup: function( data ) {var el = this || data;if ( rcheckableType.test( el.type ) &&el.click && nodeName( el, "' [80548;81761] 
Identifier  'input' [81761;81766] 
String  '" ) ) {leverageNative( el, "' [81766;81794] 
Identifier  'click' [81794;81799] 
String  '", returnTrue );}return false;},trigger: function( data ) {var el = this || data;if ( rcheckableType.test( el.type ) &&el.click && nodeName( el, "' [81799;81945] 
Identifier  'input' [81945;81950] 
String  '" ) ) {leverageNative( el, "' [81950;81978] 
Identifier  'click' [81978;81983] 
String  '" );}return true;},_default: function( event ) {var target = event.target;return rcheckableType.test( target.type ) &&target.click && nodeName( target, "' [81983;82136] 
Identifier  'input' [82136;82141] 
String  '" ) &&dataPriv.get( target, "' [82141;82170] 
Identifier  'click' [82170;82175] 
String  '" ) ||nodeName( target, "' [82175;82200] 
Identifier  'a' [82200;82201] 
String  '" );}},beforeunload: {postDispatch: function( event ) {if ( event.result !== undefined && event.originalEvent ) {event.originalEvent.returnValue = event.result;}}}}};function leverageNative( el, type, expectSync ) {if ( !expectSync ) {if ( dataPriv.get( el, type ) === undefined ) {jQuery.event.add( el, type, returnTrue );}return;}dataPriv.set( el, type, false );jQuery.event.add( el, type, {namespace: false,handler: function( event ) {var notAsync, result,saved = dataPriv.get( this, type );if ( ( event.isTrigger & 1 ) && this[ type ] ) {if ( !saved.length ) {saved = slice.call( arguments );dataPriv.set( this, type, saved );notAsync = expectSync( this, type );this[ type ]();result = dataPriv.get( this, type );if ( saved !== result || notAsync ) {dataPriv.set( this, type, false );} else {result = {};}if ( saved !== result ) {event.stopImmediatePropagation();event.preventDefault();return result && result.value;}} else if ( ( jQuery.event.special[ type ] || {} ).delegateType ) {event.stopPropagation();}} else if ( saved.length ) {dataPriv.set( this, type, {value: jQuery.event.trigger(jQuery.extend( saved[ 0 ], jQuery.Event.prototype ),saved.slice( 1 ),this)} );event.stopImmediatePropagation();}}} );}jQuery.removeEvent = function( elem, type, handle ) {if ( elem.removeEventListener ) {elem.removeEventListener( type, handle );}};jQuery.Event = function( src, props ) {if ( !( this instanceof jQuery.Event ) ) {return new jQuery.Event( src, props );}if ( src && src.type ) {this.originalEvent = src;this.type = src.type;this.isDefaultPrevented = src.defaultPrevented ||src.defaultPrevented === undefined &&src.returnValue === false ?returnTrue :returnFalse;this.target = ( src.target && src.target.nodeType === 3 ) ?src.target.parentNode :src.target;this.currentTarget = src.currentTarget;this.relatedTarget = src.relatedTarget;} else {this.type = src;}if ( props ) {jQuery.extend( this, props );}this.timeStamp = src && src.timeStamp || Date.now();this[ jQuery.expando ] = true;};jQuery.Event.prototype = {constructor: jQuery.Event,isDefaultPrevented: returnFalse,isPropagationStopped: returnFalse,isImmediatePropagationStopped: returnFalse,isSimulated: false,preventDefault: function() {var e = this.originalEvent;this.isDefaultPrevented = returnTrue;if ( e && !this.isSimulated ) {e.preventDefault();}},stopPropagation: function() {var e = this.originalEvent;this.isPropagationStopped = returnTrue;if ( e && !this.isSimulated ) {e.stopPropagation();}},stopImmediatePropagation: function() {var e = this.originalEvent;this.isImmediatePropagationStopped = returnTrue;if ( e && !this.isSimulated ) {e.stopImmediatePropagation();}this.stopPropagation();}};jQuery.each( {altKey: true,bubbles: true,cancelable: true,changedTouches: true,ctrlKey: true,detail: true,eventPhase: true,metaKey: true,pageX: true,pageY: true,shiftKey: true,view: true,"' [82201;85058] 
Identifier  'char' [85058;85062] 
String  '": true,code: true,charCode: true,key: true,keyCode: true,button: true,buttons: true,clientX: true,clientY: true,offsetX: true,offsetY: true,pointerId: true,pointerType: true,screenX: true,screenY: true,targetTouches: true,toElement: true,touches: true,which: true}, jQuery.event.addProp );jQuery.each( { focus: "' [85062;85375] 
Identifier  'focusin' [85375;85382] 
String  '", blur: "' [85382;85392] 
Identifier  'focusout' [85392;85400] 
String  '" }, function( type, delegateType ) {jQuery.event.special[ type ] = {setup: function() {leverageNative( this, type, expectSync );return false;},trigger: function() {leverageNative( this, type );return true;},_default: function() {return true;},delegateType: delegateType};} );jQuery.each( {mouseenter: "' [85400;85703] 
Identifier  'mouseover' [85703;85712] 
String  '",mouseleave: "' [85712;85727] 
Identifier  'mouseout' [85727;85735] 
String  '",pointerenter: "' [85735;85752] 
Identifier  'pointerover' [85752;85763] 
String  '",pointerleave: "' [85763;85780] 
Identifier  'pointerout' [85780;85790] 
String  '"}, function( orig, fix ) {jQuery.event.special[ orig ] = {delegateType: fix,bindType: fix,handle: function( event ) {var ret,target = this,related = event.relatedTarget,handleObj = event.handleObj;if ( !related || ( related !== target && !jQuery.contains( target, related ) ) ) {event.type = handleObj.origType;ret = handleObj.handler.apply( this, arguments );event.type = fix;}return ret;}};} );jQuery.fn.extend( {on: function( types, selector, data, fn ) {return on( this, types, selector, data, fn );},one: function( types, selector, data, fn ) {return on( this, types, selector, data, fn, 1 );},off: function( types, selector, fn ) {var handleObj, type;if ( types && types.preventDefault && types.handleObj ) {handleObj = types.handleObj;jQuery( types.delegateTarget ).off(handleObj.namespace ?handleObj.origType + "' [85790;86611] 
Point  '.' [86611;86612] 
String  '" + handleObj.namespace :handleObj.origType,handleObj.selector,handleObj.handler);return this;}if ( typeof types === "' [86612;86730] 
Identifier  'object' [86730;86736] 
String  '" ) {for ( type in types ) {this.off( type, selector, types[ type ] );}return this;}if ( selector === false || typeof selector === "' [86736;86868] 
Function  'function' [86868;86876] 
String  '" ) {fn = selector;selector = undefined;}if ( fn === false ) {fn = returnFalse;}return this.each( function() {jQuery.event.remove( this, types, fn, selector );} );}} );varrnoInnerhtml = /<script|<style|<link/i,rchecked = /checked\s*(?:[^=]|=\s*.checked.)/i,rcleanScript = /^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;function manipulationTarget( elem, content ) {if ( nodeName( elem, "' [86876;87259] 
Identifier  'table' [87259;87264] 
String  '" ) &&nodeName( content.nodeType !== 11 ? content : content.firstChild, "' [87264;87337] 
Identifier  'tr' [87337;87339] 
String  '" ) ) {return jQuery( elem ).children( "' [87339;87379] 
Identifier  'tbody' [87379;87384] 
String  '" )[ 0 ] || elem;}return elem;}function disableScript( elem ) {elem.type = ( elem.getAttribute( "' [87384;87481] 
Identifier  'type' [87481;87485] 
String  '" ) !== null ) + "' [87485;87503] 
Divide  '/' [87503;87504] 
String  '" + elem.type;return elem;}function restoreScript( elem ) {if ( ( elem.type || "' [87504;87584] 
String  '" ).slice( 0, 5 ) === "' [87584;87607] 
True  'true' [87607;87611] 
Divide  '/' [87611;87612] 
String  '" ) {elem.type = elem.type.slice( 5 );} else {elem.removeAttribute( "' [87612;87681] 
Identifier  'type' [87681;87685] 
String  '" );}return elem;}function cloneCopyEvent( src, dest ) {var i, l, type, pdataOld, udataOld, udataCur, events;if ( dest.nodeType !== 1 ) {return;}if ( dataPriv.hasData( src ) ) {pdataOld = dataPriv.get( src );events = pdataOld.events;if ( events ) {dataPriv.remove( dest, "' [87685;87957] 
Identifier  'handle' [87957;87963] 
WhiteSpace   [87963;87964] 
Identifier  'events' [87964;87970] 
String  '" );for ( type in events ) {for ( i = 0, l = events[ type ].length; i < l; i++ ) {jQuery.event.add( dest, type, events[ type ][ i ] );}}}}if ( dataUser.hasData( src ) ) {udataOld = dataUser.access( src );udataCur = jQuery.extend( {}, udataOld );dataUser.set( dest, udataCur );}}function fixInput( src, dest ) {var nodeName = dest.nodeName.toLowerCase();if ( nodeName === "' [87970;88342] 
Identifier  'input' [88342;88347] 
String  '" && rcheckableType.test( src.type ) ) {dest.checked = src.checked;} else if ( nodeName === "' [88347;88440] 
Identifier  'input' [88440;88445] 
String  '" || nodeName === "' [88445;88464] 
Identifier  'textarea' [88464;88472] 
String  '" ) {dest.defaultValue = src.defaultValue;}}function domManip( collection, args, callback, ignored ) {args = flat( args );var fragment, first, scripts, hasScripts, node, doc,i = 0,l = collection.length,iNoClone = l - 1,value = args[ 0 ],valueIsFunction = isFunction( value );if ( valueIsFunction ||( l > 1 && typeof value === "' [88472;88799] 
Identifier  'string' [88799;88805] 
String  '" &&!support.checkClone && rchecked.test( value ) ) ) {return collection.each( function( index ) {var self = collection.eq( index );if ( valueIsFunction ) {args[ 0 ] = value.call( this, index, self.html() );}domManip( self, args, callback, ignored );} );}if ( l ) {fragment = buildFragment( args, collection[ 0 ].ownerDocument, false, collection, ignored );first = fragment.firstChild;if ( fragment.childNodes.length === 1 ) {fragment = first;}if ( first || ignored ) {scripts = jQuery.map( getAll( fragment, "' [88805;89315] 
Identifier  'script' [89315;89321] 
String  '" ), disableScript );hasScripts = scripts.length;for ( ; i < l; i++ ) {node = fragment;if ( i !== iNoClone ) {node = jQuery.clone( node, true, true );if ( hasScripts ) {jQuery.merge( scripts, getAll( node, "' [89321;89528] 
Identifier  'script' [89528;89534] 
String  '" ) );}}callback.call( collection[ i ], node, i );}if ( hasScripts ) {doc = scripts[ scripts.length - 1 ].ownerDocument;jQuery.map( scripts, restoreScript );for ( i = 0; i < hasScripts; i++ ) {node = scripts[ i ];if ( rscriptType.test( node.type || "' [89534;89784] 
String  '" ) &&!dataPriv.access( node, "' [89784;89815] 
Identifier  'globalEval' [89815;89825] 
String  '" ) &&jQuery.contains( doc, node ) ) {if ( node.src && ( node.type || "' [89825;89896] 
String  '" ).toLowerCase()  !== "' [89896;89920] 
Identifier  'module' [89920;89926] 
String  '" ) {if ( jQuery._evalUrl && !node.noModule ) {jQuery._evalUrl( node.src, {nonce: node.nonce || node.getAttribute( "' [89926;90042] 
Identifier  'nonce' [90042;90047] 
String  '" )}, doc );}} else {DOMEval( node.textContent.replace( rcleanScript, "' [90047;90118] 
String  '" ), node, doc );}}}}}}return collection;}function remove( elem, selector, keepData ) {var node,nodes = selector ? jQuery.filter( selector, elem ) : elem,i = 0;for ( ; ( node = nodes[ i ] ) != null; i++ ) {if ( !keepData && node.nodeType === 1 ) {jQuery.cleanData( getAll( node ) );}if ( node.parentNode ) {if ( keepData && isAttached( node ) ) {setGlobalEval( getAll( node, "' [90118;90494] 
Identifier  'script' [90494;90500] 
String  '" ) );}node.parentNode.removeChild( node );}}return elem;}jQuery.extend( {htmlPrefilter: function( html ) {return html;},clone: function( elem, dataAndEvents, deepDataAndEvents ) {var i, l, srcElements, destElements,clone = elem.cloneNode( true ),inPage = isAttached( elem );if ( !support.noCloneChecked && ( elem.nodeType === 1 || elem.nodeType === 11 ) &&!jQuery.isXMLDoc( elem ) ) {destElements = getAll( clone );srcElements = getAll( elem );for ( i = 0, l = srcElements.length; i < l; i++ ) {fixInput( srcElements[ i ], destElements[ i ] );}}if ( dataAndEvents ) {if ( deepDataAndEvents ) {srcElements = srcElements || getAll( elem );destElements = destElements || getAll( clone );for ( i = 0, l = srcElements.length; i < l; i++ ) {cloneCopyEvent( srcElements[ i ], destElements[ i ] );}} else {cloneCopyEvent( elem, clone );}}destElements = getAll( clone, "' [90500;91362] 
Identifier  'script' [91362;91368] 
String  '" );if ( destElements.length > 0 ) {setGlobalEval( destElements, !inPage && getAll( elem, "' [91368;91459] 
Identifier  'script' [91459;91465] 
String  '" ) );}return clone;},cleanData: function( elems ) {var data, elem, type,special = jQuery.event.special,i = 0;for ( ; ( elem = elems[ i ] ) !== undefined; i++ ) {if ( acceptData( elem ) ) {if ( ( data = elem[ dataPriv.expando ] ) ) {if ( data.events ) {for ( type in data.events ) {if ( special[ type ] ) {jQuery.event.remove( elem, type );} else {jQuery.removeEvent( elem, type, data.handle );}}}elem[ dataPriv.expando ] = undefined;}if ( elem[ dataUser.expando ] ) {elem[ dataUser.expando ] = undefined;}}}}} );jQuery.fn.extend( {detach: function( selector ) {return remove( this, selector, true );},remove: function( selector ) {return remove( this, selector );},text: function( value ) {return access( this, function( value ) {return value === undefined ?jQuery.text( this ) :this.empty().each( function() {if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {this.textContent = value;}} );}, null, value, arguments.length );},append: function() {return domManip( this, arguments, function( elem ) {if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {var target = manipulationTarget( this, elem );target.appendChild( elem );}} );},prepend: function() {return domManip( this, arguments, function( elem ) {if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {var target = manipulationTarget( this, elem );target.insertBefore( elem, target.firstChild );}} );},before: function() {return domManip( this, arguments, function( elem ) {if ( this.parentNode ) {this.parentNode.insertBefore( elem, this );}} );},after: function() {return domManip( this, arguments, function( elem ) {if ( this.parentNode ) {this.parentNode.insertBefore( elem, this.nextSibling );}} );},empty: function() {var elem,i = 0;for ( ; ( elem = this[ i ] ) != null; i++ ) {if ( elem.nodeType === 1 ) {jQuery.cleanData( getAll( elem, false ) );elem.textContent = "' [91465;93365] 
String  '";}}return this;},clone: function( dataAndEvents, deepDataAndEvents ) {dataAndEvents = dataAndEvents == null ? false : dataAndEvents;deepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;return this.map( function() {return jQuery.clone( this, dataAndEvents, deepDataAndEvents );} );},html: function( value ) {return access( this, function( value ) {var elem = this[ 0 ] || {},i = 0,l = this.length;if ( value === undefined && elem.nodeType === 1 ) {return elem.innerHTML;}if ( typeof value === "' [93365;93888] 
Identifier  'string' [93888;93894] 
String  '" && !rnoInnerhtml.test( value ) &&!wrapMap[ ( rtagName.exec( value ) || [ "' [93894;93970] 
String  '", "' [93970;93974] 
String  '" ] )[ 1 ].toLowerCase() ] ) {value = jQuery.htmlPrefilter( value );try {for ( ; i < l; i++ ) {elem = this[ i ] || {};if ( elem.nodeType === 1 ) {jQuery.cleanData( getAll( elem, false ) );elem.innerHTML = value;}}elem = 0;} catch ( e ) {}}if ( elem ) {this.empty().append( value );}}, null, value, arguments.length );},replaceWith: function() {var ignored = [];return domManip( this, arguments, function( elem ) {var parent = this.parentNode;if ( jQuery.inArray( this, ignored ) < 0 ) {jQuery.cleanData( getAll( this ) );if ( parent ) {parent.replaceChild( elem, this );}}}, ignored );}} );jQuery.each( {appendTo: "' [93974;94589] 
Identifier  'append' [94589;94595] 
String  '",prependTo: "' [94595;94609] 
Identifier  'prepend' [94609;94616] 
String  '",insertBefore: "' [94616;94633] 
Identifier  'before' [94633;94639] 
String  '",insertAfter: "' [94639;94655] 
Identifier  'after' [94655;94660] 
String  '",replaceAll: "' [94660;94675] 
Identifier  'replaceWith' [94675;94686] 
String  '"}, function( name, original ) {jQuery.fn[ name ] = function( selector ) {var elems,ret = [],insert = jQuery( selector ),last = insert.length - 1,i = 0;for ( ; i <= last; i++ ) {elems = i === last ? this : this.clone( true );jQuery( insert[ i ] )[ original ]( elems );push.apply( ret, elems.get() );}return this.pushStack( ret );};} );var rnumnonpx = new RegExp( "' [94686;95050] 
OpenBrace  '(' [95051;95052] 
String  '" + pnum + "' [95052;95064] 
CloseBrace  ')' [95064;95065] 
OpenBrace  '(' [95065;95066] 
IfTernary  '?' [95066;95067] 
FalseAbrev  '!' [95067;95068] 
Identifier  'px' [95068;95070] 
CloseBrace  ')' [95070;95071] 
InitArray  '[' [95071;95072] 
Identifier  'a' [95072;95073] 
Minus  '-' [95073;95074] 
Identifier  'z' [95074;95075] 
Module  '%' [95075;95076] 
FinalArray  ']' [95076;95077] 
Plus  '+' [95077;95078] 
String  '", "' [95079;95083] 
Identifier  'i' [95083;95084] 
String  '" );var getStyles = function( elem ) {var view = elem.ownerDocument.defaultView;if ( !view || !view.opener ) {view = window;}return view.getComputedStyle( elem );};var swap = function( elem, options, callback ) {var ret, name,old = {};for ( name in options ) {old[ name ] = elem.style[ name ];elem.style[ name ] = options[ name ];}ret = callback.call( elem );for ( name in options ) {elem.style[ name ] = old[ name ];}return ret;};var rboxStyle = new RegExp( cssExpand.join( "' [95084;95560] 
SingleOr  '|' [95560;95561] 
String  '" ), "' [95561;95567] 
Identifier  'i' [95567;95568] 
String  '" );( function() {function computeStyleTests() {if ( !div ) {return;}container.style.cssText = "' [95568;95664] 
Identifier  'position' [95664;95672] 
ElseTernary  ':' [95672;95673] 
Identifier  'absolute' [95673;95681] 
Semicolon  ';' [95681;95682] 
Identifier  'left' [95682;95686] 
ElseTernary  ':' [95686;95687] 
Minus  '-' [95687;95688] 
Semicolon  ';' [95695;95696] 
Identifier  'width' [95696;95701] 
ElseTernary  ':' [95701;95702] 
Semicolon  ';' [95706;95707] 
String  '" +"' [95707;95711] 
Identifier  'margin' [95711;95717] 
Minus  '-' [95717;95718] 
Identifier  'top' [95718;95721] 
ElseTernary  ':' [95721;95722] 
Semicolon  ';' [95725;95726] 
Identifier  'padding' [95726;95733] 
ElseTernary  ':' [95733;95734] 
IntConstant  '0' [95734;95735] 
Semicolon  ';' [95735;95736] 
Identifier  'border' [95736;95742] 
ElseTernary  ':' [95742;95743] 
IntConstant  '0' [95743;95744] 
String  '";div.style.cssText ="' [95744;95766] 
Identifier  'position' [95766;95774] 
ElseTernary  ':' [95774;95775] 
Identifier  'relative' [95775;95783] 
Semicolon  ';' [95783;95784] 
Identifier  'display' [95784;95791] 
ElseTernary  ':' [95791;95792] 
Identifier  'block' [95792;95797] 
Semicolon  ';' [95797;95798] 
Identifier  'box' [95798;95801] 
Minus  '-' [95801;95802] 
Identifier  'sizing' [95802;95808] 
ElseTernary  ':' [95808;95809] 
Identifier  'border' [95809;95815] 
Minus  '-' [95815;95816] 
Identifier  'box' [95816;95819] 
Semicolon  ';' [95819;95820] 
Identifier  'overflow' [95820;95828] 
ElseTernary  ':' [95828;95829] 
Identifier  'scroll' [95829;95835] 
Semicolon  ';' [95835;95836] 
String  '" +"' [95836;95840] 
Identifier  'margin' [95840;95846] 
ElseTernary  ':' [95846;95847] 
Identifier  'auto' [95847;95851] 
Semicolon  ';' [95851;95852] 
Identifier  'border' [95852;95858] 
ElseTernary  ':' [95858;95859] 
Semicolon  ';' [95862;95863] 
Identifier  'padding' [95863;95870] 
ElseTernary  ':' [95870;95871] 
Semicolon  ';' [95874;95875] 
String  '" +"' [95875;95879] 
Identifier  'width' [95879;95884] 
ElseTernary  ':' [95884;95885] 
IntConstant  '60' [95885;95887] 
Module  '%' [95887;95888] 
Semicolon  ';' [95888;95889] 
Identifier  'top' [95889;95892] 
ElseTernary  ':' [95892;95893] 
IntConstant  '1' [95893;95894] 
Module  '%' [95894;95895] 
String  '";documentElement.appendChild( container ).appendChild( div );var divStyle = window.getComputedStyle( div );pixelPositionVal = divStyle.top !== "' [95895;96040] 
IntConstant  '1' [96040;96041] 
Module  '%' [96041;96042] 
String  '";reliableMarginLeftVal = roundPixelMeasures( divStyle.marginLeft ) === 12;div.style.right = "' [96042;96136] 
IntConstant  '60' [96136;96138] 
Module  '%' [96138;96139] 
String  '";pixelBoxStylesVal = roundPixelMeasures( divStyle.right ) === 36;boxSizingReliableVal = roundPixelMeasures( divStyle.width ) === 36;div.style.position = "' [96139;96294] 
Identifier  'absolute' [96294;96302] 
String  '";scrollboxSizeVal = roundPixelMeasures( div.offsetWidth / 3 ) === 12;documentElement.removeChild( container );div = null;}function roundPixelMeasures( measure ) {return Math.round( parseFloat( measure ) );}var pixelPositionVal, boxSizingReliableVal, scrollboxSizeVal, pixelBoxStylesVal,reliableTrDimensionsVal, reliableMarginLeftVal,container = document.createElement( "' [96302;96673] 
Identifier  'div' [96673;96676] 
String  '" ),div = document.createElement( "' [96676;96711] 
Identifier  'div' [96711;96714] 
String  '" );if ( !div.style ) {return;}div.style.backgroundClip = "' [96714;96773] 
Identifier  'content' [96773;96780] 
Minus  '-' [96780;96781] 
Identifier  'box' [96781;96784] 
String  '";div.cloneNode( true ).style.backgroundClip = "' [96784;96832] 
String  '";support.clearCloneStyle = div.style.backgroundClip === "' [96832;96890] 
Identifier  'content' [96890;96897] 
Minus  '-' [96897;96898] 
Identifier  'box' [96898;96901] 
String  '";jQuery.extend( support, {boxSizingReliable: function() {computeStyleTests();return boxSizingReliableVal;},pixelBoxStyles: function() {computeStyleTests();return pixelBoxStylesVal;},pixelPosition: function() {computeStyleTests();return pixelPositionVal;},reliableMarginLeft: function() {computeStyleTests();return reliableMarginLeftVal;},scrollboxSize: function() {computeStyleTests();return scrollboxSizeVal;},reliableTrDimensions: function() {var table, tr, trChild, trStyle;if ( reliableTrDimensionsVal == null ) {table = document.createElement( "' [96901;97452] 
Identifier  'table' [97452;97457] 
String  '" );tr = document.createElement( "' [97457;97491] 
Identifier  'tr' [97491;97493] 
String  '" );trChild = document.createElement( "' [97493;97532] 
Identifier  'div' [97532;97535] 
String  '" );table.style.cssText = "' [97535;97562] 
Identifier  'position' [97562;97570] 
ElseTernary  ':' [97570;97571] 
Identifier  'absolute' [97571;97579] 
Semicolon  ';' [97579;97580] 
Identifier  'left' [97580;97584] 
ElseTernary  ':' [97584;97585] 
Minus  '-' [97585;97586] 
Semicolon  ';' [97593;97594] 
Identifier  'border' [97594;97600] 
Minus  '-' [97600;97601] 
Identifier  'collapse' [97601;97609] 
ElseTernary  ':' [97609;97610] 
Identifier  'separate' [97610;97618] 
String  '";tr.style.cssText = "' [97618;97640] 
Identifier  'border' [97640;97646] 
ElseTernary  ':' [97646;97647] 
WhiteSpace   [97650;97651] 
Identifier  'solid' [97651;97656] 
String  '";tr.style.height = "' [97656;97677] 
String  '";trChild.style.height = "' [97680;97706] 
String  '";trChild.style.display = "' [97709;97736] 
Identifier  'block' [97736;97741] 
String  '";documentElement.appendChild( table ).appendChild( tr ).appendChild( trChild );trStyle = window.getComputedStyle( tr );reliableTrDimensionsVal = ( parseInt( trStyle.height, 10 ) +parseInt( trStyle.borderTopWidth, 10 ) +parseInt( trStyle.borderBottomWidth, 10 ) ) === tr.offsetHeight;documentElement.removeChild( table );}return reliableTrDimensionsVal;}} );} )();function curCSS( elem, name, computed ) {var width, minWidth, maxWidth, ret,style = elem.style;computed = computed || getStyles( elem );if ( computed ) {ret = computed.getPropertyValue( name ) || computed[ name ];if ( ret === "' [97741;98332] 
String  '" && !isAttached( elem ) ) {ret = jQuery.style( elem, name );}if ( !support.pixelBoxStyles() && rnumnonpx.test( ret ) && rboxStyle.test( name ) ) {width = style.width;minWidth = style.minWidth;maxWidth = style.maxWidth;style.minWidth = style.maxWidth = style.width = ret;ret = computed.width;style.width = width;style.minWidth = minWidth;style.maxWidth = maxWidth;}}return ret !== undefined ?ret + "' [98332;98731] 
String  '" :ret;}function addGetHookIf( conditionFn, hookFn ) {return {get: function() {if ( conditionFn() ) {delete this.get;return;}return ( this.get = hookFn ).apply( this, arguments );}};}var cssPrefixes = [ "' [98731;98935] 
Identifier  'Webkit' [98935;98941] 
String  '", "' [98941;98945] 
Identifier  'Moz' [98945;98948] 
String  '", "' [98948;98952] 
Identifier  'ms' [98952;98954] 
String  '" ],emptyStyle = document.createElement( "' [98954;98996] 
Identifier  'div' [98996;98999] 
String  '" ).style,vendorProps = {};function vendorPropName( name ) {var capName = name[ 0 ].toUpperCase() + name.slice( 1 ),i = cssPrefixes.length;while ( i-- ) {name = cssPrefixes[ i ] + capName;if ( name in emptyStyle ) {return name;}}}function finalPropName( name ) {var final = jQuery.cssProps[ name ] || vendorProps[ name ];if ( final ) {return final;}if ( name in emptyStyle ) {return name;}return vendorProps[ name ] = vendorPropName( name ) || name;}varrdisplayswap = /^(none|table(?!-c[ea]).+)/,rcustomProp = /^--/,cssShow = { position: "' [98999;99538] 
Identifier  'absolute' [99538;99546] 
String  '", visibility: "' [99546;99562] 
Identifier  'hidden' [99562;99568] 
String  '", display: "' [99568;99581] 
Identifier  'block' [99581;99586] 
String  '" },cssNormalTransform = {letterSpacing: "' [99586;99628] 
IntConstant  '0' [99628;99629] 
String  '",fontWeight: "' [99629;99644] 
IntConstant  '400' [99644;99647] 
String  '"};function setPositiveNumber( _elem, value, subtract ) {var matches = rcssNum.exec( value );return matches ?Math.max( 0, matches[ 2 ] - ( subtract || 0 ) ) + ( matches[ 3 ] || "' [99647;99825] 
Identifier  'px' [99825;99827] 
String  '" ) :value;}function boxModelAdjustment( elem, dimension, box, isBorderBox, styles, computedVal ) {var i = dimension === "' [99827;99949] 
Identifier  'width' [99949;99954] 
String  '" ? 1 : 0,extra = 0,delta = 0;if ( box === ( isBorderBox ? "' [99954;100014] 
Identifier  'border' [100014;100020] 
String  '" : "' [100020;100025] 
Identifier  'content' [100025;100032] 
String  '" ) ) {return 0;}for ( ; i < 4; i += 2 ) {if ( box === "' [100032;100088] 
Identifier  'margin' [100088;100094] 
String  '" ) {delta += jQuery.css( elem, box + cssExpand[ i ], true, styles );}if ( !isBorderBox ) {delta += jQuery.css( elem, "' [100094;100213] 
Identifier  'padding' [100213;100220] 
String  '" + cssExpand[ i ], true, styles );if ( box !== "' [100220;100269] 
Identifier  'padding' [100269;100276] 
String  '" ) {delta += jQuery.css( elem, "' [100276;100309] 
Identifier  'border' [100309;100315] 
String  '" + cssExpand[ i ] + "' [100315;100337] 
Identifier  'Width' [100337;100342] 
String  '", true, styles );} else {extra += jQuery.css( elem, "' [100342;100396] 
Identifier  'border' [100396;100402] 
String  '" + cssExpand[ i ] + "' [100402;100424] 
Identifier  'Width' [100424;100429] 
String  '", true, styles );}} else {if ( box === "' [100429;100470] 
Identifier  'content' [100470;100477] 
String  '" ) {delta -= jQuery.css( elem, "' [100477;100510] 
Identifier  'padding' [100510;100517] 
String  '" + cssExpand[ i ], true, styles );}if ( box !== "' [100517;100567] 
Identifier  'margin' [100567;100573] 
String  '" ) {delta -= jQuery.css( elem, "' [100573;100606] 
Identifier  'border' [100606;100612] 
String  '" + cssExpand[ i ] + "' [100612;100634] 
Identifier  'Width' [100634;100639] 
String  '", true, styles );}}}if ( !isBorderBox && computedVal >= 0 ) {delta += Math.max( 0, Math.ceil(elem[ "' [100639;100740] 
Identifier  'offset' [100740;100746] 
String  '" + dimension[ 0 ].toUpperCase() + dimension.slice( 1 ) ] -computedVal -delta -extra -0.5) ) || 0;}return delta;}function getWidthOrHeight( elem, dimension, extra ) {var styles = getStyles( elem ),boxSizingNeeded = !support.boxSizingReliable() || extra,isBorderBox = boxSizingNeeded &&jQuery.css( elem, "' [100746;101050] 
Identifier  'boxSizing' [101050;101059] 
String  '", false, styles ) === "' [101059;101083] 
Identifier  'border' [101083;101089] 
Minus  '-' [101089;101090] 
Identifier  'box' [101090;101093] 
String  '",valueIsBorderBox = isBorderBox,val = curCSS( elem, dimension, styles ),offsetProp = "' [101093;101180] 
Identifier  'offset' [101180;101186] 
String  '" + dimension[ 0 ].toUpperCase() + dimension.slice( 1 );if ( rnumnonpx.test( val ) ) {if ( !extra ) {return val;}val = "' [101186;101306] 
Identifier  'auto' [101306;101310] 
String  '";}if ( ( !support.boxSizingReliable() && isBorderBox ||!support.reliableTrDimensions() && nodeName( elem, "' [101310;101418] 
Identifier  'tr' [101418;101420] 
String  '" ) ||val === "' [101420;101435] 
Identifier  'auto' [101435;101439] 
String  '" ||!parseFloat( val ) && jQuery.css( elem, "' [101439;101484] 
Identifier  'display' [101484;101491] 
String  '", false, styles ) === "' [101491;101515] 
Identifier  'inline' [101515;101521] 
String  '" ) &&elem.getClientRects().length ) {isBorderBox = jQuery.css( elem, "' [101521;101592] 
Identifier  'boxSizing' [101592;101601] 
String  '", false, styles ) === "' [101601;101625] 
Identifier  'border' [101625;101631] 
Minus  '-' [101631;101632] 
Identifier  'box' [101632;101635] 
String  '";valueIsBorderBox = offsetProp in elem;if ( valueIsBorderBox ) {val = elem[ offsetProp ];}}val = parseFloat( val ) || 0;return ( val +boxModelAdjustment(elem,dimension,extra || ( isBorderBox ? "' [101635;101830] 
Identifier  'border' [101830;101836] 
String  '" : "' [101836;101841] 
Identifier  'content' [101841;101848] 
String  '" ),valueIsBorderBox,styles,val)) + "' [101848;101885] 
Identifier  'px' [101885;101887] 
String  '";}jQuery.extend( {cssHooks: {opacity: {get: function( elem, computed ) {if ( computed ) {var ret = curCSS( elem, "' [101887;102002] 
Identifier  'opacity' [102002;102009] 
String  '" );return ret === "' [102009;102029] 
String  '" ? "' [102029;102034] 
IntConstant  '1' [102034;102035] 
String  '" : ret;}}}},cssNumber: {"' [102035;102061] 
Identifier  'animationIterationCount' [102061;102084] 
String  '": true,"' [102084;102093] 
Identifier  'columnCount' [102093;102104] 
String  '": true,"' [102104;102113] 
Identifier  'fillOpacity' [102113;102124] 
String  '": true,"' [102124;102133] 
Identifier  'flexGrow' [102133;102141] 
String  '": true,"' [102141;102150] 
Identifier  'flexShrink' [102150;102160] 
String  '": true,"' [102160;102169] 
Identifier  'fontWeight' [102169;102179] 
String  '": true,"' [102179;102188] 
Identifier  'gridArea' [102188;102196] 
String  '": true,"' [102196;102205] 
Identifier  'gridColumn' [102205;102215] 
String  '": true,"' [102215;102224] 
Identifier  'gridColumnEnd' [102224;102237] 
String  '": true,"' [102237;102246] 
Identifier  'gridColumnStart' [102246;102261] 
String  '": true,"' [102261;102270] 
Identifier  'gridRow' [102270;102277] 
String  '": true,"' [102277;102286] 
Identifier  'gridRowEnd' [102286;102296] 
String  '": true,"' [102296;102305] 
Identifier  'gridRowStart' [102305;102317] 
String  '": true,"' [102317;102326] 
Identifier  'lineHeight' [102326;102336] 
String  '": true,"' [102336;102345] 
Identifier  'opacity' [102345;102352] 
String  '": true,"' [102352;102361] 
Identifier  'order' [102361;102366] 
String  '": true,"' [102366;102375] 
Identifier  'orphans' [102375;102382] 
String  '": true,"' [102382;102391] 
Identifier  'widows' [102391;102397] 
String  '": true,"' [102397;102406] 
Identifier  'zIndex' [102406;102412] 
String  '": true,"' [102412;102421] 
Identifier  'zoom' [102421;102425] 
String  '": true},cssProps: {},style: function( elem, name, value, extra ) {if ( !elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style ) {return;}var ret, type, hooks,origName = camelCase( name ),isCustomProp = rcustomProp.test( name ),style = elem.style;if ( !isCustomProp ) {name = finalPropName( origName );}hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];if ( value !== undefined ) {type = typeof value;if ( type === "' [102425;102866] 
Identifier  'string' [102866;102872] 
String  '" && ( ret = rcssNum.exec( value ) ) && ret[ 1 ] ) {value = adjustCSS( elem, name, ret );type = "' [102872;102969] 
Identifier  'number' [102969;102975] 
String  '";}if ( value == null || value !== value ) {return;}if ( type === "' [102975;103042] 
Identifier  'number' [103042;103048] 
String  '" && !isCustomProp ) {value += ret && ret[ 3 ] || ( jQuery.cssNumber[ origName ] ? "' [103048;103132] 
String  '" : "' [103132;103137] 
Identifier  'px' [103137;103139] 
String  '" );}if ( !support.clearCloneStyle && value === "' [103139;103188] 
String  '" && name.indexOf( "' [103188;103208] 
Identifier  'background' [103208;103218] 
String  '" ) === 0 ) {style[ name ] = "' [103218;103248] 
Identifier  'inherit' [103248;103255] 
String  '";}if ( !hooks || !( "' [103255;103277] 
Identifier  'set' [103277;103280] 
String  '" in hooks ) ||( value = hooks.set( elem, value, extra ) ) !== undefined ) {if ( isCustomProp ) {style.setProperty( name, value );} else {style[ name ] = value;}}} else {if ( hooks && "' [103280;103465] 
Identifier  'get' [103465;103468] 
String  '" in hooks &&( ret = hooks.get( elem, false, extra ) ) !== undefined ) {return ret;}return style[ name ];}},css: function( elem, name, extra, styles ) {var val, num, hooks,origName = camelCase( name ),isCustomProp = rcustomProp.test( name );if ( !isCustomProp ) {name = finalPropName( origName );}hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];if ( hooks && "' [103468;103843] 
Identifier  'get' [103843;103846] 
String  '" in hooks ) {val = hooks.get( elem, true, extra );}if ( val === undefined ) {val = curCSS( elem, name, styles );}if ( val === "' [103846;103974] 
Identifier  'normal' [103974;103980] 
String  '" && name in cssNormalTransform ) {val = cssNormalTransform[ name ];}if ( extra === "' [103980;104065] 
String  '" || extra ) {num = parseFloat( val );return extra === true || isFinite( num ) ? num || 0 : val;}return val;}} );jQuery.each( [ "' [104065;104194] 
Identifier  'height' [104194;104200] 
String  '", "' [104200;104204] 
Identifier  'width' [104204;104209] 
String  '" ], function( _i, dimension ) {jQuery.cssHooks[ dimension ] = {get: function( elem, computed, extra ) {if ( computed ) {return rdisplayswap.test( jQuery.css( elem, "' [104209;104375] 
Identifier  'display' [104375;104382] 
String  '" ) ) &&( !elem.getClientRects().length || !elem.getBoundingClientRect().width ) ?swap( elem, cssShow, function() {return getWidthOrHeight( elem, dimension, extra );} ) :getWidthOrHeight( elem, dimension, extra );}},set: function( elem, value, extra ) {var matches,styles = getStyles( elem ),scrollboxSizeBuggy = !support.scrollboxSize() &&styles.position === "' [104382;104743] 
Identifier  'absolute' [104743;104751] 
String  '",boxSizingNeeded = scrollboxSizeBuggy || extra,isBorderBox = boxSizingNeeded &&jQuery.css( elem, "' [104751;104850] 
Identifier  'boxSizing' [104850;104859] 
String  '", false, styles ) === "' [104859;104883] 
Identifier  'border' [104883;104889] 
Minus  '-' [104889;104890] 
Identifier  'box' [104890;104893] 
String  '",subtract = extra ?boxModelAdjustment(elem,dimension,extra,isBorderBox,styles) :0;if ( isBorderBox && scrollboxSizeBuggy ) {subtract -= Math.ceil(elem[ "' [104893;105047] 
Identifier  'offset' [105047;105053] 
String  '" + dimension[ 0 ].toUpperCase() + dimension.slice( 1 ) ] -parseFloat( styles[ dimension ] ) -boxModelAdjustment( elem, dimension, "' [105053;105185] 
Identifier  'border' [105185;105191] 
String  '", false, styles ) -0.5);}if ( subtract && ( matches = rcssNum.exec( value ) ) &&( matches[ 3 ] || "' [105191;105291] 
Identifier  'px' [105291;105293] 
String  '" ) !== "' [105293;105302] 
Identifier  'px' [105302;105304] 
String  '" ) {elem.style[ dimension ] = value;value = jQuery.css( elem, dimension );}return setPositiveNumber( elem, value, subtract );}};} );jQuery.cssHooks.marginLeft = addGetHookIf( support.reliableMarginLeft,function( elem, computed ) {if ( computed ) {return ( parseFloat( curCSS( elem, "' [105304;105588] 
Identifier  'marginLeft' [105588;105598] 
String  '" ) ) ||elem.getBoundingClientRect().left -swap( elem, { marginLeft: 0 }, function() {return elem.getBoundingClientRect().left;} )) + "' [105598;105733] 
Identifier  'px' [105733;105735] 
String  '";}});jQuery.each( {margin: "' [105735;105764] 
String  '",padding: "' [105764;105776] 
String  '",border: "' [105776;105787] 
Identifier  'Width' [105787;105792] 
String  '"}, function( prefix, suffix ) {jQuery.cssHooks[ prefix + suffix ] = {expand: function( value ) {var i = 0,expanded = {},parts = typeof value === "' [105792;105939] 
Identifier  'string' [105939;105945] 
String  '" ? value.split( "' [105945;105963] 
WhiteSpace   [105963;105964] 
String  '" ) : [ value ];for ( ; i < 4; i++ ) {expanded[ prefix + cssExpand[ i ] + suffix ] =parts[ i ] || parts[ i - 2 ] || parts[ 0 ];}return expanded;}};if ( prefix !== "' [105964;106128] 
Identifier  'margin' [106128;106134] 
String  '" ) {jQuery.cssHooks[ prefix + suffix ].set = setPositiveNumber;}} );jQuery.fn.extend( {css: function( name, value ) {return access( this, function( elem, name, value ) {var styles, len,map = {},i = 0;if ( Array.isArray( name ) ) {styles = getStyles( elem );len = name.length;for ( ; i < len; i++ ) {map[ name[ i ] ] = jQuery.css( elem, name[ i ], false, styles );}return map;}return value !== undefined ?jQuery.style( elem, name, value ) :jQuery.css( elem, name );}, name, value, arguments.length > 1 );}} );function Tween( elem, options, prop, end, easing ) {return new Tween.prototype.init( elem, options, prop, end, easing );}jQuery.Tween = Tween;Tween.prototype = {constructor: Tween,init: function( elem, options, prop, end, easing, unit ) {this.elem = elem;this.prop = prop;this.easing = easing || jQuery.easing._default;this.options = options;this.start = this.now = this.cur();this.end = end;this.unit = unit || ( jQuery.cssNumber[ prop ] ? "' [106134;107085] 
String  '" : "' [107085;107090] 
Identifier  'px' [107090;107092] 
String  '" );},cur: function() {var hooks = Tween.propHooks[ this.prop ];return hooks && hooks.get ?hooks.get( this ) :Tween.propHooks._default.get( this );},run: function( percent ) {var eased,hooks = Tween.propHooks[ this.prop ];if ( this.options.duration ) {this.pos = eased = jQuery.easing[ this.easing ](percent, this.options.duration * percent, 0, 1, this.options.duration);} else {this.pos = eased = percent;}this.now = ( this.end - this.start ) * eased + this.start;if ( this.options.step ) {this.options.step.call( this.elem, this.now, this );}if ( hooks && hooks.set ) {hooks.set( this );} else {Tween.propHooks._default.set( this );}return this;}};Tween.prototype.init.prototype = Tween.prototype;Tween.propHooks = {_default: {get: function( tween ) {var result;if ( tween.elem.nodeType !== 1 ||tween.elem[ tween.prop ] != null && tween.elem.style[ tween.prop ] == null ) {return tween.elem[ tween.prop ];}result = jQuery.css( tween.elem, tween.prop, "' [107092;108046] 
String  '" );return !result || result === "' [108046;108080] 
Identifier  'auto' [108080;108084] 
String  '" ? 0 : result;},set: function( tween ) {if ( jQuery.fx.step[ tween.prop ] ) {jQuery.fx.step[ tween.prop ]( tween );} else if ( tween.elem.nodeType === 1 && (jQuery.cssHooks[ tween.prop ] ||tween.elem.style[ finalPropName( tween.prop ) ] != null ) ) {jQuery.style( tween.elem, tween.prop, tween.now + tween.unit );} else {tween.elem[ tween.prop ] = tween.now;}}}};Tween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {set: function( tween ) {if ( tween.elem.nodeType && tween.elem.parentNode ) {tween.elem[ tween.prop ] = tween.now;}}};jQuery.easing = {linear: function( p ) {return p;},swing: function( p ) {return 0.5 - Math.cos( p * Math.PI ) / 2;},_default: "' [108084;108751] 
Identifier  'swing' [108751;108756] 
String  '"};jQuery.fx = Tween.prototype.init;jQuery.fx.step = {};varfxNow, inProgress,rfxtypes = /^(?:toggle|show|hide)$/,rrun = /queueHooks$/;function schedule() {if ( inProgress ) {if ( document.hidden === false && window.requestAnimationFrame ) {window.requestAnimationFrame( schedule );} else {window.setTimeout( schedule, jQuery.fx.interval );}jQuery.fx.tick();}}function createFxNow() {window.setTimeout( function() {fxNow = undefined;} );return ( fxNow = Date.now() );}function genFx( type, includeWidth ) {var which,i = 0,attrs = { height: type };includeWidth = includeWidth ? 1 : 0;for ( ; i < 4; i += 2 - includeWidth ) {which = cssExpand[ i ];attrs[ "' [108756;109409] 
Identifier  'margin' [109409;109415] 
String  '" + which ] = attrs[ "' [109415;109437] 
Identifier  'padding' [109437;109444] 
String  '" + which ] = type;}if ( includeWidth ) {attrs.opacity = attrs.width = type;}return attrs;}function createTween( value, prop, animation ) {var tween,collection = ( Animation.tweeners[ prop ] || [] ).concat( Animation.tweeners[ "' [109444;109672] 
Multiply  '*' [109672;109673] 
String  '" ] ),index = 0,length = collection.length;for ( ; index < length; index++ ) {if ( ( tween = collection[ index ].call( animation, prop, value ) ) ) {return tween;}}}function defaultPrefilter( elem, props, opts ) {var prop, value, toggle, hooks, oldfire, propTween, restoreDisplay, display,isBox = "' [109673;109971] 
Identifier  'width' [109971;109976] 
String  '" in props || "' [109976;109991] 
Identifier  'height' [109991;109997] 
String  '" in props,anim = this,orig = {},style = elem.style,hidden = elem.nodeType && isHiddenWithinTree( elem ),dataShow = dataPriv.get( elem, "' [109997;110134] 
Identifier  'fxshow' [110134;110140] 
String  '" );if ( !opts.queue ) {hooks = jQuery._queueHooks( elem, "' [110140;110199] 
Identifier  'fx' [110199;110201] 
String  '" );if ( hooks.unqueued == null ) {hooks.unqueued = 0;oldfire = hooks.empty.fire;hooks.empty.fire = function() {if ( !hooks.unqueued ) {oldfire();}};}hooks.unqueued++;anim.always( function() {anim.always( function() {hooks.unqueued--;if ( !jQuery.queue( elem, "' [110201;110462] 
Identifier  'fx' [110462;110464] 
String  '" ).length ) {hooks.empty.fire();}} );} );}for ( prop in props ) {value = props[ prop ];if ( rfxtypes.test( value ) ) {delete props[ prop ];toggle = toggle || value === "' [110464;110634] 
Identifier  'toggle' [110634;110640] 
String  '";if ( value === ( hidden ? "' [110640;110669] 
Identifier  'hide' [110669;110673] 
String  '" : "' [110673;110678] 
Identifier  'show' [110678;110682] 
String  '" ) ) {if ( value === "' [110682;110705] 
Identifier  'show' [110705;110709] 
String  '" && dataShow && dataShow[ prop ] !== undefined ) {hidden = true;} else {continue;}}orig[ prop ] = dataShow && dataShow[ prop ] || jQuery.style( elem, prop );}}propTween = !jQuery.isEmptyObject( props );if ( !propTween && jQuery.isEmptyObject( orig ) ) {return;}if ( isBox && elem.nodeType === 1 ) {opts.overflow = [ style.overflow, style.overflowX, style.overflowY ];restoreDisplay = dataShow && dataShow.display;if ( restoreDisplay == null ) {restoreDisplay = dataPriv.get( elem, "' [110709;111192] 
Identifier  'display' [111192;111199] 
String  '" );}display = jQuery.css( elem, "' [111199;111233] 
Identifier  'display' [111233;111240] 
String  '" );if ( display === "' [111240;111262] 
Identifier  'none' [111262;111266] 
String  '" ) {if ( restoreDisplay ) {display = restoreDisplay;} else {showHide( [ elem ], true );restoreDisplay = elem.style.display || restoreDisplay;display = jQuery.css( elem, "' [111266;111437] 
Identifier  'display' [111437;111444] 
String  '" );showHide( [ elem ] );}}if ( display === "' [111444;111489] 
Identifier  'inline' [111489;111495] 
String  '" || display === "' [111495;111513] 
Identifier  'inline' [111513;111519] 
Minus  '-' [111519;111520] 
Identifier  'block' [111520;111525] 
String  '" && restoreDisplay != null ) {if ( jQuery.css( elem, "' [111525;111580] 
Identifier  'float' [111580;111585] 
String  '" ) === "' [111585;111594] 
Identifier  'none' [111594;111598] 
String  '" ) {if ( !propTween ) {anim.done( function() {style.display = restoreDisplay;} );if ( restoreDisplay == null ) {display = style.display;restoreDisplay = display === "' [111598;111765] 
Identifier  'none' [111765;111769] 
String  '" ? "' [111769;111774] 
String  '" : display;}}style.display = "' [111774;111805] 
Identifier  'inline' [111805;111811] 
Minus  '-' [111811;111812] 
Identifier  'block' [111812;111817] 
String  '";}}}if ( opts.overflow ) {style.overflow = "' [111817;111862] 
Identifier  'hidden' [111862;111868] 
String  '";anim.always( function() {style.overflow = opts.overflow[ 0 ];style.overflowX = opts.overflow[ 1 ];style.overflowY = opts.overflow[ 2 ];} );}propTween = false;for ( prop in orig ) {if ( !propTween ) {if ( dataShow ) {if ( "' [111868;112092] 
Identifier  'hidden' [112092;112098] 
String  '" in dataShow ) {hidden = dataShow.hidden;}} else {dataShow = dataPriv.access( elem, "' [112098;112184] 
Identifier  'fxshow' [112184;112190] 
String  '", { display: restoreDisplay } );}if ( toggle ) {dataShow.hidden = !hidden;}if ( hidden ) {showHide( [ elem ], true );}anim.done( function() {if ( !hidden ) {showHide( [ elem ] );}dataPriv.remove( elem, "' [112190;112394] 
Identifier  'fxshow' [112394;112400] 
String  '" );for ( prop in orig ) {jQuery.style( elem, prop, orig[ prop ] );}} );}propTween = createTween( hidden ? dataShow[ prop ] : 0, prop, anim );if ( !( prop in dataShow ) ) {dataShow[ prop ] = propTween.start;if ( hidden ) {propTween.end = propTween.start;propTween.start = 0;}}}}function propFilter( props, specialEasing ) {var index, name, easing, value, hooks;for ( index in props ) {name = camelCase( index );easing = specialEasing[ name ];value = props[ index ];if ( Array.isArray( value ) ) {easing = value[ 1 ];value = props[ index ] = value[ 0 ];}if ( index !== name ) {props[ name ] = value;delete props[ index ];}hooks = jQuery.cssHooks[ name ];if ( hooks && "' [112400;113068] 
Identifier  'expand' [113068;113074] 
String  '" in hooks ) {value = hooks.expand( value );delete props[ name ];for ( index in value ) {if ( !( index in props ) ) {props[ index ] = value[ index ];specialEasing[ index ] = easing;}}} else {specialEasing[ name ] = easing;}}}function Animation( elem, properties, options ) {var result,stopped,index = 0,length = Animation.prefilters.length,deferred = jQuery.Deferred().always( function() {delete tick.elem;} ),tick = function() {if ( stopped ) {return false;}var currentTime = fxNow || createFxNow(),remaining = Math.max( 0, animation.startTime + animation.duration - currentTime ),temp = remaining / animation.duration || 0,percent = 1 - temp,index = 0,length = animation.tweens.length;for ( ; index < length; index++ ) {animation.tweens[ index ].run( percent );}deferred.notifyWith( elem, [ animation, percent, remaining ] );if ( percent < 1 && length ) {return remaining;}if ( !length ) {deferred.notifyWith( elem, [ animation, 1, 0 ] );}deferred.resolveWith( elem, [ animation ] );return false;},animation = deferred.promise( {elem: elem,props: jQuery.extend( {}, properties ),opts: jQuery.extend( true, {specialEasing: {},easing: jQuery.easing._default}, options ),originalProperties: properties,originalOptions: options,startTime: fxNow || createFxNow(),duration: options.duration,tweens: [],createTween: function( prop, end ) {var tween = jQuery.Tween( elem, animation.opts, prop, end,animation.opts.specialEasing[ prop ] || animation.opts.easing );animation.tweens.push( tween );return tween;},stop: function( gotoEnd ) {var index = 0,length = gotoEnd ? animation.tweens.length : 0;if ( stopped ) {return this;}stopped = true;for ( ; index < length; index++ ) {animation.tweens[ index ].run( 1 );}if ( gotoEnd ) {deferred.notifyWith( elem, [ animation, 1, 0 ] );deferred.resolveWith( elem, [ animation, gotoEnd ] );} else {deferred.rejectWith( elem, [ animation, gotoEnd ] );}return this;}} ),props = animation.props;propFilter( props, animation.opts.specialEasing );for ( ; index < length; index++ ) {result = Animation.prefilters[ index ].call( animation, elem, props, animation.opts );if ( result ) {if ( isFunction( result.stop ) ) {jQuery._queueHooks( animation.elem, animation.opts.queue ).stop =result.stop.bind( result );}return result;}}jQuery.map( props, createTween, animation );if ( isFunction( animation.opts.start ) ) {animation.opts.start.call( elem, animation );}animation.progress( animation.opts.progress ).done( animation.opts.done, animation.opts.complete ).fail( animation.opts.fail ).always( animation.opts.always );jQuery.fx.timer(jQuery.extend( tick, {elem: elem,anim: animation,queue: animation.opts.queue} ));return animation;}jQuery.Animation = jQuery.extend( Animation, {tweeners: {"' [113074;115793] 
Multiply  '*' [115793;115794] 
String  '": [ function( prop, value ) {var tween = this.createTween( prop, value );adjustCSS( tween.elem, prop, rcssNum.exec( value ), tween );return tween;} ]},tweener: function( props, callback ) {if ( isFunction( props ) ) {callback = props;props = [ "' [115794;116040] 
Multiply  '*' [116040;116041] 
String  '" ];} else {props = props.match( rnothtmlwhite );}var prop,index = 0,length = props.length;for ( ; index < length; index++ ) {prop = props[ index ];Animation.tweeners[ prop ] = Animation.tweeners[ prop ] || [];Animation.tweeners[ prop ].unshift( callback );}},prefilters: [ defaultPrefilter ],prefilter: function( callback, prepend ) {if ( prepend ) {Animation.prefilters.unshift( callback );} else {Animation.prefilters.push( callback );}}} );jQuery.speed = function( speed, easing, fn ) {var opt = speed && typeof speed === "' [116041;116568] 
Identifier  'object' [116568;116574] 
String  '" ? jQuery.extend( {}, speed ) : {complete: fn || !fn && easing ||isFunction( speed ) && speed,duration: speed,easing: fn && easing || easing && !isFunction( easing ) && easing};if ( jQuery.fx.off ) {opt.duration = 0;} else {if ( typeof opt.duration !== "' [116574;116829] 
Identifier  'number' [116829;116835] 
String  '" ) {if ( opt.duration in jQuery.fx.speeds ) {opt.duration = jQuery.fx.speeds[ opt.duration ];} else {opt.duration = jQuery.fx.speeds._default;}}}if ( opt.queue == null || opt.queue === true ) {opt.queue = "' [116835;117042] 
Identifier  'fx' [117042;117044] 
String  '";}opt.old = opt.complete;opt.complete = function() {if ( isFunction( opt.old ) ) {opt.old.call( this );}if ( opt.queue ) {jQuery.dequeue( this, opt.queue );}};return opt;};jQuery.fn.extend( {fadeTo: function( speed, to, easing, callback ) {return this.filter( isHiddenWithinTree ).css( "' [117044;117332] 
Identifier  'opacity' [117332;117339] 
String  '", 0 ).show().end().animate( { opacity: to }, speed, easing, callback );},animate: function( prop, speed, easing, callback ) {var empty = jQuery.isEmptyObject( prop ),optall = jQuery.speed( speed, easing, callback ),doAnimation = function() {var anim = Animation( this, jQuery.extend( {}, prop ), optall );if ( empty || dataPriv.get( this, "' [117339;117680] 
Identifier  'finish' [117680;117686] 
String  '" ) ) {anim.stop( true );}};doAnimation.finish = doAnimation;return empty || optall.queue === false ?this.each( doAnimation ) :this.queue( optall.queue, doAnimation );},stop: function( type, clearQueue, gotoEnd ) {var stopQueue = function( hooks ) {var stop = hooks.stop;delete hooks.stop;stop( gotoEnd );};if ( typeof type !== "' [117686;118015] 
Identifier  'string' [118015;118021] 
String  '" ) {gotoEnd = clearQueue;clearQueue = type;type = undefined;}if ( clearQueue ) {this.queue( type || "' [118021;118123] 
Identifier  'fx' [118123;118125] 
String  '", [] );}return this.each( function() {var dequeue = true,index = type != null && type + "' [118125;118215] 
Identifier  'queueHooks' [118215;118225] 
String  '",timers = jQuery.timers,data = dataPriv.get( this );if ( index ) {if ( data[ index ] && data[ index ].stop ) {stopQueue( data[ index ] );}} else {for ( index in data ) {if ( data[ index ] && data[ index ].stop && rrun.test( index ) ) {stopQueue( data[ index ] );}}}for ( index = timers.length; index--; ) {if ( timers[ index ].elem === this &&( type == null || timers[ index ].queue === type ) ) {timers[ index ].anim.stop( gotoEnd );dequeue = false;timers.splice( index, 1 );}}if ( dequeue || !gotoEnd ) {jQuery.dequeue( this, type );}} );},finish: function( type ) {if ( type !== false ) {type = type || "' [118225;118833] 
Identifier  'fx' [118833;118835] 
String  '";}return this.each( function() {var index,data = dataPriv.get( this ),queue = data[ type + "' [118835;118928] 
Identifier  'queue' [118928;118933] 
String  '" ],hooks = data[ type + "' [118933;118959] 
Identifier  'queueHooks' [118959;118969] 
String  '" ],timers = jQuery.timers,length = queue ? queue.length : 0;data.finish = true;jQuery.queue( this, type, [] );if ( hooks && hooks.stop ) {hooks.stop.call( this, true );}for ( index = timers.length; index--; ) {if ( timers[ index ].elem === this && timers[ index ].queue === type ) {timers[ index ].anim.stop( true );timers.splice( index, 1 );}}for ( index = 0; index < length; index++ ) {if ( queue[ index ] && queue[ index ].finish ) {queue[ index ].finish.call( this );}}delete data.finish;} );}} );jQuery.each( [ "' [118969;119487] 
Identifier  'toggle' [119487;119493] 
String  '", "' [119493;119497] 
Identifier  'show' [119497;119501] 
String  '", "' [119501;119505] 
Identifier  'hide' [119505;119509] 
String  '" ], function( _i, name ) {var cssFn = jQuery.fn[ name ];jQuery.fn[ name ] = function( speed, easing, callback ) {return speed == null || typeof speed === "' [119509;119665] 
Identifier  'boolean' [119665;119672] 
String  '" ?cssFn.apply( this, arguments ) :this.animate( genFx( name, true ), speed, easing, callback );};} );jQuery.each( {slideDown: genFx( "' [119672;119807] 
Identifier  'show' [119807;119811] 
String  '" ),slideUp: genFx( "' [119811;119832] 
Identifier  'hide' [119832;119836] 
String  '" ),slideToggle: genFx( "' [119836;119861] 
Identifier  'toggle' [119861;119867] 
String  '" ),fadeIn: { opacity: "' [119867;119891] 
Identifier  'show' [119891;119895] 
String  '" },fadeOut: { opacity: "' [119895;119920] 
Identifier  'hide' [119920;119924] 
String  '" },fadeToggle: { opacity: "' [119924;119952] 
Identifier  'toggle' [119952;119958] 
String  '" }}, function( name, props ) {jQuery.fn[ name ] = function( speed, easing, callback ) {return this.animate( props, speed, easing, callback );};} );jQuery.timers = [];jQuery.fx.tick = function() {var timer,i = 0,timers = jQuery.timers;fxNow = Date.now();for ( ; i < timers.length; i++ ) {timer = timers[ i ];if ( !timer() && timers[ i ] === timer ) {timers.splice( i--, 1 );}}if ( !timers.length ) {jQuery.fx.stop();}fxNow = undefined;};jQuery.fx.timer = function( timer ) {jQuery.timers.push( timer );jQuery.fx.start();};jQuery.fx.interval = 13;jQuery.fx.start = function() {if ( inProgress ) {return;}inProgress = true;schedule();};jQuery.fx.stop = function() {inProgress = null;};jQuery.fx.speeds = {slow: 600,fast: 200,_default: 400};jQuery.fn.delay = function( time, type ) {time = jQuery.fx ? jQuery.fx.speeds[ time ] || time : time;type = type || "' [119958;120813] 
Identifier  'fx' [120813;120815] 
String  '";return this.queue( type, function( next, hooks ) {var timeout = window.setTimeout( next, time );hooks.stop = function() {window.clearTimeout( timeout );};} );};( function() {var input = document.createElement( "' [120815;121028] 
Identifier  'input' [121028;121033] 
String  '" ),select = document.createElement( "' [121033;121071] 
Identifier  'select' [121071;121077] 
String  '" ),opt = select.appendChild( document.createElement( "' [121077;121132] 
Identifier  'option' [121132;121138] 
String  '" ) );input.type = "' [121138;121158] 
Identifier  'checkbox' [121158;121166] 
String  '";support.checkOn = input.value !== "' [121166;121203] 
String  '";support.optSelected = opt.selected;input = document.createElement( "' [121203;121273] 
Identifier  'input' [121273;121278] 
String  '" );input.value = "' [121278;121297] 
Identifier  't' [121297;121298] 
String  '";input.type = "' [121298;121314] 
Identifier  'radio' [121314;121319] 
String  '";support.radioValue = input.value === "' [121319;121359] 
Identifier  't' [121359;121360] 
String  '";} )();var boolHook,attrHandle = jQuery.expr.attrHandle;jQuery.fn.extend( {attr: function( name, value ) {return access( this, jQuery.attr, name, value, arguments.length > 1 );},removeAttr: function( name ) {return this.each( function() {jQuery.removeAttr( this, name );} );}} );jQuery.extend( {attr: function( elem, name, value ) {var ret, hooks,nType = elem.nodeType;if ( nType === 3 || nType === 8 || nType === 2 ) {return;}if ( typeof elem.getAttribute === "' [121360;121823] 
Undefined  'undefined' [121823;121832] 
String  '" ) {return jQuery.prop( elem, name, value );}if ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {hooks = jQuery.attrHooks[ name.toLowerCase() ] ||( jQuery.expr.match.bool.test( name ) ? boolHook : undefined );}if ( value !== undefined ) {if ( value === null ) {jQuery.removeAttr( elem, name );return;}if ( hooks && "' [121832;122145] 
Identifier  'set' [122145;122148] 
String  '" in hooks &&( ret = hooks.set( elem, value, name ) ) !== undefined ) {return ret;}elem.setAttribute( name, value + "' [122148;122265] 
String  '" );return value;}if ( hooks && "' [122265;122298] 
Identifier  'get' [122298;122301] 
String  '" in hooks && ( ret = hooks.get( elem, name ) ) !== null ) {return ret;}ret = jQuery.find.attr( elem, name );return ret == null ? undefined : ret;},attrHooks: {type: {set: function( elem, value ) {if ( !support.radioValue && value === "' [122301;122537] 
Identifier  'radio' [122537;122542] 
String  '" &&nodeName( elem, "' [122542;122563] 
Identifier  'input' [122563;122568] 
String  '" ) ) {var val = elem.value;elem.setAttribute( "' [122568;122616] 
Identifier  'type' [122616;122620] 
String  '", value );if ( val ) {elem.value = val;}return value;}}}},removeAttr: function( elem, value ) {var name,i = 0,attrNames = value && value.match( rnothtmlwhite );if ( attrNames && elem.nodeType === 1 ) {while ( ( name = attrNames[ i++ ] ) ) {elem.removeAttribute( name );}}}} );boolHook = {set: function( elem, value, name ) {if ( value === false ) {jQuery.removeAttr( elem, name );} else {elem.setAttribute( name, name );}return name;}};jQuery.each( jQuery.expr.match.bool.source.match( /\w+/g ), function( _i, name ) {var getter = attrHandle[ name ] || jQuery.find.attr;attrHandle[ name ] = function( elem, name, isXML ) {var ret, handle,lowercaseName = name.toLowerCase();if ( !isXML ) {handle = attrHandle[ lowercaseName ];attrHandle[ lowercaseName ] = ret;ret = getter( elem, name, isXML ) != null ?lowercaseName :null;attrHandle[ lowercaseName ] = handle;}return ret;};} );var rfocusable = /^(?:input|select|textarea|button)$/i,rclickable = /^(?:a|area)$/i;jQuery.fn.extend( {prop: function( name, value ) {return access( this, jQuery.prop, name, value, arguments.length > 1 );},removeProp: function( name ) {return this.each( function() {delete this[ jQuery.propFix[ name ] || name ];} );}} );jQuery.extend( {prop: function( elem, name, value ) {var ret, hooks,nType = elem.nodeType;if ( nType === 3 || nType === 8 || nType === 2 ) {return;}if ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {name = jQuery.propFix[ name ] || name;hooks = jQuery.propHooks[ name ];}if ( value !== undefined ) {if ( hooks && "' [122620;124130] 
Identifier  'set' [124130;124133] 
String  '" in hooks &&( ret = hooks.set( elem, value, name ) ) !== undefined ) {return ret;}return ( elem[ name ] = value );}if ( hooks && "' [124133;124264] 
Identifier  'get' [124264;124267] 
String  '" in hooks && ( ret = hooks.get( elem, name ) ) !== null ) {return ret;}return elem[ name ];},propHooks: {tabIndex: {get: function( elem ) {var tabindex = jQuery.find.attr( elem, "' [124267;124447] 
Identifier  'tabindex' [124447;124455] 
String  '" );if ( tabindex ) {return parseInt( tabindex, 10 );}if (rfocusable.test( elem.nodeName ) ||rclickable.test( elem.nodeName ) &&elem.href) {return 0;}return -1;}}},propFix: {"' [124455;124630] 
Identifier  'for' [124630;124633] 
String  '": "' [124633;124637] 
Identifier  'htmlFor' [124637;124644] 
String  '","' [124644;124647] 
Class  'class' [124647;124652] 
String  '": "' [124652;124656] 
Identifier  'className' [124656;124665] 
String  '"}} );if ( !support.optSelected ) {jQuery.propHooks.selected = {get: function( elem ) {var parent = elem.parentNode;if ( parent && parent.parentNode ) {parent.parentNode.selectedIndex;}return null;},set: function( elem ) {var parent = elem.parentNode;if ( parent ) {parent.selectedIndex;if ( parent.parentNode ) {parent.parentNode.selectedIndex;}}}};}jQuery.each( ["' [124665;125031] 
Identifier  'tabIndex' [125031;125039] 
String  '","' [125039;125042] 
Identifier  'readOnly' [125042;125050] 
String  '","' [125050;125053] 
Identifier  'maxLength' [125053;125062] 
String  '","' [125062;125065] 
Identifier  'cellSpacing' [125065;125076] 
String  '","' [125076;125079] 
Identifier  'cellPadding' [125079;125090] 
String  '","' [125090;125093] 
Identifier  'rowSpan' [125093;125100] 
String  '","' [125100;125103] 
Identifier  'colSpan' [125103;125110] 
String  '","' [125110;125113] 
Identifier  'useMap' [125113;125119] 
String  '","' [125119;125122] 
Identifier  'frameBorder' [125122;125133] 
String  '","' [125133;125136] 
Identifier  'contentEditable' [125136;125151] 
String  '"], function() {jQuery.propFix[ this.toLowerCase() ] = this;} );function stripAndCollapse( value ) {var tokens = value.match( rnothtmlwhite ) || [];return tokens.join( "' [125151;125320] 
WhiteSpace   [125320;125321] 
String  '" );}function getClass( elem ) {return elem.getAttribute && elem.getAttribute( "' [125321;125401] 
Class  'class' [125401;125406] 
String  '" ) || "' [125406;125414] 
String  '";}function classesToArray( value ) {if ( Array.isArray( value ) ) {return value;}if ( typeof value === "' [125414;125519] 
Identifier  'string' [125519;125525] 
String  '" ) {return value.match( rnothtmlwhite ) || [];}return [];}jQuery.fn.extend( {addClass: function( value ) {var classes, elem, cur, curValue, clazz, j, finalValue,i = 0;if ( isFunction( value ) ) {return this.each( function( j ) {jQuery( this ).addClass( value.call( this, j, getClass( this ) ) );} );}classes = classesToArray( value );if ( classes.length ) {while ( ( elem = this[ i++ ] ) ) {curValue = getClass( elem );cur = elem.nodeType === 1 && ( "' [125525;125977] 
WhiteSpace   [125977;125978] 
String  '" + stripAndCollapse( curValue ) + "' [125978;126014] 
WhiteSpace   [126014;126015] 
String  '" );if ( cur ) {j = 0;while ( ( clazz = classes[ j++ ] ) ) {if ( cur.indexOf( "' [126015;126094] 
WhiteSpace   [126094;126095] 
String  '" + clazz + "' [126095;126108] 
WhiteSpace   [126108;126109] 
String  '" ) < 0 ) {cur += clazz + "' [126109;126136] 
WhiteSpace   [126136;126137] 
String  '";}}finalValue = stripAndCollapse( cur );if ( curValue !== finalValue ) {elem.setAttribute( "' [126137;126230] 
Class  'class' [126230;126235] 
String  '", finalValue );}}}}return this;},removeClass: function( value ) {var classes, elem, cur, curValue, clazz, j, finalValue,i = 0;if ( isFunction( value ) ) {return this.each( function( j ) {jQuery( this ).removeClass( value.call( this, j, getClass( this ) ) );} );}if ( !arguments.length ) {return this.attr( "' [126235;126543] 
Class  'class' [126543;126548] 
String  '", "' [126548;126552] 
String  '" );}classes = classesToArray( value );if ( classes.length ) {while ( ( elem = this[ i++ ] ) ) {curValue = getClass( elem );cur = elem.nodeType === 1 && ( "' [126552;126708] 
WhiteSpace   [126708;126709] 
String  '" + stripAndCollapse( curValue ) + "' [126709;126745] 
WhiteSpace   [126745;126746] 
String  '" );if ( cur ) {j = 0;while ( ( clazz = classes[ j++ ] ) ) {while ( cur.indexOf( "' [126746;126828] 
WhiteSpace   [126828;126829] 
String  '" + clazz + "' [126829;126842] 
WhiteSpace   [126842;126843] 
String  '" ) > -1 ) {cur = cur.replace( "' [126843;126875] 
WhiteSpace   [126875;126876] 
String  '" + clazz + "' [126876;126889] 
WhiteSpace   [126889;126890] 
String  '", "' [126890;126894] 
WhiteSpace   [126894;126895] 
String  '" );}}finalValue = stripAndCollapse( cur );if ( curValue !== finalValue ) {elem.setAttribute( "' [126895;126990] 
Class  'class' [126990;126995] 
String  '", finalValue );}}}}return this;},toggleClass: function( value, stateVal ) {var type = typeof value,isValidValue = type === "' [126995;127120] 
Identifier  'string' [127120;127126] 
String  '" || Array.isArray( value );if ( typeof stateVal === "' [127126;127180] 
Identifier  'boolean' [127180;127187] 
String  '" && isValidValue ) {return stateVal ? this.addClass( value ) : this.removeClass( value );}if ( isFunction( value ) ) {return this.each( function( i ) {jQuery( this ).toggleClass(value.call( this, i, getClass( this ), stateVal ),stateVal);} );}return this.each( function() {var className, i, self, classNames;if ( isValidValue ) {i = 0;self = jQuery( this );classNames = classesToArray( value );while ( ( className = classNames[ i++ ] ) ) {if ( self.hasClass( className ) ) {self.removeClass( className );} else {self.addClass( className );}}} else if ( value === undefined || type === "' [127187;127774] 
Identifier  'boolean' [127774;127781] 
String  '" ) {className = getClass( this );if ( className ) {dataPriv.set( this, "' [127781;127854] 
Identifier  '__className__' [127854;127867] 
String  '", className );}if ( this.setAttribute ) {this.setAttribute( "' [127867;127929] 
Class  'class' [127929;127934] 
String  '",className || value === false ?"' [127934;127967] 
String  '" :dataPriv.get( this, "' [127967;127991] 
Identifier  '__className__' [127991;128004] 
String  '" ) || "' [128004;128012] 
String  '");}}} );},hasClass: function( selector ) {var className, elem,i = 0;className = "' [128012;128094] 
WhiteSpace   [128094;128095] 
String  '" + selector + "' [128095;128111] 
WhiteSpace   [128111;128112] 
String  '";while ( ( elem = this[ i++ ] ) ) {if ( elem.nodeType === 1 &&( "' [128112;128178] 
WhiteSpace   [128178;128179] 
String  '" + stripAndCollapse( getClass( elem ) ) + "' [128179;128223] 
WhiteSpace   [128223;128224] 
String  '" ).indexOf( className ) > -1 ) {return true;}}return false;}} );var rreturn = /\r/g;jQuery.fn.extend( {val: function( value ) {var hooks, ret, valueIsFunction,elem = this[ 0 ];if ( !arguments.length ) {if ( elem ) {hooks = jQuery.valHooks[ elem.type ] ||jQuery.valHooks[ elem.nodeName.toLowerCase() ];if ( hooks &&"' [128224;128540] 
Identifier  'get' [128540;128543] 
String  '" in hooks &&( ret = hooks.get( elem, "' [128543;128582] 
Identifier  'value' [128582;128587] 
String  '" ) ) !== undefined) {return ret;}ret = elem.value;if ( typeof ret === "' [128587;128659] 
Identifier  'string' [128659;128665] 
String  '" ) {return ret.replace( rreturn, "' [128665;128700] 
String  '" );}return ret == null ? "' [128700;128727] 
String  '" : ret;}return;}valueIsFunction = isFunction( value );return this.each( function( i ) {var val;if ( this.nodeType !== 1 ) {return;}if ( valueIsFunction ) {val = value.call( this, i, jQuery( this ).val() );} else {val = value;}if ( val == null ) {val = "' [128727;128981] 
String  '";} else if ( typeof val === "' [128981;129011] 
Identifier  'number' [129011;129017] 
String  '" ) {val += "' [129017;129030] 
String  '";} else if ( Array.isArray( val ) ) {val = jQuery.map( val, function( value ) {return value == null ? "' [129030;129134] 
String  '" : value + "' [129134;129147] 
String  '";} );}hooks = jQuery.valHooks[ this.type ] || jQuery.valHooks[ this.nodeName.toLowerCase() ];if ( !hooks || !( "' [129147;129260] 
Identifier  'set' [129260;129263] 
String  '" in hooks ) || hooks.set( this, val, "' [129263;129302] 
Identifier  'value' [129302;129307] 
String  '" ) === undefined ) {this.value = val;}} );}} );jQuery.extend( {valHooks: {option: {get: function( elem ) {var val = jQuery.find.attr( elem, "' [129307;129449] 
Identifier  'value' [129449;129454] 
String  '" );return val != null ?val :stripAndCollapse( jQuery.text( elem ) );}},select: {get: function( elem ) {var value, option, i,options = elem.options,index = elem.selectedIndex,one = elem.type === "' [129454;129650] 
Identifier  'select' [129650;129656] 
Minus  '-' [129656;129657] 
Identifier  'one' [129657;129660] 
String  '",values = one ? null : [],max = one ? index + 1 : options.length;if ( index < 0 ) {i = max;} else {i = one ? index : 0;}for ( ; i < max; i++ ) {option = options[ i ];if ( ( option.selected || i === index ) &&!option.disabled &&( !option.parentNode.disabled ||!nodeName( option.parentNode, "' [129660;129951] 
Identifier  'optgroup' [129951;129959] 
String  '" ) ) ) {value = jQuery( option ).val();if ( one ) {return value;}values.push( value );}}return values;},set: function( elem, value ) {var optionSet, option,options = elem.options,values = jQuery.makeArray( value ),i = options.length;while ( i-- ) {option = options[ i ];if ( option.selected =jQuery.inArray( jQuery.valHooks.option.get( option ), values ) > -1) {optionSet = true;}}if ( !optionSet ) {elem.selectedIndex = -1;}return values;}}}} );jQuery.each( [ "' [129959;130422] 
Identifier  'radio' [130422;130427] 
String  '", "' [130427;130431] 
Identifier  'checkbox' [130431;130439] 
String  '" ], function() {jQuery.valHooks[ this ] = {set: function( elem, value ) {if ( Array.isArray( value ) ) {return ( elem.checked = jQuery.inArray( jQuery( elem ).val(), value ) > -1 );}}};if ( !support.checkOn ) {jQuery.valHooks[ this ].get = function( elem ) {return elem.getAttribute( "' [130439;130725] 
Identifier  'value' [130725;130730] 
String  '" ) === null ? "' [130730;130746] 
Identifier  'on' [130746;130748] 
String  '" : elem.value;};}} );support.focusin = "' [130748;130789] 
Identifier  'onfocusin' [130789;130798] 
String  '" in window;var rfocusMorph = /^(?:focusinfocus|focusoutblur)$/,stopPropagationCallback = function( e ) {e.stopPropagation();};jQuery.extend( jQuery.event, {trigger: function( event, data, elem, onlyHandlers ) {var i, cur, tmp, bubbleType, ontype, handle, special, lastElement,eventPath = [ elem || document ],type = hasOwn.call( event, "' [130798;131136] 
Identifier  'type' [131136;131140] 
String  '" ) ? event.type : event,namespaces = hasOwn.call( event, "' [131140;131199] 
Identifier  'namespace' [131199;131208] 
String  '" ) ? event.namespace.split( "' [131208;131238] 
Point  '.' [131238;131239] 
String  '" ) : [];cur = lastElement = tmp = elem = elem || document;if ( elem.nodeType === 3 || elem.nodeType === 8 ) {return;}if ( rfocusMorph.test( type + jQuery.event.triggered ) ) {return;}if ( type.indexOf( "' [131239;131443] 
Point  '.' [131443;131444] 
String  '" ) > -1 ) {namespaces = type.split( "' [131444;131482] 
Point  '.' [131482;131483] 
String  '" );type = namespaces.shift();namespaces.sort();}ontype = type.indexOf( "' [131483;131556] 
ElseTernary  ':' [131556;131557] 
String  '" ) < 0 && "' [131557;131569] 
Identifier  'on' [131569;131571] 
String  '" + type;event = event[ jQuery.expando ] ?event :new jQuery.Event( type, typeof event === "' [131571;131662] 
Identifier  'object' [131662;131668] 
String  '" && event );event.isTrigger = onlyHandlers ? 2 : 3;event.namespace = namespaces.join( "' [131668;131756] 
Point  '.' [131756;131757] 
String  '" );event.rnamespace = event.namespace ?new RegExp( "' [131757;131810] 
OpenBrace  '(' [131810;131811] 
SingleOr  '|' [131812;131813] 
Point  '.' [131815;131816] 
CloseBrace  ')' [131816;131817] 
String  '" + namespaces.join( "' [131817;131839] 
Point  '.' [131841;131842] 
OpenBrace  '(' [131842;131843] 
IfTernary  '?' [131843;131844] 
ElseTernary  ':' [131844;131845] 
Point  '.' [131845;131846] 
Multiply  '*' [131846;131847] 
Point  '.' [131849;131850] 
SingleOr  '|' [131850;131851] 
CloseBrace  ')' [131851;131852] 
String  '" ) + "' [131852;131859] 
OpenBrace  '(' [131859;131860] 
Point  '.' [131862;131863] 
SingleOr  '|' [131863;131864] 
CloseBrace  ')' [131865;131866] 
String  '" ) :null;event.result = undefined;if ( !event.target ) {event.target = elem;}data = data == null ?[ event ] :jQuery.makeArray( data, [ event ] );special = jQuery.event.special[ type ] || {};if ( !onlyHandlers && special.trigger && special.trigger.apply( elem, data ) === false ) {return;}if ( !onlyHandlers && !special.noBubble && !isWindow( elem ) ) {bubbleType = special.delegateType || type;if ( !rfocusMorph.test( bubbleType + type ) ) {cur = cur.parentNode;}for ( ; cur; cur = cur.parentNode ) {eventPath.push( cur );tmp = cur;}if ( tmp === ( elem.ownerDocument || document ) ) {eventPath.push( tmp.defaultView || tmp.parentWindow || window );}}i = 0;while ( ( cur = eventPath[ i++ ] ) && !event.isPropagationStopped() ) {lastElement = cur;event.type = i > 1 ?bubbleType :special.bindType || type;handle = ( dataPriv.get( cur, "' [131866;132700] 
Identifier  'events' [132700;132706] 
String  '" ) || Object.create( null ) )[ event.type ] &&dataPriv.get( cur, "' [132706;132773] 
Identifier  'handle' [132773;132779] 
String  '" );if ( handle ) {handle.apply( cur, data );}handle = ontype && cur[ ontype ];if ( handle && handle.apply && acceptData( cur ) ) {event.result = handle.apply( cur, data );if ( event.result === false ) {event.preventDefault();}}}event.type = type;if ( !onlyHandlers && !event.isDefaultPrevented() ) {if ( ( !special._default ||special._default.apply( eventPath.pop(), data ) === false ) &&acceptData( elem ) ) {if ( ontype && isFunction( elem[ type ] ) && !isWindow( elem ) ) {tmp = elem[ ontype ];if ( tmp ) {elem[ ontype ] = null;}jQuery.event.triggered = type;if ( event.isPropagationStopped() ) {lastElement.addEventListener( type, stopPropagationCallback );}elem[ type ]();if ( event.isPropagationStopped() ) {lastElement.removeEventListener( type, stopPropagationCallback );}jQuery.event.triggered = undefined;if ( tmp ) {elem[ ontype ] = tmp;}}}}return event.result;},simulate: function( type, elem, event ) {var e = jQuery.extend(new jQuery.Event(),event,{type: type,isSimulated: true});jQuery.event.trigger( e, null, elem );}} );jQuery.fn.extend( {trigger: function( type, data ) {return this.each( function() {jQuery.event.trigger( type, data, this );} );},triggerHandler: function( type, data ) {var elem = this[ 0 ];if ( elem ) {return jQuery.event.trigger( type, data, elem, true );}}} );if ( !support.focusin ) {jQuery.each( { focus: "' [132779;134128] 
Identifier  'focusin' [134128;134135] 
String  '", blur: "' [134135;134145] 
Identifier  'focusout' [134145;134153] 
String  '" }, function( orig, fix ) {var handler = function( event ) {jQuery.event.simulate( fix, event.target, jQuery.event.fix( event ) );};jQuery.event.special[ fix ] = {setup: function() {var doc = this.ownerDocument || this.document || this,attaches = dataPriv.access( doc, fix );if ( !attaches ) {doc.addEventListener( orig, handler, true );}dataPriv.access( doc, fix, ( attaches || 0 ) + 1 );},teardown: function() {var doc = this.ownerDocument || this.document || this,attaches = dataPriv.access( doc, fix ) - 1;if ( !attaches ) {doc.removeEventListener( orig, handler, true );dataPriv.remove( doc, fix );} else {dataPriv.access( doc, fix, attaches );}}};} );}var location = window.location;var nonce = { guid: Date.now() };var rquery = ( /\?/ );jQuery.parseXML = function( data ) {var xml, parserErrorElem;if ( !data || typeof data !== "' [134153;134990] 
Identifier  'string' [134990;134996] 
String  '" ) {return null;}try {xml = ( new window.DOMParser() ).parseFromString( data, "' [134996;135076] 
Identifier  'text' [135076;135080] 
Divide  '/' [135080;135081] 
Identifier  'xml' [135081;135084] 
String  '" );} catch ( e ) {}parserErrorElem = xml && xml.getElementsByTagName( "' [135084;135156] 
Identifier  'parsererror' [135156;135167] 
String  '" )[ 0 ];if ( !xml || parserErrorElem ) {jQuery.error( "' [135167;135223] 
Identifier  'Invalid' [135223;135230] 
WhiteSpace   [135230;135231] 
Identifier  'XML' [135231;135234] 
ElseTernary  ':' [135234;135235] 
WhiteSpace   [135235;135236] 
String  '" + (parserErrorElem ?jQuery.map( parserErrorElem.childNodes, function( el ) {return el.textContent;} ).join( "' [135236;135347] 
Identifier  'n' [135348;135349] 
String  '" ) :data) );}return xml;};varrbracket = /\[\]$/,rCRLF = /\r?\n/g,rsubmitterTypes = /^(?:submit|button|image|reset|file)$/i,rsubmittable = /^(?:input|select|textarea|keygen)/i;function buildParams( prefix, obj, traditional, add ) {var name;if ( Array.isArray( obj ) ) {jQuery.each( obj, function( i, v ) {if ( traditional || rbracket.test( prefix ) ) {add( prefix, v );} else {buildParams(prefix + "' [135349;135748] 
InitArray  '[' [135748;135749] 
String  '" + ( typeof v === "' [135749;135769] 
Identifier  'object' [135769;135775] 
String  '" && v != null ? i : "' [135775;135797] 
String  '" ) + "' [135797;135804] 
FinalArray  ']' [135804;135805] 
String  '",v,traditional,add);}} );} else if ( !traditional && toType( obj ) === "' [135805;135878] 
Identifier  'object' [135878;135884] 
String  '" ) {for ( name in obj ) {buildParams( prefix + "' [135884;135933] 
InitArray  '[' [135933;135934] 
String  '" + name + "' [135934;135946] 
FinalArray  ']' [135946;135947] 
String  '", obj[ name ], traditional, add );}} else {add( prefix, obj );}}jQuery.param = function( a, traditional ) {var prefix,s = [],add = function( key, valueOrFunction ) {var value = isFunction( valueOrFunction ) ?valueOrFunction() :valueOrFunction;s[ s.length ] = encodeURIComponent( key ) + "' [135947;136236] 
Equal  '=' [136236;136237] 
String  '" +encodeURIComponent( value == null ? "' [136237;136277] 
String  '" : value );};if ( a == null ) {return "' [136277;136317] 
String  '";}if ( Array.isArray( a ) || ( a.jquery && !jQuery.isPlainObject( a ) ) ) {jQuery.each( a, function() {add( this.name, this.value );} );} else {for ( prefix in a ) {buildParams( prefix, a[ prefix ], traditional, add );}}return s.join( "' [136317;136554] 
String  '" );};jQuery.fn.extend( {serialize: function() {return jQuery.param( this.serializeArray() );},serializeArray: function() {return this.map( function() {var elements = jQuery.prop( this, "' [136555;136742] 
Identifier  'elements' [136742;136750] 
String  '" );return elements ? jQuery.makeArray( elements ) : this;} ).filter( function() {var type = this.type;return this.name && !jQuery( this ).is( "' [136750;136894] 
ElseTernary  ':' [136894;136895] 
Identifier  'disabled' [136895;136903] 
String  '" ) &&rsubmittable.test( this.nodeName ) && !rsubmitterTypes.test( type ) &&( this.checked || !rcheckableType.test( type ) );} ).map( function( _i, elem ) {var val = jQuery( this ).val();if ( val == null ) {return null;}if ( Array.isArray( val ) ) {return jQuery.map( val, function( val ) {return { name: elem.name, value: val.replace( rCRLF, "' [136903;137247] 
Identifier  'r' [137248;137249] 
Identifier  'n' [137250;137251] 
String  '" ) };} );}return { name: elem.name, value: val.replace( rCRLF, "' [137251;137316] 
Identifier  'r' [137317;137318] 
Identifier  'n' [137319;137320] 
String  '" ) };} ).get();}} );varr20 = /%20/g,rhash = /#.*$/,rantiCache = /([?&])_=[^&]*/,rheaders = /^(.*?):[ \t]*([^\r\n]*)$/mg,rlocalProtocol = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/,rnoContent = /^(?:GET|HEAD)$/,rprotocol = /^\/prefilters = {},transports = {},allTypes = "' [137320;137608] 
Multiply  '*' [137608;137609] 
Divide  '/' [137609;137610] 
String  '".concat( "' [137610;137621] 
Multiply  '*' [137621;137622] 
String  '" ),originAnchor = document.createElement( "' [137622;137666] 
Identifier  'a' [137666;137667] 
String  '" );originAnchor.href = location.href;function addToPrefiltersOrTransports( structure ) {return function( dataTypeExpression, func ) {if ( typeof dataTypeExpression !== "' [137667;137837] 
Identifier  'string' [137837;137843] 
String  '" ) {func = dataTypeExpression;dataTypeExpression = "' [137843;137896] 
Multiply  '*' [137896;137897] 
String  '";}var dataType,i = 0,dataTypes = dataTypeExpression.toLowerCase().match( rnothtmlwhite ) || [];if ( isFunction( func ) ) {while ( ( dataType = dataTypes[ i++ ] ) ) {if ( dataType[ 0 ] === "' [137897;138087] 
Plus  '+' [138087;138088] 
String  '" ) {dataType = dataType.slice( 1 ) || "' [138088;138128] 
Multiply  '*' [138128;138129] 
String  '";( structure[ dataType ] = structure[ dataType ] || [] ).unshift( func );} else {( structure[ dataType ] = structure[ dataType ] || [] ).push( func );}}}};}function inspectPrefiltersOrTransports( structure, options, originalOptions, jqXHR ) {var inspected = {},seekingTransport = ( structure === transports );function inspect( dataType ) {var selected;inspected[ dataType ] = true;jQuery.each( structure[ dataType ] || [], function( _, prefilterOrFactory ) {var dataTypeOrTransport = prefilterOrFactory( options, originalOptions, jqXHR );if ( typeof dataTypeOrTransport === "' [138129;138705] 
Identifier  'string' [138705;138711] 
String  '" &&!seekingTransport && !inspected[ dataTypeOrTransport ] ) {options.dataTypes.unshift( dataTypeOrTransport );inspect( dataTypeOrTransport );return false;} else if ( seekingTransport ) {return !( selected = dataTypeOrTransport );}} );return selected;}return inspect( options.dataTypes[ 0 ] ) || !inspected[ "' [138711;139020] 
Multiply  '*' [139020;139021] 
String  '" ] && inspect( "' [139021;139038] 
Multiply  '*' [139038;139039] 
String  '" );}function ajaxExtend( target, src ) {var key, deep,flatOptions = jQuery.ajaxSettings.flatOptions || {};for ( key in src ) {if ( src[ key ] !== undefined ) {( flatOptions[ key ] ? target : ( deep || ( deep = {} ) ) )[ key ] = src[ key ];}}if ( deep ) {jQuery.extend( true, target, deep );}return target;}function ajaxHandleResponses( s, jqXHR, responses ) {var ct, type, finalDataType, firstDataType,contents = s.contents,dataTypes = s.dataTypes;while ( dataTypes[ 0 ] === "' [139039;139516] 
Multiply  '*' [139516;139517] 
String  '" ) {dataTypes.shift();if ( ct === undefined ) {ct = s.mimeType || jqXHR.getResponseHeader( "' [139517;139610] 
Identifier  'Content' [139610;139617] 
Minus  '-' [139617;139618] 
Identifier  'Type' [139618;139622] 
String  '" );}}if ( ct ) {for ( type in contents ) {if ( contents[ type ] && contents[ type ].test( ct ) ) {dataTypes.unshift( type );break;}}}if ( dataTypes[ 0 ] in responses ) {finalDataType = dataTypes[ 0 ];} else {for ( type in responses ) {if ( !dataTypes[ 0 ] || s.converters[ type + "' [139622;139904] 
WhiteSpace   [139904;139905] 
String  '" + dataTypes[ 0 ] ] ) {finalDataType = type;break;}if ( !firstDataType ) {firstDataType = type;}}finalDataType = finalDataType || firstDataType;}if ( finalDataType ) {if ( finalDataType !== dataTypes[ 0 ] ) {dataTypes.unshift( finalDataType );}return responses[ finalDataType ];}}function ajaxConvert( s, response, jqXHR, isSuccess ) {var conv2, current, conv, tmp, prev,converters = {},dataTypes = s.dataTypes.slice();if ( dataTypes[ 1 ] ) {for ( conv in s.converters ) {converters[ conv.toLowerCase() ] = s.converters[ conv ];}}current = dataTypes.shift();while ( current ) {if ( s.responseFields[ current ] ) {jqXHR[ s.responseFields[ current ] ] = response;}if ( !prev && isSuccess && s.dataFilter ) {response = s.dataFilter( response, s.dataType );}prev = current;current = dataTypes.shift();if ( current ) {if ( current === "' [139905;140737] 
Multiply  '*' [140737;140738] 
String  '" ) {current = prev;} else if ( prev !== "' [140738;140780] 
Multiply  '*' [140780;140781] 
String  '" && prev !== current ) {conv = converters[ prev + "' [140781;140833] 
WhiteSpace   [140833;140834] 
String  '" + current ] || converters[ "' [140834;140864] 
Multiply  '*' [140864;140865] 
WhiteSpace   [140865;140866] 
String  '" + current ];if ( !conv ) {for ( conv2 in converters ) {tmp = conv2.split( "' [140866;140943] 
WhiteSpace   [140943;140944] 
String  '" );if ( tmp[ 1 ] === current ) {conv = converters[ prev + "' [140944;141004] 
WhiteSpace   [141004;141005] 
String  '" + tmp[ 0 ] ] ||converters[ "' [141005;141035] 
Multiply  '*' [141035;141036] 
WhiteSpace   [141036;141037] 
String  '" + tmp[ 0 ] ];if ( conv ) {if ( conv === true ) {conv = converters[ conv2 ];} else if ( converters[ conv2 ] !== true ) {current = tmp[ 0 ];dataTypes.unshift( tmp[ 1 ] );}break;}}}}if ( conv !== true ) {if ( conv && s.throws ) {response = conv( response );} else {try {response = conv( response );} catch ( e ) {return {state: "' [141037;141365] 
Identifier  'parsererror' [141365;141376] 
String  '",error: conv ? e : "' [141376;141397] 
Identifier  'No' [141397;141399] 
WhiteSpace   [141399;141400] 
Identifier  'conversion' [141400;141410] 
WhiteSpace   [141410;141411] 
Identifier  'from' [141411;141415] 
WhiteSpace   [141415;141416] 
String  '" + prev + "' [141416;141428] 
WhiteSpace   [141428;141429] 
Identifier  'to' [141429;141431] 
WhiteSpace   [141431;141432] 
String  '" + current};}}}}}}return { state: "' [141432;141468] 
Identifier  'success' [141468;141475] 
String  '", data: response };}jQuery.extend( {active: 0,lastModified: {},etag: {},ajaxSettings: {url: location.href,type: "' [141475;141589] 
Identifier  'GET' [141589;141592] 
String  '",isLocal: rlocalProtocol.test( location.protocol ),global: true,processData: true,async: true,contentType: "' [141592;141701] 
Identifier  'application' [141701;141712] 
Divide  '/' [141712;141713] 
Identifier  'x' [141713;141714] 
Minus  '-' [141714;141715] 
Identifier  'www' [141715;141718] 
Minus  '-' [141718;141719] 
Identifier  'form' [141719;141723] 
Minus  '-' [141723;141724] 
Identifier  'urlencoded' [141724;141734] 
Semicolon  ';' [141734;141735] 
WhiteSpace   [141735;141736] 
Identifier  'charset' [141736;141743] 
Equal  '=' [141743;141744] 
Identifier  'UTF' [141744;141747] 
Minus  '-' [141747;141748] 
IntConstant  '8' [141748;141749] 
String  '",accepts: {"' [141749;141762] 
Multiply  '*' [141762;141763] 
String  '": allTypes,text: "' [141763;141782] 
Identifier  'text' [141782;141786] 
Divide  '/' [141786;141787] 
Identifier  'plain' [141787;141792] 
String  '",html: "' [141792;141801] 
Identifier  'text' [141801;141805] 
Divide  '/' [141805;141806] 
Identifier  'html' [141806;141810] 
String  '",xml: "' [141810;141818] 
Identifier  'application' [141818;141829] 
Divide  '/' [141829;141830] 
Identifier  'xml' [141830;141833] 
Comma  ',' [141833;141834] 
WhiteSpace   [141834;141835] 
Identifier  'text' [141835;141839] 
Divide  '/' [141839;141840] 
Identifier  'xml' [141840;141843] 
String  '",json: "' [141843;141852] 
Identifier  'application' [141852;141863] 
Divide  '/' [141863;141864] 
Identifier  'json' [141864;141868] 
Comma  ',' [141868;141869] 
WhiteSpace   [141869;141870] 
Identifier  'text' [141870;141874] 
Divide  '/' [141874;141875] 
Identifier  'javascript' [141875;141885] 
String  '"},contents: {xml: /\bxml\b/,html: /\bhtml/,json: /\bjson\b/},responseFields: {xml: "' [141885;141970] 
Identifier  'responseXML' [141970;141981] 
String  '",text: "' [141981;141990] 
Identifier  'responseText' [141990;142002] 
String  '",json: "' [142002;142011] 
Identifier  'responseJSON' [142011;142023] 
String  '"},converters: {"' [142023;142040] 
Multiply  '*' [142040;142041] 
WhiteSpace   [142041;142042] 
Identifier  'text' [142042;142046] 
String  '": String,"' [142046;142057] 
Identifier  'text' [142057;142061] 
WhiteSpace   [142061;142062] 
Identifier  'html' [142062;142066] 
String  '": true,"' [142066;142075] 
Identifier  'text' [142075;142079] 
WhiteSpace   [142079;142080] 
Identifier  'json' [142080;142084] 
String  '": JSON.parse,"' [142084;142099] 
Identifier  'text' [142099;142103] 
WhiteSpace   [142103;142104] 
Identifier  'xml' [142104;142107] 
String  '": jQuery.parseXML},flatOptions: {url: true,context: true}},ajaxSetup: function( target, settings ) {return settings ?ajaxExtend( ajaxExtend( target, jQuery.ajaxSettings ), settings ) :ajaxExtend( jQuery.ajaxSettings, target );},ajaxPrefilter: addToPrefiltersOrTransports( prefilters ),ajaxTransport: addToPrefiltersOrTransports( transports ),ajax: function( url, options ) {if ( typeof url === "' [142107;142503] 
Identifier  'object' [142503;142509] 
String  '" ) {options = url;url = undefined;}options = options || {};var transport,cacheURL,responseHeadersString,responseHeaders,timeoutTimer,urlAnchor,completed,fireGlobals,i,uncached,s = jQuery.ajaxSetup( {}, options ),callbackContext = s.context || s,globalEventContext = s.context &&( callbackContext.nodeType || callbackContext.jquery ) ?jQuery( callbackContext ) :jQuery.event,deferred = jQuery.Deferred(),completeDeferred = jQuery.Callbacks( "' [142509;142951] 
Identifier  'once' [142951;142955] 
WhiteSpace   [142955;142956] 
Identifier  'memory' [142956;142962] 
String  '" ),statusCode = s.statusCode || {},requestHeaders = {},requestHeadersNames = {},strAbort = "' [142962;143055] 
Identifier  'canceled' [143055;143063] 
String  '",jqXHR = {readyState: 0,getResponseHeader: function( key ) {var match;if ( completed ) {if ( !responseHeaders ) {responseHeaders = {};while ( ( match = rheaders.exec( responseHeadersString ) ) ) {responseHeaders[ match[ 1 ].toLowerCase() + "' [143063;143305] 
WhiteSpace   [143305;143306] 
String  '" ] =( responseHeaders[ match[ 1 ].toLowerCase() + "' [143306;143358] 
WhiteSpace   [143358;143359] 
String  '" ] || [] ).concat( match[ 2 ] );}}match = responseHeaders[ key.toLowerCase() + "' [143359;143440] 
WhiteSpace   [143440;143441] 
String  '" ];}return match == null ? null : match.join( "' [143441;143489] 
Comma  ',' [143489;143490] 
WhiteSpace   [143490;143491] 
String  '" );},getAllResponseHeaders: function() {return completed ? responseHeadersString : null;},setRequestHeader: function( name, value ) {if ( completed == null ) {name = requestHeadersNames[ name.toLowerCase() ] =requestHeadersNames[ name.toLowerCase() ] || name;requestHeaders[ name ] = value;}return this;},overrideMimeType: function( type ) {if ( completed == null ) {s.mimeType = type;}return this;},statusCode: function( map ) {var code;if ( map ) {if ( completed ) {jqXHR.always( map[ jqXHR.status ] );} else {for ( code in map ) {statusCode[ code ] = [ statusCode[ code ], map[ code ] ];}}}return this;},abort: function( statusText ) {var finalText = statusText || strAbort;if ( transport ) {transport.abort( finalText );}done( 0, finalText );return this;}};deferred.promise( jqXHR );s.url = ( ( url || s.url || location.href ) + "' [143491;144326] 
String  '" ).replace( rprotocol, location.protocol + s.type = options.method || options.type || s.method || s.type;s.dataTypes = ( s.dataType || "' [144326;144463] 
Multiply  '*' [144463;144464] 
String  '" ).toLowerCase().match( rnothtmlwhite ) || [ "' [144464;144511] 
String  '" ];if ( s.crossDomain == null ) {urlAnchor = document.createElement( "' [144511;144582] 
Identifier  'a' [144582;144583] 
String  '" );try {urlAnchor.href = s.url;urlAnchor.href = urlAnchor.href;s.crossDomain = originAnchor.protocol + urlAnchor.protocol + } catch ( e ) {s.crossDomain = true;}}if ( s.data && s.processData && typeof s.data !== "' [144583;144797] 
Identifier  'string' [144797;144803] 
String  '" ) {s.data = jQuery.param( s.data, s.traditional );}inspectPrefiltersOrTransports( prefilters, s, options, jqXHR );if ( completed ) {return jqXHR;}fireGlobals = jQuery.event && s.global;if ( fireGlobals && jQuery.active++ === 0 ) {jQuery.event.trigger( "' [144803;145058] 
Identifier  'ajaxStart' [145058;145067] 
String  '" );}s.type = s.type.toUpperCase();s.hasContent = !rnoContent.test( s.type );cacheURL = s.url.replace( rhash, "' [145067;145178] 
String  '" );if ( !s.hasContent ) {uncached = s.url.slice( cacheURL.length );if ( s.data && ( s.processData || typeof s.data === "' [145178;145299] 
Identifier  'string' [145299;145305] 
String  '" ) ) {cacheURL += ( rquery.test( cacheURL ) ? "' [145305;145353] 
String  '" : "' [145354;145359] 
IfTernary  '?' [145359;145360] 
String  '" ) + s.data;delete s.data;}if ( s.cache === false ) {cacheURL = cacheURL.replace( rantiCache, "' [145360;145456] 
IntConstant  '1' [145457;145458] 
String  '" );uncached = ( rquery.test( cacheURL ) ? "' [145458;145502] 
String  '" : "' [145503;145508] 
IfTernary  '?' [145508;145509] 
String  '" ) + "' [145509;145516] 
Identifier  '_' [145516;145517] 
Equal  '=' [145517;145518] 
String  '" + ( nonce.guid++ ) +uncached;}s.url = cacheURL + uncached;} else if ( s.data && s.processData &&( s.contentType || "' [145518;145636] 
String  '" ).indexOf( "' [145636;145650] 
Identifier  'application' [145650;145661] 
Divide  '/' [145661;145662] 
Identifier  'x' [145662;145663] 
Minus  '-' [145663;145664] 
Identifier  'www' [145664;145667] 
Minus  '-' [145667;145668] 
Identifier  'form' [145668;145672] 
Minus  '-' [145672;145673] 
Identifier  'urlencoded' [145673;145683] 
String  '" ) === 0 ) {s.data = s.data.replace( r20, "' [145683;145727] 
Plus  '+' [145727;145728] 
String  '" );}if ( s.ifModified ) {if ( jQuery.lastModified[ cacheURL ] ) {jqXHR.setRequestHeader( "' [145728;145819] 
Identifier  'If' [145819;145821] 
Minus  '-' [145821;145822] 
Identifier  'Modified' [145822;145830] 
Minus  '-' [145830;145831] 
Identifier  'Since' [145831;145836] 
String  '", jQuery.lastModified[ cacheURL ] );}if ( jQuery.etag[ cacheURL ] ) {jqXHR.setRequestHeader( "' [145836;145931] 
Identifier  'If' [145931;145933] 
Minus  '-' [145933;145934] 
Identifier  'None' [145934;145938] 
Minus  '-' [145938;145939] 
Identifier  'Match' [145939;145944] 
String  '", jQuery.etag[ cacheURL ] );}}if ( s.data && s.hasContent && s.contentType !== false || options.contentType ) {jqXHR.setRequestHeader( "' [145944;146081] 
Identifier  'Content' [146081;146088] 
Minus  '-' [146088;146089] 
Identifier  'Type' [146089;146093] 
String  '", s.contentType );}jqXHR.setRequestHeader("' [146093;146137] 
Identifier  'Accept' [146137;146143] 
String  '",s.dataTypes[ 0 ] && s.accepts[ s.dataTypes[ 0 ] ] ?s.accepts[ s.dataTypes[ 0 ] ] +( s.dataTypes[ 0 ] !== "' [146143;146251] 
Multiply  '*' [146251;146252] 
String  '" ? "' [146252;146257] 
Comma  ',' [146257;146258] 
WhiteSpace   [146258;146259] 
String  '" + allTypes + "' [146259;146275] 
Semicolon  ';' [146275;146276] 
WhiteSpace   [146276;146277] 
Identifier  'q' [146277;146278] 
Equal  '=' [146278;146279] 
DoubleConstant  '0.01' [146279;146283] 
String  '" : "' [146283;146288] 
String  '" ) :s.accepts[ "' [146288;146305] 
Multiply  '*' [146305;146306] 
String  '" ]);for ( i in s.headers ) {jqXHR.setRequestHeader( i, s.headers[ i ] );}if ( s.beforeSend &&( s.beforeSend.call( callbackContext, jqXHR, s ) === false || completed ) ) {return jqXHR.abort();}strAbort = "' [146306;146511] 
Identifier  'abort' [146511;146516] 
String  '";completeDeferred.add( s.complete );jqXHR.done( s.success );jqXHR.fail( s.error );transport = inspectPrefiltersOrTransports( transports, s, options, jqXHR );if ( !transport ) {done( -1, "' [146516;146704] 
Identifier  'No' [146704;146706] 
WhiteSpace   [146706;146707] 
Identifier  'Transport' [146707;146716] 
String  '" );} else {jqXHR.readyState = 1;if ( fireGlobals ) {globalEventContext.trigger( "' [146716;146798] 
Identifier  'ajaxSend' [146798;146806] 
String  '", [ jqXHR, s ] );}if ( completed ) {return jqXHR;}if ( s.async && s.timeout > 0 ) {timeoutTimer = window.setTimeout( function() {jqXHR.abort( "' [146806;146950] 
Identifier  'timeout' [146950;146957] 
String  '" );}, s.timeout );}try {completed = false;transport.send( requestHeaders, done );} catch ( e ) {if ( completed ) {throw e;}done( -1, e );}}function done( status, nativeStatusText, responses, headers ) {var isSuccess, success, error, response, modified,statusText = nativeStatusText;if ( completed ) {return;}completed = true;if ( timeoutTimer ) {window.clearTimeout( timeoutTimer );}transport = undefined;responseHeadersString = headers || "' [146957;147399] 
String  '";jqXHR.readyState = status > 0 ? 4 : 0;isSuccess = status >= 200 && status < 300 || status === 304;if ( responses ) {response = ajaxHandleResponses( s, jqXHR, responses );}if ( !isSuccess &&jQuery.inArray( "' [147399;147607] 
Identifier  'script' [147607;147613] 
String  '", s.dataTypes ) > -1 &&jQuery.inArray( "' [147613;147654] 
Identifier  'json' [147654;147658] 
String  '", s.dataTypes ) < 0 ) {s.converters[ "' [147658;147697] 
Identifier  'text' [147697;147701] 
WhiteSpace   [147701;147702] 
Identifier  'script' [147702;147708] 
String  '" ] = function() {};}response = ajaxConvert( s, response, jqXHR, isSuccess );if ( isSuccess ) {if ( s.ifModified ) {modified = jqXHR.getResponseHeader( "' [147708;147861] 
Identifier  'Last' [147861;147865] 
Minus  '-' [147865;147866] 
Identifier  'Modified' [147866;147874] 
String  '" );if ( modified ) {jQuery.lastModified[ cacheURL ] = modified;}modified = jqXHR.getResponseHeader( "' [147874;147976] 
Identifier  'etag' [147976;147980] 
String  '" );if ( modified ) {jQuery.etag[ cacheURL ] = modified;}}if ( status === 204 || s.type === "' [147980;148073] 
Identifier  'HEAD' [148073;148077] 
String  '" ) {statusText = "' [148077;148096] 
Identifier  'nocontent' [148096;148105] 
String  '";} else if ( status === 304 ) {statusText = "' [148105;148151] 
Identifier  'notmodified' [148151;148162] 
String  '";} else {statusText = response.state;success = response.data;error = response.error;isSuccess = !error;}} else {error = statusText;if ( status || !statusText ) {statusText = "' [148162;148338] 
Identifier  'error' [148338;148343] 
String  '";if ( status < 0 ) {status = 0;}}}jqXHR.status = status;jqXHR.statusText = ( nativeStatusText || statusText ) + "' [148343;148457] 
String  '";if ( isSuccess ) {deferred.resolveWith( callbackContext, [ success, statusText, jqXHR ] );} else {deferred.rejectWith( callbackContext, [ jqXHR, statusText, error ] );}jqXHR.statusCode( statusCode );statusCode = undefined;if ( fireGlobals ) {globalEventContext.trigger( isSuccess ? "' [148457;148742] 
Identifier  'ajaxSuccess' [148742;148753] 
String  '" : "' [148753;148758] 
Identifier  'ajaxError' [148758;148767] 
String  '",[ jqXHR, s, isSuccess ? success : error ] );}completeDeferred.fireWith( callbackContext, [ jqXHR, statusText ] );if ( fireGlobals ) {globalEventContext.trigger( "' [148767;148931] 
Identifier  'ajaxComplete' [148931;148943] 
String  '", [ jqXHR, s ] );if ( !( --jQuery.active ) ) {jQuery.event.trigger( "' [148943;149013] 
Identifier  'ajaxStop' [149013;149021] 
String  '" );}}}return jqXHR;},getJSON: function( url, data, callback ) {return jQuery.get( url, data, callback, "' [149021;149126] 
Identifier  'json' [149126;149130] 
String  '" );},getScript: function( url, callback ) {return jQuery.get( url, undefined, callback, "' [149130;149220] 
Identifier  'script' [149220;149226] 
String  '" );}} );jQuery.each( [ "' [149226;149251] 
Identifier  'get' [149251;149254] 
String  '", "' [149254;149258] 
Identifier  'post' [149258;149262] 
String  '" ], function( _i, method ) {jQuery[ method ] = function( url, data, callback, type ) {if ( isFunction( data ) ) {type = type || callback;callback = data;data = undefined;}return jQuery.ajax( jQuery.extend( {url: url,type: method,dataType: type,data: data,success: callback}, jQuery.isPlainObject( url ) && url ) );};} );jQuery.ajaxPrefilter( function( s ) {var i;for ( i in s.headers ) {if ( i.toLowerCase() === "' [149262;149676] 
Identifier  'content' [149676;149683] 
Minus  '-' [149683;149684] 
Identifier  'type' [149684;149688] 
String  '" ) {s.contentType = s.headers[ i ] || "' [149688;149728] 
String  '";}}} );jQuery._evalUrl = function( url, options, doc ) {return jQuery.ajax( {url: url,type: "' [149728;149822] 
Identifier  'GET' [149822;149825] 
String  '",dataType: "' [149825;149838] 
Identifier  'script' [149838;149844] 
String  '",cache: true,async: false,global: false,converters: {"' [149844;149899] 
Identifier  'text' [149899;149903] 
WhiteSpace   [149903;149904] 
Identifier  'script' [149904;149910] 
String  '": function() {}},dataFilter: function( response ) {jQuery.globalEval( response, options, doc );}} );};jQuery.fn.extend( {wrapAll: function( html ) {var wrap;if ( this[ 0 ] ) {if ( isFunction( html ) ) {html = html.call( this[ 0 ] );}wrap = jQuery( html, this[ 0 ].ownerDocument ).eq( 0 ).clone( true );if ( this[ 0 ].parentNode ) {wrap.insertBefore( this[ 0 ] );}wrap.map( function() {var elem = this;while ( elem.firstElementChild ) {elem = elem.firstElementChild;}return elem;} ).append( this );}return this;},wrapInner: function( html ) {if ( isFunction( html ) ) {return this.each( function( i ) {jQuery( this ).wrapInner( html.call( this, i ) );} );}return this.each( function() {var self = jQuery( this ),contents = self.contents();if ( contents.length ) {contents.wrapAll( html );} else {self.append( html );}} );},wrap: function( html ) {var htmlIsFunction = isFunction( html );return this.each( function( i ) {jQuery( this ).wrapAll( htmlIsFunction ? html.call( this, i ) : html );} );},unwrap: function( selector ) {this.parent( selector ).not( "' [149910;150967] 
Identifier  'body' [150967;150971] 
String  '" ).each( function() {jQuery( this ).replaceWith( this.childNodes );} );return this;}} );jQuery.expr.pseudos.hidden = function( elem ) {return !jQuery.expr.pseudos.visible( elem );};jQuery.expr.pseudos.visible = function( elem ) {return !!( elem.offsetWidth || elem.offsetHeight || elem.getClientRects().length );};jQuery.ajaxSettings.xhr = function() {try {return new window.XMLHttpRequest();} catch ( e ) {}};var xhrSuccessStatus = {0: 200,1223: 204},xhrSupported = jQuery.ajaxSettings.xhr();support.cors = !!xhrSupported && ( "' [150971;151501] 
Identifier  'withCredentials' [151501;151516] 
String  '" in xhrSupported );support.ajax = xhrSupported = !!xhrSupported;jQuery.ajaxTransport( function( options ) {var callback, errorCallback;if ( support.cors || xhrSupported && !options.crossDomain ) {return {send: function( headers, complete ) {var i,xhr = options.xhr();xhr.open(options.type,options.url,options.async,options.username,options.password);if ( options.xhrFields ) {for ( i in options.xhrFields ) {xhr[ i ] = options.xhrFields[ i ];}}if ( options.mimeType && xhr.overrideMimeType ) {xhr.overrideMimeType( options.mimeType );}if ( !options.crossDomain && !headers[ "' [151516;152092] 
Identifier  'X' [152092;152093] 
Minus  '-' [152093;152094] 
Identifier  'Requested' [152094;152103] 
Minus  '-' [152103;152104] 
Identifier  'With' [152104;152108] 
String  '" ] ) {headers[ "' [152108;152125] 
Identifier  'X' [152125;152126] 
Minus  '-' [152126;152127] 
Identifier  'Requested' [152127;152136] 
Minus  '-' [152136;152137] 
Identifier  'With' [152137;152141] 
String  '" ] = "' [152141;152148] 
Identifier  'XMLHttpRequest' [152148;152162] 
String  '";}for ( i in headers ) {xhr.setRequestHeader( i, headers[ i ] );}callback = function( type ) {return function() {if ( callback ) {callback = errorCallback = xhr.onload =xhr.onerror = xhr.onabort = xhr.ontimeout =xhr.onreadystatechange = null;if ( type === "' [152162;152420] 
Identifier  'abort' [152420;152425] 
String  '" ) {xhr.abort();} else if ( type === "' [152425;152464] 
Identifier  'error' [152464;152469] 
String  '" ) {if ( typeof xhr.status !== "' [152469;152502] 
Identifier  'number' [152502;152508] 
String  '" ) {complete( 0, "' [152508;152527] 
Identifier  'error' [152527;152532] 
String  '" );} else {complete(xhr.status,xhr.statusText);}} else {complete(xhrSuccessStatus[ xhr.status ] || xhr.status,xhr.statusText,( xhr.responseType || "' [152532;152681] 
Identifier  'text' [152681;152685] 
String  '" ) !== "' [152685;152694] 
Identifier  'text' [152694;152698] 
String  '"  ||typeof xhr.responseText !== "' [152698;152732] 
Identifier  'string' [152732;152738] 
String  '" ?{ binary: xhr.response } :{ text: xhr.responseText },xhr.getAllResponseHeaders());}}};};xhr.onload = callback();errorCallback = xhr.onerror = xhr.ontimeout = callback( "' [152738;152910] 
Identifier  'error' [152910;152915] 
String  '" );if ( xhr.onabort !== undefined ) {xhr.onabort = errorCallback;} else {xhr.onreadystatechange = function() {if ( xhr.readyState === 4 ) {window.setTimeout( function() {if ( callback ) {errorCallback();}} );}};}callback = callback( "' [152915;153150] 
Identifier  'abort' [153150;153155] 
String  '" );try {xhr.send( options.hasContent && options.data || null );} catch ( e ) {if ( callback ) {throw e;}}},abort: function() {if ( callback ) {callback();}}};}} );jQuery.ajaxPrefilter( function( s ) {if ( s.crossDomain ) {s.contents.script = false;}} );jQuery.ajaxSetup( {accepts: {script: "' [153155;153447] 
Identifier  'text' [153447;153451] 
Divide  '/' [153451;153452] 
Identifier  'javascript' [153452;153462] 
Comma  ',' [153462;153463] 
WhiteSpace   [153463;153464] 
Identifier  'application' [153464;153475] 
Divide  '/' [153475;153476] 
Identifier  'javascript' [153476;153486] 
Comma  ',' [153486;153487] 
WhiteSpace   [153487;153488] 
String  '" +"' [153488;153492] 
Identifier  'application' [153492;153503] 
Divide  '/' [153503;153504] 
Identifier  'ecmascript' [153504;153514] 
Comma  ',' [153514;153515] 
WhiteSpace   [153515;153516] 
Identifier  'application' [153516;153527] 
Divide  '/' [153527;153528] 
Identifier  'x' [153528;153529] 
Minus  '-' [153529;153530] 
Identifier  'ecmascript' [153530;153540] 
String  '"},contents: {script: /\b(?:java|ecma)script\b/},converters: {"' [153540;153603] 
Identifier  'text' [153603;153607] 
WhiteSpace   [153607;153608] 
Identifier  'script' [153608;153614] 
String  '": function( text ) {jQuery.globalEval( text );return text;}}} );jQuery.ajaxPrefilter( "' [153614;153702] 
Identifier  'script' [153702;153708] 
String  '", function( s ) {if ( s.cache === undefined ) {s.cache = false;}if ( s.crossDomain ) {s.type = "' [153708;153805] 
Identifier  'GET' [153805;153808] 
String  '";}} );jQuery.ajaxTransport( "' [153808;153838] 
Identifier  'script' [153838;153844] 
String  '", function( s ) {if ( s.crossDomain || s.scriptAttrs ) {var script, callback;return {send: function( _, complete ) {script = jQuery( "' [153844;153979] 
Less  '<' [153979;153980] 
Identifier  'script' [153980;153986] 
Greater  '>' [153986;153987] 
String  '" ).attr( s.scriptAttrs || {} ).prop( { charset: s.scriptCharset, src: s.url } ).on( "' [153987;154073] 
Identifier  'load' [154073;154077] 
WhiteSpace   [154077;154078] 
Identifier  'error' [154078;154083] 
String  '", callback = function( evt ) {script.remove();callback = null;if ( evt ) {complete( evt.type === "' [154083;154182] 
Identifier  'error' [154182;154187] 
String  '" ? 404 : 200, evt.type );}} );document.head.appendChild( script[ 0 ] );},abort: function() {if ( callback ) {callback();}}};}} );var oldCallbacks = [],rjsonp = /(=)\?(?=&|$)|\?\?/;jQuery.ajaxSetup( {jsonp: "' [154187;154395] 
Identifier  'callback' [154395;154403] 
String  '",jsonpCallback: function() {var callback = oldCallbacks.pop() || ( jQuery.expando + "' [154403;154489] 
Identifier  '_' [154489;154490] 
String  '" + ( nonce.guid++ ) );this[ callback ] = true;return callback;}} );jQuery.ajaxPrefilter( "' [154490;154581] 
Identifier  'json' [154581;154585] 
WhiteSpace   [154585;154586] 
Identifier  'jsonp' [154586;154591] 
String  '", function( s, originalSettings, jqXHR ) {var callbackName, overwritten, responseContainer,jsonProp = s.jsonp !== false && ( rjsonp.test( s.url ) ?"' [154591;154740] 
Identifier  'url' [154740;154743] 
String  '" :typeof s.data === "' [154743;154765] 
Identifier  'string' [154765;154771] 
String  '" &&( s.contentType || "' [154771;154795] 
String  '" ).indexOf( "' [154795;154809] 
Identifier  'application' [154809;154820] 
Divide  '/' [154820;154821] 
Identifier  'x' [154821;154822] 
Minus  '-' [154822;154823] 
Identifier  'www' [154823;154826] 
Minus  '-' [154826;154827] 
Identifier  'form' [154827;154831] 
Minus  '-' [154831;154832] 
Identifier  'urlencoded' [154832;154842] 
String  '" ) === 0 &&rjsonp.test( s.data ) && "' [154842;154880] 
Identifier  'data' [154880;154884] 
String  '");if ( jsonProp || s.dataTypes[ 0 ] === "' [154884;154926] 
Identifier  'jsonp' [154926;154931] 
String  '" ) {callbackName = s.jsonpCallback = isFunction( s.jsonpCallback ) ?s.jsonpCallback() :s.jsonpCallback;if ( jsonProp ) {s[ jsonProp ] = s[ jsonProp ].replace( rjsonp, "' [154931;155100] 
IntConstant  '1' [155101;155102] 
String  '" + callbackName );} else if ( s.jsonp !== false ) {s.url += ( rquery.test( s.url ) ? "' [155102;155189] 
String  '" : "' [155190;155195] 
IfTernary  '?' [155195;155196] 
String  '" ) + s.jsonp + "' [155196;155213] 
Equal  '=' [155213;155214] 
String  '" + callbackName;}s.converters[ "' [155214;155247] 
Identifier  'script' [155247;155253] 
WhiteSpace   [155253;155254] 
Identifier  'json' [155254;155258] 
String  '" ] = function() {if ( !responseContainer ) {jQuery.error( callbackName + "' [155258;155333] 
WhiteSpace   [155333;155334] 
Identifier  'was' [155334;155337] 
WhiteSpace   [155337;155338] 
Identifier  'not' [155338;155341] 
WhiteSpace   [155341;155342] 
Identifier  'called' [155342;155348] 
String  '" );}return responseContainer[ 0 ];};s.dataTypes[ 0 ] = "' [155348;155405] 
Identifier  'json' [155405;155409] 
String  '";overwritten = window[ callbackName ];window[ callbackName ] = function() {responseContainer = arguments;};jqXHR.always( function() {if ( overwritten === undefined ) {jQuery( window ).removeProp( callbackName );} else {window[ callbackName ] = overwritten;}if ( s[ callbackName ] ) {s.jsonpCallback = originalSettings.jsonpCallback;oldCallbacks.push( callbackName );}if ( responseContainer && isFunction( overwritten ) ) {overwritten( responseContainer[ 0 ] );}responseContainer = overwritten = undefined;} );return "' [155409;155927] 
Identifier  'script' [155927;155933] 
String  '";}} );support.createHTMLDocument = ( function() {var body = document.implementation.createHTMLDocument( "' [155933;156039] 
String  '" ).body;body.innerHTML = "' [156039;156066] 
Less  '<' [156066;156067] 
Identifier  'form' [156067;156071] 
Greater  '>' [156071;156072] 
Less  '<' [156072;156073] 
Divide  '/' [156073;156074] 
Identifier  'form' [156074;156078] 
Greater  '>' [156078;156079] 
Less  '<' [156079;156080] 
Identifier  'form' [156080;156084] 
Greater  '>' [156084;156085] 
Less  '<' [156085;156086] 
Divide  '/' [156086;156087] 
Identifier  'form' [156087;156091] 
Greater  '>' [156091;156092] 
String  '";return body.childNodes.length === 2;} )();jQuery.parseHTML = function( data, context, keepScripts ) {if ( typeof data !== "' [156092;156217] 
Identifier  'string' [156217;156223] 
String  '" ) {return [];}if ( typeof context === "' [156223;156264] 
Identifier  'boolean' [156264;156271] 
String  '" ) {keepScripts = context;context = false;}var base, parsed, scripts;if ( !context ) {if ( support.createHTMLDocument ) {context = document.implementation.createHTMLDocument( "' [156271;156448] 
String  '" );base = context.createElement( "' [156448;156483] 
Identifier  'base' [156483;156487] 
String  '" );base.href = document.location.href;context.head.appendChild( base );} else {context = document;}}parsed = rsingleTag.exec( data );scripts = !keepScripts && [];if ( parsed ) {return [ context.createElement( parsed[ 1 ] ) ];}parsed = buildFragment( [ data ], context, scripts );if ( scripts && scripts.length ) {jQuery( scripts ).remove();}return jQuery.merge( [], parsed.childNodes );};jQuery.fn.load = function( url, params, callback ) {var selector, type, response,self = this,off = url.indexOf( "' [156487;156989] 
WhiteSpace   [156989;156990] 
String  '" );if ( off > -1 ) {selector = stripAndCollapse( url.slice( off ) );url = url.slice( 0, off );}if ( isFunction( params ) ) {callback = params;params = undefined;} else if ( params && typeof params === "' [156990;157193] 
Identifier  'object' [157193;157199] 
String  '" ) {type = "' [157199;157212] 
Identifier  'POST' [157212;157216] 
String  '";}if ( self.length > 0 ) {jQuery.ajax( {url: url,type: type || "' [157216;157281] 
Identifier  'GET' [157281;157284] 
String  '",dataType: "' [157284;157297] 
Identifier  'html' [157297;157301] 
String  '",data: params} ).done( function( responseText ) {response = arguments;self.html( selector ?jQuery( "' [157301;157402] 
Less  '<' [157402;157403] 
Identifier  'div' [157403;157406] 
Greater  '>' [157406;157407] 
String  '" ).append( jQuery.parseHTML( responseText ) ).find( selector ) :responseText );} ).always( callback && function( jqXHR, status ) {self.each( function() {callback.apply( this, response || [ jqXHR.responseText, status, jqXHR ] );} );} );}return this;};jQuery.expr.pseudos.animated = function( elem ) {return jQuery.grep( jQuery.timers, function( fn ) {return elem === fn.elem;} ).length;};jQuery.offset = {setOffset: function( elem, options, i ) {var curPosition, curLeft, curCSSTop, curTop, curOffset, curCSSLeft, calculatePosition,position = jQuery.css( elem, "' [157407;157969] 
Identifier  'position' [157969;157977] 
String  '" ),curElem = jQuery( elem ),props = {};if ( position === "' [157977;158036] 
Static  'static' [158036;158042] 
String  '" ) {elem.style.position = "' [158042;158070] 
Identifier  'relative' [158070;158078] 
String  '";}curOffset = curElem.offset();curCSSTop = jQuery.css( elem, "' [158078;158141] 
Identifier  'top' [158141;158144] 
String  '" );curCSSLeft = jQuery.css( elem, "' [158144;158180] 
Identifier  'left' [158180;158184] 
String  '" );calculatePosition = ( position === "' [158184;158224] 
Identifier  'absolute' [158224;158232] 
String  '" || position === "' [158232;158251] 
Identifier  'fixed' [158251;158256] 
String  '" ) &&( curCSSTop + curCSSLeft ).indexOf( "' [158256;158299] 
Identifier  'auto' [158299;158303] 
String  '" ) > -1;if ( calculatePosition ) {curPosition = curElem.position();curTop = curPosition.top;curLeft = curPosition.left;} else {curTop = parseFloat( curCSSTop ) || 0;curLeft = parseFloat( curCSSLeft ) || 0;}if ( isFunction( options ) ) {options = options.call( elem, i, jQuery.extend( {}, curOffset ) );}if ( options.top != null ) {props.top = ( options.top - curOffset.top ) + curTop;}if ( options.left != null ) {props.left = ( options.left - curOffset.left ) + curLeft;}if ( "' [158303;158782] 
Identifier  'using' [158782;158787] 
String  '" in options ) {options.using.call( elem, props );} else {curElem.css( props );}}};jQuery.fn.extend( {offset: function( options ) {if ( arguments.length ) {return options === undefined ?this :this.each( function( i ) {jQuery.offset.setOffset( this, options, i );} );}var rect, win,elem = this[ 0 ];if ( !elem ) {return;}if ( !elem.getClientRects().length ) {return { top: 0, left: 0 };}rect = elem.getBoundingClientRect();win = elem.ownerDocument.defaultView;return {top: rect.top + win.pageYOffset,left: rect.left + win.pageXOffset};},position: function() {if ( !this[ 0 ] ) {return;}var offsetParent, offset, doc,elem = this[ 0 ],parentOffset = { top: 0, left: 0 };if ( jQuery.css( elem, "' [158787;159478] 
Identifier  'position' [159478;159486] 
String  '" ) === "' [159486;159495] 
Identifier  'fixed' [159495;159500] 
String  '" ) {offset = elem.getBoundingClientRect();} else {offset = this.offset();doc = elem.ownerDocument;offsetParent = elem.offsetParent || doc.documentElement;while ( offsetParent &&( offsetParent === doc.body || offsetParent === doc.documentElement ) &&jQuery.css( offsetParent, "' [159500;159777] 
Identifier  'position' [159777;159785] 
String  '" ) === "' [159785;159794] 
Static  'static' [159794;159800] 
String  '" ) {offsetParent = offsetParent.parentNode;}if ( offsetParent && offsetParent !== elem && offsetParent.nodeType === 1 ) {parentOffset = jQuery( offsetParent ).offset();parentOffset.top += jQuery.css( offsetParent, "' [159800;160016] 
Identifier  'borderTopWidth' [160016;160030] 
String  '", true );parentOffset.left += jQuery.css( offsetParent, "' [160030;160088] 
Identifier  'borderLeftWidth' [160088;160103] 
String  '", true );}}return {top: offset.top - parentOffset.top - jQuery.css( elem, "' [160103;160179] 
Identifier  'marginTop' [160179;160188] 
String  '", true ),left: offset.left - parentOffset.left - jQuery.css( elem, "' [160188;160257] 
Identifier  'marginLeft' [160257;160267] 
String  '", true )};},offsetParent: function() {return this.map( function() {var offsetParent = this.offsetParent;while ( offsetParent && jQuery.css( offsetParent, "' [160267;160423] 
Identifier  'position' [160423;160431] 
String  '" ) === "' [160431;160440] 
Static  'static' [160440;160446] 
String  '" ) {offsetParent = offsetParent.offsetParent;}return offsetParent || documentElement;} );}} );jQuery.each( { scrollLeft: "' [160446;160569] 
Identifier  'pageXOffset' [160569;160580] 
String  '", scrollTop: "' [160580;160595] 
Identifier  'pageYOffset' [160595;160606] 
String  '" }, function( method, prop ) {var top = "' [160606;160648] 
Identifier  'pageYOffset' [160648;160659] 
String  '" === prop;jQuery.fn[ method ] = function( val ) {return access( this, function( elem, method, val ) {var win;if ( isWindow( elem ) ) {win = elem;} else if ( elem.nodeType === 9 ) {win = elem.defaultView;}if ( val === undefined ) {return win ? win[ prop ] : elem[ method ];}if ( win ) {win.scrollTo(!top ? val : win.pageXOffset,top ? val : win.pageYOffset);} else {elem[ method ] = val;}}, method, val, arguments.length );};} );jQuery.each( [ "' [160659;161103] 
Identifier  'top' [161103;161106] 
String  '", "' [161106;161110] 
Identifier  'left' [161110;161114] 
String  '" ], function( _i, prop ) {jQuery.cssHooks[ prop ] = addGetHookIf( support.pixelPosition,function( elem, computed ) {if ( computed ) {computed = curCSS( elem, prop );return rnumnonpx.test( computed ) ?jQuery( elem ).position()[ prop ] + "' [161114;161352] 
Identifier  'px' [161352;161354] 
String  '" :computed;}});} );jQuery.each( { Height: "' [161354;161398] 
Identifier  'height' [161398;161404] 
String  '", Width: "' [161404;161415] 
Identifier  'width' [161415;161420] 
String  '" }, function( name, type ) {jQuery.each( {padding: "' [161420;161473] 
Identifier  'inner' [161473;161478] 
String  '" + name,content: type,"' [161478;161502] 
String  '": "' [161502;161506] 
Identifier  'outer' [161506;161511] 
String  '" + name}, function( defaultExtra, funcName ) {jQuery.fn[ funcName ] = function( margin, value ) {var chainable = arguments.length && ( defaultExtra || typeof margin !== "' [161511;161682] 
Identifier  'boolean' [161682;161689] 
String  '" ),extra = defaultExtra || ( margin === true || value === true ? "' [161689;161756] 
Identifier  'margin' [161756;161762] 
String  '" : "' [161762;161767] 
Identifier  'border' [161767;161773] 
String  '" );return access( this, function( elem, type, value ) {var doc;if ( isWindow( elem ) ) {return funcName.indexOf( "' [161773;161888] 
Identifier  'outer' [161888;161893] 
String  '" ) === 0 ?elem[ "' [161893;161911] 
Identifier  'inner' [161911;161916] 
String  '" + name ] :elem.document.documentElement[ "' [161916;161960] 
Identifier  'client' [161960;161966] 
String  '" + name ];}if ( elem.nodeType === 9 ) {doc = elem.documentElement;return Math.max(elem.body[ "' [161966;162061] 
Identifier  'scroll' [162061;162067] 
String  '" + name ], doc[ "' [162067;162085] 
Identifier  'scroll' [162085;162091] 
String  '" + name ],elem.body[ "' [162091;162114] 
Identifier  'offset' [162114;162120] 
String  '" + name ], doc[ "' [162120;162138] 
Identifier  'offset' [162138;162144] 
String  '" + name ],doc[ "' [162144;162161] 
Identifier  'client' [162161;162167] 
String  '" + name ]);}return value === undefined ?jQuery.css( elem, type, extra ) :jQuery.style( elem, type, value, extra );}, type, chainable ? margin : undefined, chainable );};} );} );jQuery.each( ["' [162167;162360] 
Identifier  'ajaxStart' [162360;162369] 
String  '","' [162369;162372] 
Identifier  'ajaxStop' [162372;162380] 
String  '","' [162380;162383] 
Identifier  'ajaxComplete' [162383;162395] 
String  '","' [162395;162398] 
Identifier  'ajaxError' [162398;162407] 
String  '","' [162407;162410] 
Identifier  'ajaxSuccess' [162410;162421] 
String  '","' [162421;162424] 
Identifier  'ajaxSend' [162424;162432] 
String  '"], function( _i, type ) {jQuery.fn[ type ] = function( fn ) {return this.on( type, fn );};} );jQuery.fn.extend( {bind: function( types, data, fn ) {return this.on( types, null, data, fn );},unbind: function( types, fn ) {return this.off( types, null, fn );},delegate: function( selector, types, data, fn ) {return this.on( types, selector, data, fn );},undelegate: function( selector, types, fn ) {return arguments.length === 1 ?this.off( selector, "' [162432;162883] 
Multiply  '*' [162883;162884] 
Multiply  '*' [162884;162885] 
String  '" ) :this.off( types, selector || "' [162885;162920] 
Multiply  '*' [162920;162921] 
Multiply  '*' [162921;162922] 
String  '", fn );},hover: function( fnOver, fnOut ) {return this.mouseenter( fnOver ).mouseleave( fnOut || fnOver );}} );jQuery.each(( "' [162922;163049] 
Identifier  'blur' [163049;163053] 
WhiteSpace   [163053;163054] 
Identifier  'focus' [163054;163059] 
WhiteSpace   [163059;163060] 
Identifier  'focusin' [163060;163067] 
WhiteSpace   [163067;163068] 
Identifier  'focusout' [163068;163076] 
WhiteSpace   [163076;163077] 
Identifier  'resize' [163077;163083] 
WhiteSpace   [163083;163084] 
Identifier  'scroll' [163084;163090] 
WhiteSpace   [163090;163091] 
Identifier  'click' [163091;163096] 
WhiteSpace   [163096;163097] 
Identifier  'dblclick' [163097;163105] 
WhiteSpace   [163105;163106] 
String  '" +"' [163106;163110] 
Identifier  'mousedown' [163110;163119] 
WhiteSpace   [163119;163120] 
Identifier  'mouseup' [163120;163127] 
WhiteSpace   [163127;163128] 
Identifier  'mousemove' [163128;163137] 
WhiteSpace   [163137;163138] 
Identifier  'mouseover' [163138;163147] 
WhiteSpace   [163147;163148] 
Identifier  'mouseout' [163148;163156] 
WhiteSpace   [163156;163157] 
Identifier  'mouseenter' [163157;163167] 
WhiteSpace   [163167;163168] 
Identifier  'mouseleave' [163168;163178] 
WhiteSpace   [163178;163179] 
String  '" +"' [163179;163183] 
Identifier  'change' [163183;163189] 
WhiteSpace   [163189;163190] 
Identifier  'select' [163190;163196] 
WhiteSpace   [163196;163197] 
Identifier  'submit' [163197;163203] 
WhiteSpace   [163203;163204] 
Identifier  'keydown' [163204;163211] 
WhiteSpace   [163211;163212] 
Identifier  'keypress' [163212;163220] 
WhiteSpace   [163220;163221] 
Identifier  'keyup' [163221;163226] 
WhiteSpace   [163226;163227] 
Identifier  'contextmenu' [163227;163238] 
String  '" ).split( "' [163238;163250] 
WhiteSpace   [163250;163251] 
String  '" ),function( _i, name ) {jQuery.fn[ name ] = function( data, fn ) {return arguments.length > 0 ?this.on( name, null, data, fn ) :this.trigger( name );};});var rtrim = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g;jQuery.proxy = function( fn, context ) {var tmp, args, proxy;if ( typeof context === "' [163251;163542] 
Identifier  'string' [163542;163548] 
String  '" ) {tmp = fn[ context ];context = fn;fn = tmp;}if ( !isFunction( fn ) ) {return undefined;}args = slice.call( arguments, 2 );proxy = function() {return fn.apply( context || this, args.concat( slice.call( arguments ) ) );};proxy.guid = fn.guid = fn.guid || jQuery.guid++;return proxy;};jQuery.holdReady = function( hold ) {if ( hold ) {jQuery.readyWait++;} else {jQuery.ready( true );}};jQuery.isArray = Array.isArray;jQuery.parseJSON = JSON.parse;jQuery.nodeName = nodeName;jQuery.isFunction = isFunction;jQuery.isWindow = isWindow;jQuery.camelCase = camelCase;jQuery.type = toType;jQuery.now = Date.now;jQuery.isNumeric = function( obj ) {var type = jQuery.type( obj );return ( type === "' [163548;164238] 
Identifier  'number' [164238;164244] 
String  '" || type === "' [164244;164259] 
Identifier  'string' [164259;164265] 
String  '" ) &&!isNaN( obj - parseFloat( obj ) );};jQuery.trim = function( text ) {return text == null ?"' [164265;164361] 
String  '" :( text + "' [164361;164374] 
String  '" ).replace( rtrim, "' [164374;164395] 
String  '" );};if ( typeof define === "' [164395;164425] 
Function  'function' [164425;164433] 
String  '" && define.amd ) {define( "' [164433;164461] 
Identifier  'jquery' [164461;164467] 
String  '", [], function() {return jQuery;} );}var_jQuery = window.jQuery,_$ = window.$;jQuery.noConflict = function( deep ) {if ( window.$ === jQuery ) {window.$ = _$;}if ( deep && window.jQuery === jQuery ) {window.jQuery = _jQuery;}return jQuery;};if ( typeof noGlobal === "' [164467;164735] 
Undefined  'undefined' [164735;164744] 
WhiteSpace   [164745;164746] 
CloseBrace  ')' [164746;164747] 
WhiteSpace   [164747;164748] 
OpeningCurlyBrace  '{' [164748;164749] 
Identifier  'window' [164749;164755] 
Point  '.' [164755;164756] 
Identifier  'jQuery' [164756;164762] 
WhiteSpace   [164762;164763] 
Equal  '=' [164763;164764] 
WhiteSpace   [164764;164765] 
Identifier  'window' [164765;164771] 
Point  '.' [164771;164772] 
WhiteSpace   [164773;164774] 
Equal  '=' [164774;164775] 
WhiteSpace   [164775;164776] 
Identifier  'jQuery' [164776;164782] 
Semicolon  ';' [164782;164783] 
ClosingCurlyBrace  '}' [164783;164784] 
Return  'return' [164784;164790] 
WhiteSpace   [164790;164791] 
Identifier  'jQuery' [164791;164797] 
Semicolon  ';' [164797;164798] 
ClosingCurlyBrace  '}' [164798;164799] 
WhiteSpace   [164799;164800] 
CloseBrace  ')' [164800;164801] 
Semicolon  ';' [164801;164802] 
Carriage  '' [164802;164803] 
NewLine   [164803;164804] 
